
Octoplus-Template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004eb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000152  00802000  00004eb6  00004f4a  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ced  00802152  00802152  0000509e  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000009b0  00000000  00000000  000050f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013b38  00000000  00000000  00005aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003093  00000000  00000000  000195e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000e257  00000000  00000000  0001c673  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002268  00000000  00000000  0002a8cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000312e4  00000000  00000000  0002cb34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000081fd  00000000  00000000  0005de18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008b0  00000000  00000000  00066018  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000d3c3  00000000  00000000  000668c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_13>
      38:	dd c7       	rjmp	.+4026   	; 0xff4 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_15>
      40:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_16>
      44:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_17>
      48:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_18>
      4c:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__vector_19>
      50:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_20>
      54:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__vector_21>
      58:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_22>
      5c:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__vector_23>
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__vector_43>
      b0:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <__vector_44>
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__vector_46>
      bc:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__vector_47>
      c0:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_48>
      c4:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__vector_49>
      c8:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_50>
      cc:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_51>
      d0:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__vector_52>
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_77>
     138:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__vector_78>
     13c:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_79>
     140:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__vector_80>
     144:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_81>
     148:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_82>
     14c:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_83>
     150:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__vector_84>
     154:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__vector_85>
     158:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_86>
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__vector_125>
     1f8:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__vector_126>
     1fc:	b3 0e       	add	r11, r19
     1fe:	a1 0e       	add	r10, r17
     200:	a4 0e       	add	r10, r20
     202:	a7 0e       	add	r10, r23
     204:	aa 0e       	add	r10, r26
     206:	ad 0e       	add	r10, r29
     208:	b0 0e       	add	r11, r16

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	11 e2       	ldi	r17, 0x21	; 33
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	e6 eb       	ldi	r30, 0xB6	; 182
     21e:	fe e4       	ldi	r31, 0x4E	; 78
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a2 35       	cpi	r26, 0x52	; 82
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	2e e2       	ldi	r18, 0x2E	; 46
     22e:	a2 e5       	ldi	r26, 0x52	; 82
     230:	b1 e2       	ldi	r27, 0x21	; 33
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	af 33       	cpi	r26, 0x3F	; 63
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 28 20 	call	0x4050	; 0x4050 <main>
     240:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     246:	10 92 68 22 	sts	0x2268, r1
     24a:	10 92 74 22 	sts	0x2274, r1
     24e:	10 92 75 22 	sts	0x2275, r1
     252:	81 ea       	ldi	r24, 0xA1	; 161
     254:	80 93 6a 22 	sts	0x226A, r24
     258:	80 e2       	ldi	r24, 0x20	; 32
     25a:	80 93 6b 22 	sts	0x226B, r24
     25e:	10 92 6c 22 	sts	0x226C, r1
     262:	10 92 6d 22 	sts	0x226D, r1
     266:	10 92 6e 22 	sts	0x226E, r1
     26a:	10 92 6f 22 	sts	0x226F, r1
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	80 93 70 22 	sts	0x2270, r24
     276:	90 93 71 22 	sts	0x2271, r25
     27a:	10 92 72 22 	sts	0x2272, r1
     27e:	10 92 73 22 	sts	0x2273, r1
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	92 ec       	ldi	r25, 0xC2	; 194
     286:	a1 e0       	ldi	r26, 0x01	; 1
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	80 93 76 22 	sts	0x2276, r24
     28e:	90 93 77 22 	sts	0x2277, r25
     292:	a0 93 78 22 	sts	0x2278, r26
     296:	b0 93 79 22 	sts	0x2279, r27
     29a:	10 92 7a 22 	sts	0x227A, r1
     29e:	10 92 7b 22 	sts	0x227B, r1
     2a2:	88 e0       	ldi	r24, 0x08	; 8
     2a4:	80 93 7c 22 	sts	0x227C, r24
     2a8:	80 91 68 22 	lds	r24, 0x2268
     2ac:	8f 5f       	subi	r24, 0xFF	; 255
     2ae:	80 93 68 22 	sts	0x2268, r24
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	08 95       	ret

000002b6 <udi_cdc_comm_disable>:
     2b6:	80 91 68 22 	lds	r24, 0x2268
     2ba:	81 50       	subi	r24, 0x01	; 1
     2bc:	80 93 68 22 	sts	0x2268, r24
     2c0:	08 95       	ret

000002c2 <udi_cdc_data_disable>:
     2c2:	80 91 67 22 	lds	r24, 0x2267
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	80 93 67 22 	sts	0x2267, r24
     2cc:	80 91 67 22 	lds	r24, 0x2267
     2d0:	10 92 66 22 	sts	0x2266, r1
     2d4:	08 95       	ret

000002d6 <udi_cdc_data_setup>:
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	08 95       	ret

000002da <udi_cdc_getsetting>:
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	08 95       	ret

000002de <udi_cdc_comm_setup>:
     2de:	80 91 09 24 	lds	r24, 0x2409
     2e2:	88 23       	and	r24, r24
     2e4:	dc f4       	brge	.+54     	; 0x31c <udi_cdc_comm_setup+0x3e>
     2e6:	80 76       	andi	r24, 0x60	; 96
     2e8:	80 32       	cpi	r24, 0x20	; 32
     2ea:	e9 f5       	brne	.+122    	; 0x366 <udi_cdc_comm_setup+0x88>
     2ec:	80 91 0a 24 	lds	r24, 0x240A
     2f0:	81 32       	cpi	r24, 0x21	; 33
     2f2:	d9 f5       	brne	.+118    	; 0x36a <udi_cdc_comm_setup+0x8c>
     2f4:	80 91 0f 24 	lds	r24, 0x240F
     2f8:	90 91 10 24 	lds	r25, 0x2410
     2fc:	07 97       	sbiw	r24, 0x07	; 7
     2fe:	b9 f5       	brne	.+110    	; 0x36e <udi_cdc_comm_setup+0x90>
     300:	86 e7       	ldi	r24, 0x76	; 118
     302:	92 e2       	ldi	r25, 0x22	; 34
     304:	80 93 11 24 	sts	0x2411, r24
     308:	90 93 12 24 	sts	0x2412, r25
     30c:	87 e0       	ldi	r24, 0x07	; 7
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	80 93 13 24 	sts	0x2413, r24
     314:	90 93 14 24 	sts	0x2414, r25
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	08 95       	ret
     31c:	80 76       	andi	r24, 0x60	; 96
     31e:	80 32       	cpi	r24, 0x20	; 32
     320:	41 f5       	brne	.+80     	; 0x372 <udi_cdc_comm_setup+0x94>
     322:	80 91 0a 24 	lds	r24, 0x240A
     326:	80 32       	cpi	r24, 0x20	; 32
     328:	21 f0       	breq	.+8      	; 0x332 <udi_cdc_comm_setup+0x54>
     32a:	82 32       	cpi	r24, 0x22	; 34
     32c:	21 f5       	brne	.+72     	; 0x376 <udi_cdc_comm_setup+0x98>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	08 95       	ret
     332:	80 91 0f 24 	lds	r24, 0x240F
     336:	90 91 10 24 	lds	r25, 0x2410
     33a:	07 97       	sbiw	r24, 0x07	; 7
     33c:	f1 f4       	brne	.+60     	; 0x37a <udi_cdc_comm_setup+0x9c>
     33e:	8f eb       	ldi	r24, 0xBF	; 191
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	80 93 15 24 	sts	0x2415, r24
     346:	90 93 16 24 	sts	0x2416, r25
     34a:	86 e7       	ldi	r24, 0x76	; 118
     34c:	92 e2       	ldi	r25, 0x22	; 34
     34e:	80 93 11 24 	sts	0x2411, r24
     352:	90 93 12 24 	sts	0x2412, r25
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	80 93 13 24 	sts	0x2413, r24
     35e:	90 93 14 24 	sts	0x2414, r25
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	08 95       	ret
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	08 95       	ret
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	08 95       	ret
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	08 95       	ret
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	08 95       	ret
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	08 95       	ret
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	08 95       	ret

0000037e <udi_cdc_line_coding_received>:
     37e:	08 95       	ret

00000380 <udi_cdc_tx_send>:
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	80 91 55 21 	lds	r24, 0x2155
     38e:	81 11       	cpse	r24, r1
     390:	9c c0       	rjmp	.+312    	; 0x4ca <udi_cdc_tx_send+0x14a>
     392:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <udd_is_high_speed>
     396:	88 23       	and	r24, r24
     398:	51 f0       	breq	.+20     	; 0x3ae <udi_cdc_tx_send+0x2e>
     39a:	c0 91 56 21 	lds	r28, 0x2156
     39e:	d0 91 57 21 	lds	r29, 0x2157
     3a2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <udd_get_micro_frame_number>
     3a6:	c8 17       	cp	r28, r24
     3a8:	d9 07       	cpc	r29, r25
     3aa:	59 f4       	brne	.+22     	; 0x3c2 <udi_cdc_tx_send+0x42>
     3ac:	8e c0       	rjmp	.+284    	; 0x4ca <udi_cdc_tx_send+0x14a>
     3ae:	c0 91 56 21 	lds	r28, 0x2156
     3b2:	d0 91 57 21 	lds	r29, 0x2157
     3b6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <udd_get_frame_number>
     3ba:	c8 17       	cp	r28, r24
     3bc:	d9 07       	cpc	r29, r25
     3be:	09 f4       	brne	.+2      	; 0x3c2 <udi_cdc_tx_send+0x42>
     3c0:	84 c0       	rjmp	.+264    	; 0x4ca <udi_cdc_tx_send+0x14a>
     3c2:	df b7       	in	r29, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	c0 91 58 21 	lds	r28, 0x2158
     3ca:	ec 2f       	mov	r30, r28
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e7 5a       	subi	r30, 0xA7	; 167
     3d4:	fe 4d       	sbci	r31, 0xDE	; 222
     3d6:	80 81       	ld	r24, Z
     3d8:	91 81       	ldd	r25, Z+1	; 0x01
     3da:	89 2b       	or	r24, r25
     3dc:	09 f5       	brne	.+66     	; 0x420 <udi_cdc_tx_send+0xa0>
     3de:	80 91 52 21 	lds	r24, 0x2152
     3e2:	90 91 53 21 	lds	r25, 0x2153
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	80 93 52 21 	sts	0x2152, r24
     3ec:	90 93 53 21 	sts	0x2153, r25
     3f0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <udd_is_high_speed>
     3f4:	81 11       	cpse	r24, r1
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <udi_cdc_tx_send+0x86>
     3f8:	80 91 52 21 	lds	r24, 0x2152
     3fc:	90 91 53 21 	lds	r25, 0x2153
     400:	84 36       	cpi	r24, 0x64	; 100
     402:	91 05       	cpc	r25, r1
     404:	58 f0       	brcs	.+22     	; 0x41c <udi_cdc_tx_send+0x9c>
     406:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <udd_is_high_speed>
     40a:	88 23       	and	r24, r24
     40c:	49 f0       	breq	.+18     	; 0x420 <udi_cdc_tx_send+0xa0>
     40e:	80 91 52 21 	lds	r24, 0x2152
     412:	90 91 53 21 	lds	r25, 0x2153
     416:	80 32       	cpi	r24, 0x20	; 32
     418:	93 40       	sbci	r25, 0x03	; 3
     41a:	10 f4       	brcc	.+4      	; 0x420 <udi_cdc_tx_send+0xa0>
     41c:	df bf       	out	0x3f, r29	; 63
     41e:	55 c0       	rjmp	.+170    	; 0x4ca <udi_cdc_tx_send+0x14a>
     420:	10 92 52 21 	sts	0x2152, r1
     424:	10 92 53 21 	sts	0x2153, r1
     428:	80 91 54 21 	lds	r24, 0x2154
     42c:	81 11       	cpse	r24, r1
     42e:	06 c0       	rjmp	.+12     	; 0x43c <udi_cdc_tx_send+0xbc>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	c1 11       	cpse	r28, r1
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	80 93 58 21 	sts	0x2158, r24
     43a:	04 c0       	rjmp	.+8      	; 0x444 <udi_cdc_tx_send+0xc4>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	c1 11       	cpse	r28, r1
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	c8 2f       	mov	r28, r24
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 55 21 	sts	0x2155, r24
     44a:	df bf       	out	0x3f, r29	; 63
     44c:	d0 e0       	ldi	r29, 0x00	; 0
     44e:	fe 01       	movw	r30, r28
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	e7 5a       	subi	r30, 0xA7	; 167
     456:	fe 4d       	sbci	r31, 0xDE	; 222
     458:	ff 24       	eor	r15, r15
     45a:	f3 94       	inc	r15
     45c:	80 81       	ld	r24, Z
     45e:	91 81       	ldd	r25, Z+1	; 0x01
     460:	80 34       	cpi	r24, 0x40	; 64
     462:	91 05       	cpc	r25, r1
     464:	09 f4       	brne	.+2      	; 0x468 <udi_cdc_tx_send+0xe8>
     466:	f1 2c       	mov	r15, r1
     468:	ff 20       	and	r15, r15
     46a:	91 f0       	breq	.+36     	; 0x490 <udi_cdc_tx_send+0x110>
     46c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <udd_is_high_speed>
     470:	88 23       	and	r24, r24
     472:	39 f0       	breq	.+14     	; 0x482 <udi_cdc_tx_send+0x102>
     474:	0e 94 f6 10 	call	0x21ec	; 0x21ec <udd_get_micro_frame_number>
     478:	80 93 56 21 	sts	0x2156, r24
     47c:	90 93 57 21 	sts	0x2157, r25
     480:	0b c0       	rjmp	.+22     	; 0x498 <udi_cdc_tx_send+0x118>
     482:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <udd_get_frame_number>
     486:	80 93 56 21 	sts	0x2156, r24
     48a:	90 93 57 21 	sts	0x2157, r25
     48e:	04 c0       	rjmp	.+8      	; 0x498 <udi_cdc_tx_send+0x118>
     490:	10 92 56 21 	sts	0x2156, r1
     494:	10 92 57 21 	sts	0x2157, r1
     498:	fe 01       	movw	r30, r28
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	e7 5a       	subi	r30, 0xA7	; 167
     4a0:	fe 4d       	sbci	r31, 0xDE	; 222
     4a2:	20 81       	ld	r18, Z
     4a4:	31 81       	ldd	r19, Z+1	; 0x01
     4a6:	ae 01       	movw	r20, r28
     4a8:	00 24       	eor	r0, r0
     4aa:	56 95       	lsr	r21
     4ac:	47 95       	ror	r20
     4ae:	07 94       	ror	r0
     4b0:	56 95       	lsr	r21
     4b2:	47 95       	ror	r20
     4b4:	07 94       	ror	r0
     4b6:	54 2f       	mov	r21, r20
     4b8:	40 2d       	mov	r20, r0
     4ba:	42 5a       	subi	r20, 0xA2	; 162
     4bc:	5e 4d       	sbci	r21, 0xDE	; 222
     4be:	0b e6       	ldi	r16, 0x6B	; 107
     4c0:	12 e0       	ldi	r17, 0x02	; 2
     4c2:	6f 2d       	mov	r22, r15
     4c4:	81 e8       	ldi	r24, 0x81	; 129
     4c6:	0e 94 a8 11 	call	0x2350	; 0x2350 <udd_ep_run>
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	08 95       	ret

000004d6 <udi_cdc_data_sent>:
     4d6:	81 11       	cpse	r24, r1
     4d8:	15 c0       	rjmp	.+42     	; 0x504 <udi_cdc_data_sent+0x2e>
     4da:	20 91 58 21 	lds	r18, 0x2158
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	22 23       	and	r18, r18
     4e4:	11 f0       	breq	.+4      	; 0x4ea <udi_cdc_data_sent+0x14>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e7 5a       	subi	r30, 0xA7	; 167
     4f2:	fe 4d       	sbci	r31, 0xDE	; 222
     4f4:	10 82       	st	Z, r1
     4f6:	11 82       	std	Z+1, r1	; 0x01
     4f8:	10 92 54 21 	sts	0x2154, r1
     4fc:	10 92 55 21 	sts	0x2155, r1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	3e cf       	rjmp	.-388    	; 0x380 <udi_cdc_tx_send>
     504:	08 95       	ret

00000506 <udi_cdc_data_sof_notify>:
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	3b cf       	rjmp	.-394    	; 0x380 <udi_cdc_tx_send>
     50a:	08 95       	ret

0000050c <udi_cdc_multi_get_nb_received_data>:
     50c:	4f b7       	in	r20, 0x3f	; 63
     50e:	f8 94       	cli
     510:	20 91 df 21 	lds	r18, 0x21DF
     514:	30 91 e0 21 	lds	r19, 0x21E0
     518:	e0 91 e1 21 	lds	r30, 0x21E1
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	ee 51       	subi	r30, 0x1E	; 30
     524:	fe 4d       	sbci	r31, 0xDE	; 222
     526:	80 81       	ld	r24, Z
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	82 1b       	sub	r24, r18
     52c:	93 0b       	sbc	r25, r19
     52e:	4f bf       	out	0x3f, r20	; 63
     530:	08 95       	ret

00000532 <udi_cdc_multi_is_rx_ready>:
     532:	ec df       	rcall	.-40     	; 0x50c <udi_cdc_multi_get_nb_received_data>
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	89 2b       	or	r24, r25
     538:	09 f4       	brne	.+2      	; 0x53c <udi_cdc_multi_is_rx_ready+0xa>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	82 2f       	mov	r24, r18
     53e:	08 95       	ret

00000540 <udi_cdc_rx_start>:
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	4f b7       	in	r20, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	50 91 e1 21 	lds	r21, 0x21E1
     550:	80 91 de 21 	lds	r24, 0x21DE
     554:	81 11       	cpse	r24, r1
     556:	10 c0       	rjmp	.+32     	; 0x578 <udi_cdc_rx_start+0x38>
     558:	20 91 df 21 	lds	r18, 0x21DF
     55c:	30 91 e0 21 	lds	r19, 0x21E0
     560:	c5 2f       	mov	r28, r21
     562:	d0 e0       	ldi	r29, 0x00	; 0
     564:	fe 01       	movw	r30, r28
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	ee 51       	subi	r30, 0x1E	; 30
     56c:	fe 4d       	sbci	r31, 0xDE	; 222
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	28 17       	cp	r18, r24
     574:	39 07       	cpc	r19, r25
     576:	18 f4       	brcc	.+6      	; 0x57e <udi_cdc_rx_start+0x3e>
     578:	4f bf       	out	0x3f, r20	; 63
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	23 c0       	rjmp	.+70     	; 0x5c4 <udi_cdc_rx_start+0x84>
     57e:	10 92 df 21 	sts	0x21DF, r1
     582:	10 92 e0 21 	sts	0x21E0, r1
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	51 11       	cpse	r21, r1
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	80 93 e1 21 	sts	0x21E1, r24
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	80 93 de 21 	sts	0x21DE, r24
     596:	4f bf       	out	0x3f, r20	; 63
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	cb df       	rcall	.-106    	; 0x532 <udi_cdc_multi_is_rx_ready>
     59c:	ae 01       	movw	r20, r28
     59e:	00 24       	eor	r0, r0
     5a0:	56 95       	lsr	r21
     5a2:	47 95       	ror	r20
     5a4:	07 94       	ror	r0
     5a6:	56 95       	lsr	r21
     5a8:	47 95       	ror	r20
     5aa:	07 94       	ror	r0
     5ac:	54 2f       	mov	r21, r20
     5ae:	40 2d       	mov	r20, r0
     5b0:	4a 51       	subi	r20, 0x1A	; 26
     5b2:	5e 4d       	sbci	r21, 0xDE	; 222
     5b4:	09 e1       	ldi	r16, 0x19	; 25
     5b6:	13 e0       	ldi	r17, 0x03	; 3
     5b8:	20 e4       	ldi	r18, 0x40	; 64
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 a8 11 	call	0x2350	; 0x2350 <udd_ep_run>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <udi_cdc_data_enable>:
     5ce:	10 92 67 22 	sts	0x2267, r1
     5d2:	10 92 55 21 	sts	0x2155, r1
     5d6:	10 92 54 21 	sts	0x2154, r1
     5da:	10 92 58 21 	sts	0x2158, r1
     5de:	10 92 59 21 	sts	0x2159, r1
     5e2:	10 92 5a 21 	sts	0x215A, r1
     5e6:	10 92 5b 21 	sts	0x215B, r1
     5ea:	10 92 5c 21 	sts	0x215C, r1
     5ee:	10 92 56 21 	sts	0x2156, r1
     5f2:	10 92 57 21 	sts	0x2157, r1
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	c3 de       	rcall	.-634    	; 0x380 <udi_cdc_tx_send>
     5fa:	10 92 de 21 	sts	0x21DE, r1
     5fe:	10 92 e1 21 	sts	0x21E1, r1
     602:	10 92 e2 21 	sts	0x21E2, r1
     606:	10 92 e3 21 	sts	0x21E3, r1
     60a:	10 92 df 21 	sts	0x21DF, r1
     60e:	10 92 e0 21 	sts	0x21E0, r1
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	95 df       	rcall	.-214    	; 0x540 <udi_cdc_rx_start>
     616:	88 23       	and	r24, r24
     618:	59 f0       	breq	.+22     	; 0x630 <udi_cdc_data_enable+0x62>
     61a:	90 91 67 22 	lds	r25, 0x2267
     61e:	9f 5f       	subi	r25, 0xFF	; 255
     620:	90 93 67 22 	sts	0x2267, r25
     624:	90 91 67 22 	lds	r25, 0x2267
     628:	91 30       	cpi	r25, 0x01	; 1
     62a:	11 f4       	brne	.+4      	; 0x630 <udi_cdc_data_enable+0x62>
     62c:	90 93 66 22 	sts	0x2266, r25
     630:	08 95       	ret

00000632 <udi_cdc_data_received>:
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	94 2f       	mov	r25, r20
     638:	81 11       	cpse	r24, r1
     63a:	29 c0       	rjmp	.+82     	; 0x68e <udi_cdc_data_received+0x5c>
     63c:	80 91 e1 21 	lds	r24, 0x21E1
     640:	e1 e0       	ldi	r30, 0x01	; 1
     642:	81 11       	cpse	r24, r1
     644:	e0 e0       	ldi	r30, 0x00	; 0
     646:	61 15       	cp	r22, r1
     648:	71 05       	cpc	r23, r1
     64a:	b1 f4       	brne	.+44     	; 0x678 <udi_cdc_data_received+0x46>
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	00 24       	eor	r0, r0
     650:	f6 95       	lsr	r31
     652:	e7 95       	ror	r30
     654:	07 94       	ror	r0
     656:	f6 95       	lsr	r31
     658:	e7 95       	ror	r30
     65a:	07 94       	ror	r0
     65c:	fe 2f       	mov	r31, r30
     65e:	e0 2d       	mov	r30, r0
     660:	af 01       	movw	r20, r30
     662:	4a 51       	subi	r20, 0x1A	; 26
     664:	5e 4d       	sbci	r21, 0xDE	; 222
     666:	09 e1       	ldi	r16, 0x19	; 25
     668:	13 e0       	ldi	r17, 0x03	; 3
     66a:	20 e4       	ldi	r18, 0x40	; 64
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	89 2f       	mov	r24, r25
     672:	0e 94 a8 11 	call	0x2350	; 0x2350 <udd_ep_run>
     676:	0b c0       	rjmp	.+22     	; 0x68e <udi_cdc_data_received+0x5c>
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	ee 51       	subi	r30, 0x1E	; 30
     680:	fe 4d       	sbci	r31, 0xDE	; 222
     682:	60 83       	st	Z, r22
     684:	71 83       	std	Z+1, r23	; 0x01
     686:	10 92 de 21 	sts	0x21DE, r1
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	59 df       	rcall	.-334    	; 0x540 <udi_cdc_rx_start>
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <udi_cdc_is_rx_ready>:
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	4d cf       	rjmp	.-358    	; 0x532 <udi_cdc_multi_is_rx_ready>
     698:	08 95       	ret

0000069a <udi_cdc_multi_getc>:
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	11 e0       	ldi	r17, 0x01	; 1
     6a2:	80 91 7c 22 	lds	r24, 0x227C
     6a6:	89 30       	cpi	r24, 0x09	; 9
     6a8:	09 f0       	breq	.+2      	; 0x6ac <udi_cdc_multi_getc+0x12>
     6aa:	10 e0       	ldi	r17, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	3f b7       	in	r19, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	80 91 df 21 	lds	r24, 0x21DF
     6b8:	90 91 e0 21 	lds	r25, 0x21E0
     6bc:	20 91 e1 21 	lds	r18, 0x21E1
     6c0:	3f bf       	out	0x3f, r19	; 63
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	ee 51       	subi	r30, 0x1E	; 30
     6cc:	fe 4d       	sbci	r31, 0xDE	; 222
     6ce:	40 81       	ld	r20, Z
     6d0:	51 81       	ldd	r21, Z+1	; 0x01
     6d2:	84 17       	cp	r24, r20
     6d4:	95 07       	cpc	r25, r21
     6d6:	30 f0       	brcs	.+12     	; 0x6e4 <udi_cdc_multi_getc+0x4a>
     6d8:	80 91 66 22 	lds	r24, 0x2266
     6dc:	81 11       	cpse	r24, r1
     6de:	e8 cf       	rjmp	.-48     	; 0x6b0 <udi_cdc_multi_getc+0x16>
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	20 c0       	rjmp	.+64     	; 0x724 <udi_cdc_multi_getc+0x8a>
     6e4:	f9 01       	movw	r30, r18
     6e6:	00 24       	eor	r0, r0
     6e8:	f6 95       	lsr	r31
     6ea:	e7 95       	ror	r30
     6ec:	07 94       	ror	r0
     6ee:	f6 95       	lsr	r31
     6f0:	e7 95       	ror	r30
     6f2:	07 94       	ror	r0
     6f4:	fe 2f       	mov	r31, r30
     6f6:	e0 2d       	mov	r30, r0
     6f8:	e8 0f       	add	r30, r24
     6fa:	f9 1f       	adc	r31, r25
     6fc:	ea 51       	subi	r30, 0x1A	; 26
     6fe:	fe 4d       	sbci	r31, 0xDE	; 222
     700:	20 81       	ld	r18, Z
     702:	eb 01       	movw	r28, r22
     704:	c2 2b       	or	r28, r18
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	80 93 df 21 	sts	0x21DF, r24
     70c:	90 93 e0 21 	sts	0x21E0, r25
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	16 df       	rcall	.-468    	; 0x540 <udi_cdc_rx_start>
     714:	11 23       	and	r17, r17
     716:	21 f0       	breq	.+8      	; 0x720 <udi_cdc_multi_getc+0x86>
     718:	7c 2f       	mov	r23, r28
     71a:	66 27       	eor	r22, r22
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	c8 cf       	rjmp	.-112    	; 0x6b0 <udi_cdc_multi_getc+0x16>
     720:	8c 2f       	mov	r24, r28
     722:	9d 2f       	mov	r25, r29
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	08 95       	ret

0000072c <udi_cdc_getc>:
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	b5 cf       	rjmp	.-150    	; 0x69a <udi_cdc_multi_getc>
     730:	08 95       	ret

00000732 <udi_cdc_multi_get_free_tx_buffer>:
     732:	5f b7       	in	r21, 0x3f	; 63
     734:	f8 94       	cli
     736:	20 91 58 21 	lds	r18, 0x2158
     73a:	e2 2f       	mov	r30, r18
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	e7 5a       	subi	r30, 0xA7	; 167
     744:	fe 4d       	sbci	r31, 0xDE	; 222
     746:	80 81       	ld	r24, Z
     748:	91 81       	ldd	r25, Z+1	; 0x01
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	21 11       	cpse	r18, r1
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	e4 2f       	mov	r30, r20
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	e7 5a       	subi	r30, 0xA7	; 167
     75a:	fe 4d       	sbci	r31, 0xDE	; 222
     75c:	20 81       	ld	r18, Z
     75e:	31 81       	ldd	r19, Z+1	; 0x01
     760:	80 34       	cpi	r24, 0x40	; 64
     762:	91 05       	cpc	r25, r1
     764:	89 f4       	brne	.+34     	; 0x788 <udi_cdc_multi_get_free_tx_buffer+0x56>
     766:	60 91 55 21 	lds	r22, 0x2155
     76a:	61 11       	cpse	r22, r1
     76c:	0d c0       	rjmp	.+26     	; 0x788 <udi_cdc_multi_get_free_tx_buffer+0x56>
     76e:	60 91 54 21 	lds	r22, 0x2154
     772:	61 11       	cpse	r22, r1
     774:	09 c0       	rjmp	.+18     	; 0x788 <udi_cdc_multi_get_free_tx_buffer+0x56>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	80 93 54 21 	sts	0x2154, r24
     77c:	40 93 58 21 	sts	0x2158, r20
     780:	20 e4       	ldi	r18, 0x40	; 64
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	5f bf       	out	0x3f, r21	; 63
     78a:	28 0f       	add	r18, r24
     78c:	39 1f       	adc	r19, r25
     78e:	80 e8       	ldi	r24, 0x80	; 128
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	82 1b       	sub	r24, r18
     794:	93 0b       	sbc	r25, r19
     796:	08 95       	ret

00000798 <udi_cdc_multi_is_tx_ready>:
     798:	cc df       	rcall	.-104    	; 0x732 <udi_cdc_multi_get_free_tx_buffer>
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	89 2b       	or	r24, r25
     79e:	09 f4       	brne	.+2      	; 0x7a2 <udi_cdc_multi_is_tx_ready+0xa>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	82 2f       	mov	r24, r18
     7a4:	08 95       	ret

000007a6 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	16 2f       	mov	r17, r22
     7ae:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     7b0:	d1 e0       	ldi	r29, 0x01	; 1
     7b2:	80 91 7c 22 	lds	r24, 0x227C
     7b6:	89 30       	cpi	r24, 0x09	; 9
     7b8:	09 f0       	breq	.+2      	; 0x7bc <udi_cdc_multi_putc+0x16>
     7ba:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	ec df       	rcall	.-40     	; 0x798 <udi_cdc_multi_is_tx_ready>
     7c0:	81 11       	cpse	r24, r1
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     7c4:	80 91 66 22 	lds	r24, 0x2266
     7c8:	81 11       	cpse	r24, r1
     7ca:	f8 cf       	rjmp	.-16     	; 0x7bc <udi_cdc_multi_putc+0x16>
			return false;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	2b c0       	rjmp	.+86     	; 0x828 <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7d2:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     7d4:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     7d6:	20 91 58 21 	lds	r18, 0x2158
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	e7 5a       	subi	r30, 0xA7	; 167
     7e4:	fe 4d       	sbci	r31, 0xDE	; 222
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
     7ea:	ac 01       	movw	r20, r24
     7ec:	4f 5f       	subi	r20, 0xFF	; 255
     7ee:	5f 4f       	sbci	r21, 0xFF	; 255
     7f0:	40 83       	st	Z, r20
     7f2:	51 83       	std	Z+1, r21	; 0x01
     7f4:	f9 01       	movw	r30, r18
     7f6:	00 24       	eor	r0, r0
     7f8:	f6 95       	lsr	r31
     7fa:	e7 95       	ror	r30
     7fc:	07 94       	ror	r0
     7fe:	f6 95       	lsr	r31
     800:	e7 95       	ror	r30
     802:	07 94       	ror	r0
     804:	fe 2f       	mov	r31, r30
     806:	e0 2d       	mov	r30, r0
     808:	8e 0f       	add	r24, r30
     80a:	9f 1f       	adc	r25, r31
     80c:	fc 01       	movw	r30, r24
     80e:	e2 5a       	subi	r30, 0xA2	; 162
     810:	fe 4d       	sbci	r31, 0xDE	; 222
     812:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     814:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     816:	dd 23       	and	r29, r29
     818:	29 f0       	breq	.+10     	; 0x824 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     81a:	1c 2f       	mov	r17, r28
     81c:	cc 0f       	add	r28, r28
     81e:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     820:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     822:	cc cf       	rjmp	.-104    	; 0x7bc <udi_cdc_multi_putc+0x16>
	}
	return true;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	08 95       	ret

00000830 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     830:	bc 01       	movw	r22, r24
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	b8 cf       	rjmp	.-144    	; 0x7a6 <udi_cdc_multi_putc>
}
     836:	08 95       	ret

00000838 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     838:	e0 91 82 22 	lds	r30, 0x2282
     83c:	f0 91 83 22 	lds	r31, 0x2283
     840:	01 90       	ld	r0, Z+
     842:	f0 81       	ld	r31, Z
     844:	e0 2d       	mov	r30, r0
     846:	22 81       	ldd	r18, Z+2	; 0x02
     848:	33 81       	ldd	r19, Z+3	; 0x03
     84a:	2e 0f       	add	r18, r30
     84c:	3f 1f       	adc	r19, r31
     84e:	fc 01       	movw	r30, r24
     850:	40 81       	ld	r20, Z
     852:	e4 0f       	add	r30, r20
     854:	f1 1d       	adc	r31, r1
     856:	e2 17       	cp	r30, r18
     858:	f3 07       	cpc	r31, r19
     85a:	a0 f4       	brcc	.+40     	; 0x884 <udc_next_desc_in_iface+0x4c>
     85c:	81 81       	ldd	r24, Z+1	; 0x01
     85e:	84 30       	cpi	r24, 0x04	; 4
     860:	a1 f0       	breq	.+40     	; 0x88a <udc_next_desc_in_iface+0x52>
     862:	86 13       	cpse	r24, r22
     864:	06 c0       	rjmp	.+12     	; 0x872 <udc_next_desc_in_iface+0x3a>
     866:	14 c0       	rjmp	.+40     	; 0x890 <udc_next_desc_in_iface+0x58>
     868:	81 81       	ldd	r24, Z+1	; 0x01
     86a:	84 30       	cpi	r24, 0x04	; 4
     86c:	a1 f0       	breq	.+40     	; 0x896 <udc_next_desc_in_iface+0x5e>
     86e:	86 17       	cp	r24, r22
     870:	a9 f0       	breq	.+42     	; 0x89c <udc_next_desc_in_iface+0x64>
     872:	80 81       	ld	r24, Z
     874:	e8 0f       	add	r30, r24
     876:	f1 1d       	adc	r31, r1
     878:	e2 17       	cp	r30, r18
     87a:	f3 07       	cpc	r31, r19
     87c:	a8 f3       	brcs	.-22     	; 0x868 <udc_next_desc_in_iface+0x30>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	08 95       	ret
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	08 95       	ret
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	08 95       	ret
     890:	8e 2f       	mov	r24, r30
     892:	9f 2f       	mov	r25, r31
     894:	08 95       	ret
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	08 95       	ret
     89c:	8e 2f       	mov	r24, r30
     89e:	9f 2f       	mov	r25, r31
     8a0:	08 95       	ret

000008a2 <udc_valid_address>:
     8a2:	80 91 0b 24 	lds	r24, 0x240B
     8a6:	8f 77       	andi	r24, 0x7F	; 127
     8a8:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <udd_set_address>
     8ac:	08 95       	ret

000008ae <udc_update_iface_desc>:
     8ae:	90 91 84 22 	lds	r25, 0x2284
     8b2:	99 23       	and	r25, r25
     8b4:	81 f1       	breq	.+96     	; 0x916 <udc_update_iface_desc+0x68>
     8b6:	e0 91 82 22 	lds	r30, 0x2282
     8ba:	f0 91 83 22 	lds	r31, 0x2283
     8be:	01 90       	ld	r0, Z+
     8c0:	f0 81       	ld	r31, Z
     8c2:	e0 2d       	mov	r30, r0
     8c4:	94 81       	ldd	r25, Z+4	; 0x04
     8c6:	89 17       	cp	r24, r25
     8c8:	40 f5       	brcc	.+80     	; 0x91a <udc_update_iface_desc+0x6c>
     8ca:	e0 93 80 22 	sts	0x2280, r30
     8ce:	f0 93 81 22 	sts	0x2281, r31
     8d2:	22 81       	ldd	r18, Z+2	; 0x02
     8d4:	33 81       	ldd	r19, Z+3	; 0x03
     8d6:	2e 0f       	add	r18, r30
     8d8:	3f 1f       	adc	r19, r31
     8da:	e2 17       	cp	r30, r18
     8dc:	f3 07       	cpc	r31, r19
     8de:	f8 f4       	brcc	.+62     	; 0x91e <udc_update_iface_desc+0x70>
     8e0:	91 81       	ldd	r25, Z+1	; 0x01
     8e2:	94 30       	cpi	r25, 0x04	; 4
     8e4:	61 f4       	brne	.+24     	; 0x8fe <udc_update_iface_desc+0x50>
     8e6:	92 81       	ldd	r25, Z+2	; 0x02
     8e8:	98 13       	cpse	r25, r24
     8ea:	09 c0       	rjmp	.+18     	; 0x8fe <udc_update_iface_desc+0x50>
     8ec:	93 81       	ldd	r25, Z+3	; 0x03
     8ee:	96 13       	cpse	r25, r22
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <udc_update_iface_desc+0x50>
     8f2:	e0 93 80 22 	sts	0x2280, r30
     8f6:	f0 93 81 22 	sts	0x2281, r31
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	08 95       	ret
     8fe:	90 81       	ld	r25, Z
     900:	e9 0f       	add	r30, r25
     902:	f1 1d       	adc	r31, r1
     904:	e2 17       	cp	r30, r18
     906:	f3 07       	cpc	r31, r19
     908:	58 f3       	brcs	.-42     	; 0x8e0 <udc_update_iface_desc+0x32>
     90a:	e0 93 80 22 	sts	0x2280, r30
     90e:	f0 93 81 22 	sts	0x2281, r31
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	08 95       	ret
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	08 95       	ret
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	08 95       	ret
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	08 95       	ret

00000922 <udc_iface_disable>:
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	c8 2f       	mov	r28, r24
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	be df       	rcall	.-132    	; 0x8ae <udc_update_iface_desc>
     932:	f8 2e       	mov	r15, r24
     934:	88 23       	and	r24, r24
     936:	81 f1       	breq	.+96     	; 0x998 <udc_iface_disable+0x76>
     938:	a0 91 82 22 	lds	r26, 0x2282
     93c:	b0 91 83 22 	lds	r27, 0x2283
     940:	ec 2f       	mov	r30, r28
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	12 96       	adiw	r26, 0x02	; 2
     94a:	2d 91       	ld	r18, X+
     94c:	3c 91       	ld	r19, X
     94e:	13 97       	sbiw	r26, 0x03	; 3
     950:	e2 0f       	add	r30, r18
     952:	f3 1f       	adc	r31, r19
     954:	00 81       	ld	r16, Z
     956:	11 81       	ldd	r17, Z+1	; 0x01
     958:	d8 01       	movw	r26, r16
     95a:	16 96       	adiw	r26, 0x06	; 6
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	17 97       	sbiw	r26, 0x07	; 7
     962:	09 95       	icall
     964:	68 2f       	mov	r22, r24
     966:	8c 2f       	mov	r24, r28
     968:	a2 df       	rcall	.-188    	; 0x8ae <udc_update_iface_desc>
     96a:	f8 2e       	mov	r15, r24
     96c:	88 23       	and	r24, r24
     96e:	a1 f0       	breq	.+40     	; 0x998 <udc_iface_disable+0x76>
     970:	c0 91 80 22 	lds	r28, 0x2280
     974:	d0 91 81 22 	lds	r29, 0x2281
     978:	65 e0       	ldi	r22, 0x05	; 5
     97a:	ce 01       	movw	r24, r28
     97c:	5d df       	rcall	.-326    	; 0x838 <udc_next_desc_in_iface>
     97e:	ec 01       	movw	r28, r24
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	21 f0       	breq	.+8      	; 0x98c <udc_iface_disable+0x6a>
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	0e 94 69 12 	call	0x24d2	; 0x24d2 <udd_ep_free>
     98a:	f6 cf       	rjmp	.-20     	; 0x978 <udc_iface_disable+0x56>
     98c:	d8 01       	movw	r26, r16
     98e:	12 96       	adiw	r26, 0x02	; 2
     990:	ed 91       	ld	r30, X+
     992:	fc 91       	ld	r31, X
     994:	13 97       	sbiw	r26, 0x03	; 3
     996:	09 95       	icall
     998:	8f 2d       	mov	r24, r15
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	08 95       	ret

000009a6 <udc_iface_enable>:
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	18 2f       	mov	r17, r24
     9ae:	7f df       	rcall	.-258    	; 0x8ae <udc_update_iface_desc>
     9b0:	88 23       	and	r24, r24
     9b2:	41 f1       	breq	.+80     	; 0xa04 <udc_iface_enable+0x5e>
     9b4:	c0 91 80 22 	lds	r28, 0x2280
     9b8:	d0 91 81 22 	lds	r29, 0x2281
     9bc:	65 e0       	ldi	r22, 0x05	; 5
     9be:	ce 01       	movw	r24, r28
     9c0:	3b df       	rcall	.-394    	; 0x838 <udc_next_desc_in_iface>
     9c2:	ec 01       	movw	r28, r24
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	49 f0       	breq	.+18     	; 0x9da <udc_iface_enable+0x34>
     9c8:	4c 81       	ldd	r20, Y+4	; 0x04
     9ca:	5d 81       	ldd	r21, Y+5	; 0x05
     9cc:	6b 81       	ldd	r22, Y+3	; 0x03
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	0e 94 02 11 	call	0x2204	; 0x2204 <udd_ep_alloc>
     9d4:	81 11       	cpse	r24, r1
     9d6:	f2 cf       	rjmp	.-28     	; 0x9bc <udc_iface_enable+0x16>
     9d8:	15 c0       	rjmp	.+42     	; 0xa04 <udc_iface_enable+0x5e>
     9da:	a0 91 82 22 	lds	r26, 0x2282
     9de:	b0 91 83 22 	lds	r27, 0x2283
     9e2:	81 2f       	mov	r24, r17
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	12 96       	adiw	r26, 0x02	; 2
     9ec:	ed 91       	ld	r30, X+
     9ee:	fc 91       	ld	r31, X
     9f0:	13 97       	sbiw	r26, 0x03	; 3
     9f2:	e8 0f       	add	r30, r24
     9f4:	f9 1f       	adc	r31, r25
     9f6:	01 90       	ld	r0, Z+
     9f8:	f0 81       	ld	r31, Z
     9fa:	e0 2d       	mov	r30, r0
     9fc:	01 90       	ld	r0, Z+
     9fe:	f0 81       	ld	r31, Z
     a00:	e0 2d       	mov	r30, r0
     a02:	09 95       	icall
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	08 95       	ret

00000a0c <udc_start>:
     a0c:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <udd_enable>
     a10:	08 95       	ret

00000a12 <udc_reset>:
     a12:	cf 93       	push	r28
     a14:	80 91 84 22 	lds	r24, 0x2284
     a18:	88 23       	and	r24, r24
     a1a:	c1 f0       	breq	.+48     	; 0xa4c <udc_reset+0x3a>
     a1c:	e0 91 82 22 	lds	r30, 0x2282
     a20:	f0 91 83 22 	lds	r31, 0x2283
     a24:	01 90       	ld	r0, Z+
     a26:	f0 81       	ld	r31, Z
     a28:	e0 2d       	mov	r30, r0
     a2a:	84 81       	ldd	r24, Z+4	; 0x04
     a2c:	88 23       	and	r24, r24
     a2e:	71 f0       	breq	.+28     	; 0xa4c <udc_reset+0x3a>
     a30:	c0 e0       	ldi	r28, 0x00	; 0
     a32:	8c 2f       	mov	r24, r28
     a34:	76 df       	rcall	.-276    	; 0x922 <udc_iface_disable>
     a36:	cf 5f       	subi	r28, 0xFF	; 255
     a38:	e0 91 82 22 	lds	r30, 0x2282
     a3c:	f0 91 83 22 	lds	r31, 0x2283
     a40:	01 90       	ld	r0, Z+
     a42:	f0 81       	ld	r31, Z
     a44:	e0 2d       	mov	r30, r0
     a46:	84 81       	ldd	r24, Z+4	; 0x04
     a48:	c8 17       	cp	r28, r24
     a4a:	98 f3       	brcs	.-26     	; 0xa32 <udc_reset+0x20>
     a4c:	10 92 84 22 	sts	0x2284, r1
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	80 93 85 22 	sts	0x2285, r24
     a58:	90 93 86 22 	sts	0x2286, r25
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     a60:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     a62:	80 91 84 22 	lds	r24, 0x2284
     a66:	88 23       	and	r24, r24
     a68:	41 f1       	breq	.+80     	; 0xaba <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a6a:	e0 91 82 22 	lds	r30, 0x2282
     a6e:	f0 91 83 22 	lds	r31, 0x2283
     a72:	a0 81       	ld	r26, Z
     a74:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	8c 91       	ld	r24, X
     a7a:	88 23       	and	r24, r24
     a7c:	f1 f0       	breq	.+60     	; 0xaba <udc_sof_notify+0x5a>
     a7e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     a80:	8c 2f       	mov	r24, r28
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	02 80       	ldd	r0, Z+2	; 0x02
     a8a:	f3 81       	ldd	r31, Z+3	; 0x03
     a8c:	e0 2d       	mov	r30, r0
     a8e:	e8 0f       	add	r30, r24
     a90:	f9 1f       	adc	r31, r25
     a92:	01 90       	ld	r0, Z+
     a94:	f0 81       	ld	r31, Z
     a96:	e0 2d       	mov	r30, r0
     a98:	00 84       	ldd	r0, Z+8	; 0x08
     a9a:	f1 85       	ldd	r31, Z+9	; 0x09
     a9c:	e0 2d       	mov	r30, r0
     a9e:	30 97       	sbiw	r30, 0x00	; 0
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     aa2:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     aa4:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     aa6:	e0 91 82 22 	lds	r30, 0x2282
     aaa:	f0 91 83 22 	lds	r31, 0x2283
     aae:	a0 81       	ld	r26, Z
     ab0:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ab2:	14 96       	adiw	r26, 0x04	; 4
     ab4:	8c 91       	ld	r24, X
     ab6:	c8 17       	cp	r28, r24
     ab8:	18 f3       	brcs	.-58     	; 0xa80 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     aca:	10 92 13 24 	sts	0x2413, r1
     ace:	10 92 14 24 	sts	0x2414, r1
	udd_g_ctrlreq.callback = NULL;
     ad2:	10 92 15 24 	sts	0x2415, r1
     ad6:	10 92 16 24 	sts	0x2416, r1
	udd_g_ctrlreq.over_under_run = NULL;
     ada:	10 92 17 24 	sts	0x2417, r1
     ade:	10 92 18 24 	sts	0x2418, r1

	if (Udd_setup_is_in()) {
     ae2:	20 91 09 24 	lds	r18, 0x2409
     ae6:	22 23       	and	r18, r18
     ae8:	0c f0       	brlt	.+2      	; 0xaec <udc_process_setup+0x2e>
     aea:	72 c2       	rjmp	.+1252   	; 0xfd0 <udc_process_setup+0x512>
		if (udd_g_ctrlreq.req.wLength == 0) {
     aec:	80 91 0f 24 	lds	r24, 0x240F
     af0:	90 91 10 24 	lds	r25, 0x2410
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	09 f0       	breq	.+2      	; 0xafa <udc_process_setup+0x3c>
     af8:	70 c2       	rjmp	.+1248   	; 0xfda <udc_process_setup+0x51c>
     afa:	66 c2       	rjmp	.+1228   	; 0xfc8 <udc_process_setup+0x50a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     afc:	2f 71       	andi	r18, 0x1F	; 31
     afe:	09 f0       	breq	.+2      	; 0xb02 <udc_process_setup+0x44>
     b00:	91 c0       	rjmp	.+290    	; 0xc24 <udc_process_setup+0x166>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b02:	30 91 0a 24 	lds	r19, 0x240A
     b06:	36 30       	cpi	r19, 0x06	; 6
     b08:	89 f0       	breq	.+34     	; 0xb2c <udc_process_setup+0x6e>
     b0a:	38 30       	cpi	r19, 0x08	; 8
     b0c:	09 f4       	brne	.+2      	; 0xb10 <udc_process_setup+0x52>
     b0e:	7e c0       	rjmp	.+252    	; 0xc0c <udc_process_setup+0x14e>
     b10:	31 11       	cpse	r19, r1
     b12:	88 c0       	rjmp	.+272    	; 0xc24 <udc_process_setup+0x166>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     b14:	02 97       	sbiw	r24, 0x02	; 2
     b16:	41 f4       	brne	.+16     	; 0xb28 <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	85 e8       	ldi	r24, 0x85	; 133
     b1e:	92 e2       	ldi	r25, 0x22	; 34
     b20:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     b24:	01 e0       	ldi	r16, 0x01	; 1
     b26:	d3 c1       	rjmp	.+934    	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     b28:	00 e0       	ldi	r16, 0x00	; 0
     b2a:	d1 c1       	rjmp	.+930    	; 0xece <udc_process_setup+0x410>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     b2c:	20 91 0b 24 	lds	r18, 0x240B
     b30:	30 91 0c 24 	lds	r19, 0x240C

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     b34:	83 2f       	mov	r24, r19
     b36:	99 27       	eor	r25, r25
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	91 05       	cpc	r25, r1
     b3c:	a1 f0       	breq	.+40     	; 0xb66 <udc_process_setup+0xa8>
     b3e:	1c f4       	brge	.+6      	; 0xb46 <udc_process_setup+0x88>
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	39 f0       	breq	.+14     	; 0xb52 <udc_process_setup+0x94>
     b44:	59 c0       	rjmp	.+178    	; 0xbf8 <udc_process_setup+0x13a>
     b46:	83 30       	cpi	r24, 0x03	; 3
     b48:	91 05       	cpc	r25, r1
     b4a:	e9 f1       	breq	.+122    	; 0xbc6 <udc_process_setup+0x108>
     b4c:	0f 97       	sbiw	r24, 0x0f	; 15
     b4e:	69 f1       	breq	.+90     	; 0xbaa <udc_process_setup+0xec>
     b50:	53 c0       	rjmp	.+166    	; 0xbf8 <udc_process_setup+0x13a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     b52:	80 91 18 20 	lds	r24, 0x2018
     b56:	90 91 19 20 	lds	r25, 0x2019
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     b5a:	dc 01       	movw	r26, r24
     b5c:	6c 91       	ld	r22, X
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <udd_set_setup_payload>
     b64:	38 c0       	rjmp	.+112    	; 0xbd6 <udc_process_setup+0x118>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     b66:	e0 91 18 20 	lds	r30, 0x2018
     b6a:	f0 91 19 20 	lds	r31, 0x2019
     b6e:	81 89       	ldd	r24, Z+17	; 0x11
     b70:	28 17       	cp	r18, r24
     b72:	08 f0       	brcs	.+2      	; 0xb76 <udc_process_setup+0xb8>
     b74:	43 c0       	rjmp	.+134    	; 0xbfc <udc_process_setup+0x13e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     b76:	c9 01       	movw	r24, r18
     b78:	99 27       	eor	r25, r25
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	e0 91 1a 20 	lds	r30, 0x201A
     b86:	f0 91 1b 20 	lds	r31, 0x201B
     b8a:	e8 0f       	add	r30, r24
     b8c:	f9 1f       	adc	r31, r25
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     b92:	fc 01       	movw	r30, r24
     b94:	62 81       	ldd	r22, Z+2	; 0x02
     b96:	73 81       	ldd	r23, Z+3	; 0x03
     b98:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     b9c:	e0 91 11 24 	lds	r30, 0x2411
     ba0:	f0 91 12 24 	lds	r31, 0x2412
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	81 83       	std	Z+1, r24	; 0x01
     ba8:	16 c0       	rjmp	.+44     	; 0xbd6 <udc_process_setup+0x118>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     baa:	80 91 1c 20 	lds	r24, 0x201C
     bae:	90 91 1d 20 	lds	r25, 0x201D
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	29 f1       	breq	.+74     	; 0xc00 <udc_process_setup+0x142>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     bb6:	dc 01       	movw	r26, r24
     bb8:	12 96       	adiw	r26, 0x02	; 2
     bba:	6d 91       	ld	r22, X+
     bbc:	7c 91       	ld	r23, X
     bbe:	13 97       	sbiw	r26, 0x03	; 3
     bc0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <udd_set_setup_payload>
     bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <udc_process_setup+0x118>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     bc6:	21 11       	cpse	r18, r1
     bc8:	1d c0       	rjmp	.+58     	; 0xc04 <udc_process_setup+0x146>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     bca:	64 e0       	ldi	r22, 0x04	; 4
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	90 e2       	ldi	r25, 0x20	; 32
     bd2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     bd6:	80 91 0f 24 	lds	r24, 0x240F
     bda:	90 91 10 24 	lds	r25, 0x2410
     bde:	20 91 13 24 	lds	r18, 0x2413
     be2:	30 91 14 24 	lds	r19, 0x2414
     be6:	82 17       	cp	r24, r18
     be8:	93 07       	cpc	r25, r19
     bea:	70 f4       	brcc	.+28     	; 0xc08 <udc_process_setup+0x14a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     bec:	80 93 13 24 	sts	0x2413, r24
     bf0:	90 93 14 24 	sts	0x2414, r25
	}
	return true;
     bf4:	01 e0       	ldi	r16, 0x01	; 1
     bf6:	6b c1       	rjmp	.+726    	; 0xece <udc_process_setup+0x410>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     bf8:	00 e0       	ldi	r16, 0x00	; 0
     bfa:	69 c1       	rjmp	.+722    	; 0xece <udc_process_setup+0x410>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	67 c1       	rjmp	.+718    	; 0xece <udc_process_setup+0x410>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     c00:	00 e0       	ldi	r16, 0x00	; 0
     c02:	65 c1       	rjmp	.+714    	; 0xece <udc_process_setup+0x410>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	63 c1       	rjmp	.+710    	; 0xece <udc_process_setup+0x410>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     c08:	01 e0       	ldi	r16, 0x01	; 1
     c0a:	61 c1       	rjmp	.+706    	; 0xece <udc_process_setup+0x410>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	41 f4       	brne	.+16     	; 0xc20 <udc_process_setup+0x162>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	84 e8       	ldi	r24, 0x84	; 132
     c16:	92 e2       	ldi	r25, 0x22	; 34
     c18:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <udd_set_setup_payload>
	return true;
     c1c:	01 e0       	ldi	r16, 0x01	; 1
     c1e:	57 c1       	rjmp	.+686    	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     c20:	00 e0       	ldi	r16, 0x00	; 0
     c22:	55 c1       	rjmp	.+682    	; 0xece <udc_process_setup+0x410>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c24:	21 30       	cpi	r18, 0x01	; 1
     c26:	09 f0       	breq	.+2      	; 0xc2a <udc_process_setup+0x16c>
     c28:	40 c0       	rjmp	.+128    	; 0xcaa <udc_process_setup+0x1ec>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c2a:	30 91 0a 24 	lds	r19, 0x240A
     c2e:	3a 30       	cpi	r19, 0x0A	; 10
     c30:	e1 f5       	brne	.+120    	; 0xcaa <udc_process_setup+0x1ec>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	a1 f5       	brne	.+104    	; 0xc9e <udc_process_setup+0x1e0>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     c36:	80 91 84 22 	lds	r24, 0x2284
     c3a:	88 23       	and	r24, r24
     c3c:	91 f1       	breq	.+100    	; 0xca2 <udc_process_setup+0x1e4>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     c3e:	c0 91 0d 24 	lds	r28, 0x240D
     c42:	d0 91 0e 24 	lds	r29, 0x240E
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     c46:	e0 90 82 22 	lds	r14, 0x2282
     c4a:	f0 90 83 22 	lds	r15, 0x2283
     c4e:	d7 01       	movw	r26, r14
     c50:	ed 91       	ld	r30, X+
     c52:	fc 91       	ld	r31, X
     c54:	84 81       	ldd	r24, Z+4	; 0x04
     c56:	c8 17       	cp	r28, r24
     c58:	30 f5       	brcc	.+76     	; 0xca6 <udc_process_setup+0x1e8>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	8c 2f       	mov	r24, r28
     c5e:	27 de       	rcall	.-946    	; 0x8ae <udc_update_iface_desc>
     c60:	08 2f       	mov	r16, r24
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <udc_process_setup+0x1aa>
     c66:	33 c1       	rjmp	.+614    	; 0xece <udc_process_setup+0x410>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     c68:	ce 01       	movw	r24, r28
     c6a:	99 27       	eor	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	d7 01       	movw	r26, r14
     c72:	12 96       	adiw	r26, 0x02	; 2
     c74:	ed 91       	ld	r30, X+
     c76:	fc 91       	ld	r31, X
     c78:	13 97       	sbiw	r26, 0x03	; 3
     c7a:	e8 0f       	add	r30, r24
     c7c:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     c7e:	01 90       	ld	r0, Z+
     c80:	f0 81       	ld	r31, Z
     c82:	e0 2d       	mov	r30, r0
     c84:	06 80       	ldd	r0, Z+6	; 0x06
     c86:	f7 81       	ldd	r31, Z+7	; 0x07
     c88:	e0 2d       	mov	r30, r0
     c8a:	09 95       	icall
     c8c:	80 93 7f 22 	sts	0x227F, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	8f e7       	ldi	r24, 0x7F	; 127
     c96:	92 e2       	ldi	r25, 0x22	; 34
     c98:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <udd_set_setup_payload>
     c9c:	18 c1       	rjmp	.+560    	; 0xece <udc_process_setup+0x410>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	16 c1       	rjmp	.+556    	; 0xece <udc_process_setup+0x410>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	14 c1       	rjmp	.+552    	; 0xece <udc_process_setup+0x410>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     ca6:	00 e0       	ldi	r16, 0x00	; 0
     ca8:	12 c1       	rjmp	.+548    	; 0xece <udc_process_setup+0x410>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     caa:	22 30       	cpi	r18, 0x02	; 2
     cac:	09 f0       	breq	.+2      	; 0xcb0 <udc_process_setup+0x1f2>
     cae:	11 c1       	rjmp	.+546    	; 0xed2 <udc_process_setup+0x414>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     cb0:	20 91 0a 24 	lds	r18, 0x240A
     cb4:	21 11       	cpse	r18, r1
     cb6:	06 c1       	rjmp	.+524    	; 0xec4 <udc_process_setup+0x406>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     cb8:	02 97       	sbiw	r24, 0x02	; 2
     cba:	89 f4       	brne	.+34     	; 0xcde <udc_process_setup+0x220>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     cbc:	80 91 0d 24 	lds	r24, 0x240D
     cc0:	0e 94 63 11 	call	0x22c6	; 0x22c6 <udd_ep_is_halted>
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	80 93 7d 22 	sts	0x227D, r24
     cca:	90 93 7e 22 	sts	0x227E, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     cce:	62 e0       	ldi	r22, 0x02	; 2
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	8d e7       	ldi	r24, 0x7D	; 125
     cd4:	92 e2       	ldi	r25, 0x22	; 34
     cd6:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     cda:	01 e0       	ldi	r16, 0x01	; 1
     cdc:	f8 c0       	rjmp	.+496    	; 0xece <udc_process_setup+0x410>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     cde:	00 e0       	ldi	r16, 0x00	; 0
     ce0:	f6 c0       	rjmp	.+492    	; 0xece <udc_process_setup+0x410>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     ce2:	2f 71       	andi	r18, 0x1F	; 31
     ce4:	09 f0       	breq	.+2      	; 0xce8 <udc_process_setup+0x22a>
     ce6:	91 c0       	rjmp	.+290    	; 0xe0a <udc_process_setup+0x34c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     ce8:	80 91 0a 24 	lds	r24, 0x240A
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	09 f4       	brne	.+2      	; 0xcf2 <udc_process_setup+0x234>
     cf0:	eb c0       	rjmp	.+470    	; 0xec8 <udc_process_setup+0x40a>
     cf2:	18 f4       	brcc	.+6      	; 0xcfa <udc_process_setup+0x23c>
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	b1 f0       	breq	.+44     	; 0xd24 <udc_process_setup+0x266>
     cf8:	88 c0       	rjmp	.+272    	; 0xe0a <udc_process_setup+0x34c>
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	19 f0       	breq	.+6      	; 0xd04 <udc_process_setup+0x246>
     cfe:	89 30       	cpi	r24, 0x09	; 9
     d00:	61 f1       	breq	.+88     	; 0xd5a <udc_process_setup+0x29c>
     d02:	83 c0       	rjmp	.+262    	; 0xe0a <udc_process_setup+0x34c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d04:	80 91 0f 24 	lds	r24, 0x240F
     d08:	90 91 10 24 	lds	r25, 0x2410
     d0c:	89 2b       	or	r24, r25
     d0e:	41 f4       	brne	.+16     	; 0xd20 <udc_process_setup+0x262>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     d10:	81 e5       	ldi	r24, 0x51	; 81
     d12:	94 e0       	ldi	r25, 0x04	; 4
     d14:	80 93 15 24 	sts	0x2415, r24
     d18:	90 93 16 24 	sts	0x2416, r25
	return true;
     d1c:	01 e0       	ldi	r16, 0x01	; 1
     d1e:	d7 c0       	rjmp	.+430    	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d20:	00 e0       	ldi	r16, 0x00	; 0
     d22:	d5 c0       	rjmp	.+426    	; 0xece <udc_process_setup+0x410>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d24:	80 91 0f 24 	lds	r24, 0x240F
     d28:	90 91 10 24 	lds	r25, 0x2410
     d2c:	89 2b       	or	r24, r25
     d2e:	89 f4       	brne	.+34     	; 0xd52 <udc_process_setup+0x294>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     d30:	80 91 0b 24 	lds	r24, 0x240B
     d34:	90 91 0c 24 	lds	r25, 0x240C
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	69 f4       	brne	.+26     	; 0xd56 <udc_process_setup+0x298>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     d3c:	80 91 85 22 	lds	r24, 0x2285
     d40:	90 91 86 22 	lds	r25, 0x2286
     d44:	8d 7f       	andi	r24, 0xFD	; 253
     d46:	80 93 85 22 	sts	0x2285, r24
     d4a:	90 93 86 22 	sts	0x2286, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     d4e:	01 e0       	ldi	r16, 0x01	; 1
     d50:	be c0       	rjmp	.+380    	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d52:	00 e0       	ldi	r16, 0x00	; 0
     d54:	bc c0       	rjmp	.+376    	; 0xece <udc_process_setup+0x410>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     d56:	00 e0       	ldi	r16, 0x00	; 0
     d58:	ba c0       	rjmp	.+372    	; 0xece <udc_process_setup+0x410>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     d5a:	80 91 0f 24 	lds	r24, 0x240F
     d5e:	90 91 10 24 	lds	r25, 0x2410
     d62:	89 2b       	or	r24, r25
     d64:	09 f0       	breq	.+2      	; 0xd68 <udc_process_setup+0x2aa>
     d66:	47 c0       	rjmp	.+142    	; 0xdf6 <udc_process_setup+0x338>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     d68:	0e 94 ee 10 	call	0x21dc	; 0x21dc <udd_getaddress>
     d6c:	88 23       	and	r24, r24
     d6e:	09 f4       	brne	.+2      	; 0xd72 <udc_process_setup+0x2b4>
     d70:	44 c0       	rjmp	.+136    	; 0xdfa <udc_process_setup+0x33c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     d72:	20 91 0b 24 	lds	r18, 0x240B
     d76:	30 91 0c 24 	lds	r19, 0x240C
     d7a:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     d7c:	e0 91 18 20 	lds	r30, 0x2018
     d80:	f0 91 19 20 	lds	r31, 0x2019
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     d84:	81 89       	ldd	r24, Z+17	; 0x11
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	82 17       	cp	r24, r18
     d8a:	93 07       	cpc	r25, r19
     d8c:	c0 f1       	brcs	.+112    	; 0xdfe <udc_process_setup+0x340>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     d8e:	41 de       	rcall	.-894    	; 0xa12 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     d90:	80 91 0b 24 	lds	r24, 0x240B
     d94:	90 91 0c 24 	lds	r25, 0x240C
     d98:	80 93 84 22 	sts	0x2284, r24
	if (udc_num_configuration == 0) {
     d9c:	88 23       	and	r24, r24
     d9e:	89 f1       	breq	.+98     	; 0xe02 <udc_process_setup+0x344>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     da0:	99 27       	eor	r25, r25
     da2:	81 50       	subi	r24, 0x01	; 1
     da4:	90 4c       	sbci	r25, 0xC0	; 192
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	e0 91 1a 20 	lds	r30, 0x201A
     db2:	f0 91 1b 20 	lds	r31, 0x201B
     db6:	e8 0f       	add	r30, r24
     db8:	f9 1f       	adc	r31, r25
     dba:	e0 93 82 22 	sts	0x2282, r30
     dbe:	f0 93 83 22 	sts	0x2283, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     dc2:	01 90       	ld	r0, Z+
     dc4:	f0 81       	ld	r31, Z
     dc6:	e0 2d       	mov	r30, r0
     dc8:	84 81       	ldd	r24, Z+4	; 0x04
     dca:	88 23       	and	r24, r24
     dcc:	e1 f0       	breq	.+56     	; 0xe06 <udc_process_setup+0x348>
     dce:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	8c 2f       	mov	r24, r28
     dd4:	e8 dd       	rcall	.-1072   	; 0x9a6 <udc_iface_enable>
     dd6:	08 2f       	mov	r16, r24
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <udc_process_setup+0x320>
     ddc:	78 c0       	rjmp	.+240    	; 0xece <udc_process_setup+0x410>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     dde:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     de0:	e0 91 82 22 	lds	r30, 0x2282
     de4:	f0 91 83 22 	lds	r31, 0x2283
     de8:	01 90       	ld	r0, Z+
     dea:	f0 81       	ld	r31, Z
     dec:	e0 2d       	mov	r30, r0
     dee:	84 81       	ldd	r24, Z+4	; 0x04
     df0:	c8 17       	cp	r28, r24
     df2:	70 f3       	brcs	.-36     	; 0xdd0 <udc_process_setup+0x312>
     df4:	6c c0       	rjmp	.+216    	; 0xece <udc_process_setup+0x410>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     df6:	00 e0       	ldi	r16, 0x00	; 0
     df8:	6a c0       	rjmp	.+212    	; 0xece <udc_process_setup+0x410>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     dfa:	00 e0       	ldi	r16, 0x00	; 0
     dfc:	68 c0       	rjmp	.+208    	; 0xece <udc_process_setup+0x410>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     dfe:	00 e0       	ldi	r16, 0x00	; 0
     e00:	66 c0       	rjmp	.+204    	; 0xece <udc_process_setup+0x410>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     e02:	01 e0       	ldi	r16, 0x01	; 1
     e04:	64 c0       	rjmp	.+200    	; 0xece <udc_process_setup+0x410>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     e06:	01 e0       	ldi	r16, 0x01	; 1
     e08:	62 c0       	rjmp	.+196    	; 0xece <udc_process_setup+0x410>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     e0a:	21 30       	cpi	r18, 0x01	; 1
     e0c:	09 f5       	brne	.+66     	; 0xe50 <udc_process_setup+0x392>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     e0e:	80 91 0a 24 	lds	r24, 0x240A
     e12:	8b 30       	cpi	r24, 0x0B	; 11
     e14:	e9 f4       	brne	.+58     	; 0xe50 <udc_process_setup+0x392>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     e16:	80 91 0f 24 	lds	r24, 0x240F
     e1a:	90 91 10 24 	lds	r25, 0x2410
     e1e:	89 2b       	or	r24, r25
     e20:	99 f4       	brne	.+38     	; 0xe48 <udc_process_setup+0x38a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     e22:	80 91 84 22 	lds	r24, 0x2284
     e26:	88 23       	and	r24, r24
     e28:	89 f0       	breq	.+34     	; 0xe4c <udc_process_setup+0x38e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     e2a:	c0 91 0d 24 	lds	r28, 0x240D
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     e2e:	d0 91 0b 24 	lds	r29, 0x240B

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     e32:	8c 2f       	mov	r24, r28
     e34:	76 dd       	rcall	.-1300   	; 0x922 <udc_iface_disable>
     e36:	08 2f       	mov	r16, r24
     e38:	88 23       	and	r24, r24
     e3a:	09 f4       	brne	.+2      	; 0xe3e <udc_process_setup+0x380>
     e3c:	48 c0       	rjmp	.+144    	; 0xece <udc_process_setup+0x410>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     e3e:	6d 2f       	mov	r22, r29
     e40:	8c 2f       	mov	r24, r28
     e42:	b1 dd       	rcall	.-1182   	; 0x9a6 <udc_iface_enable>
     e44:	08 2f       	mov	r16, r24
     e46:	43 c0       	rjmp	.+134    	; 0xece <udc_process_setup+0x410>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	41 c0       	rjmp	.+130    	; 0xece <udc_process_setup+0x410>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e4c:	00 e0       	ldi	r16, 0x00	; 0
     e4e:	3f c0       	rjmp	.+126    	; 0xece <udc_process_setup+0x410>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e50:	22 30       	cpi	r18, 0x02	; 2
     e52:	09 f0       	breq	.+2      	; 0xe56 <udc_process_setup+0x398>
     e54:	3e c0       	rjmp	.+124    	; 0xed2 <udc_process_setup+0x414>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     e56:	80 91 0a 24 	lds	r24, 0x240A
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	19 f0       	breq	.+6      	; 0xe64 <udc_process_setup+0x3a6>
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	b9 f0       	breq	.+46     	; 0xe90 <udc_process_setup+0x3d2>
     e62:	34 c0       	rjmp	.+104    	; 0xecc <udc_process_setup+0x40e>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e64:	80 91 0f 24 	lds	r24, 0x240F
     e68:	90 91 10 24 	lds	r25, 0x2410
     e6c:	89 2b       	or	r24, r25
     e6e:	61 f4       	brne	.+24     	; 0xe88 <udc_process_setup+0x3ca>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     e70:	80 91 0b 24 	lds	r24, 0x240B
     e74:	90 91 0c 24 	lds	r25, 0x240C
     e78:	89 2b       	or	r24, r25
     e7a:	41 f4       	brne	.+16     	; 0xe8c <udc_process_setup+0x3ce>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     e7c:	80 91 0d 24 	lds	r24, 0x240D
     e80:	0e 94 7e 11 	call	0x22fc	; 0x22fc <udd_ep_clear_halt>
     e84:	08 2f       	mov	r16, r24
     e86:	23 c0       	rjmp	.+70     	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	21 c0       	rjmp	.+66     	; 0xece <udc_process_setup+0x410>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     e8c:	00 e0       	ldi	r16, 0x00	; 0
     e8e:	1f c0       	rjmp	.+62     	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e90:	80 91 0f 24 	lds	r24, 0x240F
     e94:	90 91 10 24 	lds	r25, 0x2410
     e98:	89 2b       	or	r24, r25
     e9a:	81 f4       	brne	.+32     	; 0xebc <udc_process_setup+0x3fe>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     e9c:	80 91 0b 24 	lds	r24, 0x240B
     ea0:	90 91 0c 24 	lds	r25, 0x240C
     ea4:	89 2b       	or	r24, r25
     ea6:	61 f4       	brne	.+24     	; 0xec0 <udc_process_setup+0x402>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     ea8:	cd e0       	ldi	r28, 0x0D	; 13
     eaa:	d4 e2       	ldi	r29, 0x24	; 36
     eac:	88 81       	ld	r24, Y
     eae:	0e 94 30 12 	call	0x2460	; 0x2460 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     eb2:	88 81       	ld	r24, Y
     eb4:	0e 94 86 12 	call	0x250c	; 0x250c <udd_ep_set_halt>
     eb8:	08 2f       	mov	r16, r24
     eba:	09 c0       	rjmp	.+18     	; 0xece <udc_process_setup+0x410>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ebc:	00 e0       	ldi	r16, 0x00	; 0
     ebe:	07 c0       	rjmp	.+14     	; 0xece <udc_process_setup+0x410>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     ec0:	00 e0       	ldi	r16, 0x00	; 0
     ec2:	05 c0       	rjmp	.+10     	; 0xece <udc_process_setup+0x410>
				break;
			}
		}
#endif
	}
	return false;
     ec4:	00 e0       	ldi	r16, 0x00	; 0
     ec6:	03 c0       	rjmp	.+6      	; 0xece <udc_process_setup+0x410>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     ec8:	00 e0       	ldi	r16, 0x00	; 0
     eca:	01 c0       	rjmp	.+2      	; 0xece <udc_process_setup+0x410>
				break;
			}
		}
#endif
	}
	return false;
     ecc:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     ece:	01 11       	cpse	r16, r1
     ed0:	89 c0       	rjmp	.+274    	; 0xfe4 <udc_process_setup+0x526>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     ed2:	80 91 09 24 	lds	r24, 0x2409
     ed6:	8f 71       	andi	r24, 0x1F	; 31
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	c1 f5       	brne	.+112    	; 0xf4c <udc_process_setup+0x48e>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     edc:	80 91 84 22 	lds	r24, 0x2284
     ee0:	88 23       	and	r24, r24
     ee2:	a1 f1       	breq	.+104    	; 0xf4c <udc_process_setup+0x48e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     ee4:	c0 91 0d 24 	lds	r28, 0x240D
     ee8:	d0 91 0e 24 	lds	r29, 0x240E
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     eec:	00 91 82 22 	lds	r16, 0x2282
     ef0:	10 91 83 22 	lds	r17, 0x2283
     ef4:	d8 01       	movw	r26, r16
     ef6:	ed 91       	ld	r30, X+
     ef8:	fc 91       	ld	r31, X
     efa:	84 81       	ldd	r24, Z+4	; 0x04
     efc:	c8 17       	cp	r28, r24
     efe:	30 f5       	brcc	.+76     	; 0xf4c <udc_process_setup+0x48e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	8c 2f       	mov	r24, r28
     f04:	d4 dc       	rcall	.-1624   	; 0x8ae <udc_update_iface_desc>
     f06:	88 23       	and	r24, r24
     f08:	09 f1       	breq	.+66     	; 0xf4c <udc_process_setup+0x48e>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f0a:	ce 01       	movw	r24, r28
     f0c:	99 27       	eor	r25, r25
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	d8 01       	movw	r26, r16
     f14:	12 96       	adiw	r26, 0x02	; 2
     f16:	ed 91       	ld	r30, X+
     f18:	fc 91       	ld	r31, X
     f1a:	13 97       	sbiw	r26, 0x03	; 3
     f1c:	e8 0f       	add	r30, r24
     f1e:	f9 1f       	adc	r31, r25
     f20:	00 81       	ld	r16, Z
     f22:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f24:	d8 01       	movw	r26, r16
     f26:	16 96       	adiw	r26, 0x06	; 6
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	17 97       	sbiw	r26, 0x07	; 7
     f2e:	09 95       	icall
     f30:	68 2f       	mov	r22, r24
     f32:	8c 2f       	mov	r24, r28
     f34:	bc dc       	rcall	.-1672   	; 0x8ae <udc_update_iface_desc>
     f36:	88 23       	and	r24, r24
     f38:	49 f0       	breq	.+18     	; 0xf4c <udc_process_setup+0x48e>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     f3a:	d8 01       	movw	r26, r16
     f3c:	14 96       	adiw	r26, 0x04	; 4
     f3e:	ed 91       	ld	r30, X+
     f40:	fc 91       	ld	r31, X
     f42:	15 97       	sbiw	r26, 0x05	; 5
     f44:	09 95       	icall
     f46:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     f48:	81 11       	cpse	r24, r1
     f4a:	4c c0       	rjmp	.+152    	; 0xfe4 <udc_process_setup+0x526>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     f4c:	80 91 09 24 	lds	r24, 0x2409
     f50:	8f 71       	andi	r24, 0x1F	; 31
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	d9 f5       	brne	.+118    	; 0xfcc <udc_process_setup+0x50e>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f56:	80 91 84 22 	lds	r24, 0x2284
     f5a:	88 23       	and	r24, r24
     f5c:	89 f1       	breq	.+98     	; 0xfc0 <udc_process_setup+0x502>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f5e:	e0 91 82 22 	lds	r30, 0x2282
     f62:	f0 91 83 22 	lds	r31, 0x2283
     f66:	a0 81       	ld	r26, Z
     f68:	b1 81       	ldd	r27, Z+1	; 0x01
     f6a:	14 96       	adiw	r26, 0x04	; 4
     f6c:	8c 91       	ld	r24, X
     f6e:	88 23       	and	r24, r24
     f70:	49 f1       	breq	.+82     	; 0xfc4 <udc_process_setup+0x506>
     f72:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     f74:	21 2f       	mov	r18, r17
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	02 80       	ldd	r0, Z+2	; 0x02
     f7e:	f3 81       	ldd	r31, Z+3	; 0x03
     f80:	e0 2d       	mov	r30, r0
     f82:	e2 0f       	add	r30, r18
     f84:	f3 1f       	adc	r31, r19
     f86:	c0 81       	ld	r28, Z
     f88:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f8a:	ee 81       	ldd	r30, Y+6	; 0x06
     f8c:	ff 81       	ldd	r31, Y+7	; 0x07
     f8e:	09 95       	icall
     f90:	68 2f       	mov	r22, r24
     f92:	81 2f       	mov	r24, r17
     f94:	8c dc       	rcall	.-1768   	; 0x8ae <udc_update_iface_desc>
     f96:	08 2f       	mov	r16, r24
     f98:	88 23       	and	r24, r24
     f9a:	21 f1       	breq	.+72     	; 0xfe4 <udc_process_setup+0x526>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     f9c:	ec 81       	ldd	r30, Y+4	; 0x04
     f9e:	fd 81       	ldd	r31, Y+5	; 0x05
     fa0:	09 95       	icall
     fa2:	08 2f       	mov	r16, r24
     fa4:	81 11       	cpse	r24, r1
     fa6:	1e c0       	rjmp	.+60     	; 0xfe4 <udc_process_setup+0x526>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     fa8:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     faa:	e0 91 82 22 	lds	r30, 0x2282
     fae:	f0 91 83 22 	lds	r31, 0x2283
     fb2:	a0 81       	ld	r26, Z
     fb4:	b1 81       	ldd	r27, Z+1	; 0x01
     fb6:	14 96       	adiw	r26, 0x04	; 4
     fb8:	8c 91       	ld	r24, X
     fba:	18 17       	cp	r17, r24
     fbc:	d8 f2       	brcs	.-74     	; 0xf74 <udc_process_setup+0x4b6>
     fbe:	12 c0       	rjmp	.+36     	; 0xfe4 <udc_process_setup+0x526>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     fc0:	00 e0       	ldi	r16, 0x00	; 0
     fc2:	10 c0       	rjmp	.+32     	; 0xfe4 <udc_process_setup+0x526>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	0e c0       	rjmp	.+28     	; 0xfe4 <udc_process_setup+0x526>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     fc8:	00 e0       	ldi	r16, 0x00	; 0
     fca:	0c c0       	rjmp	.+24     	; 0xfe4 <udc_process_setup+0x526>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     fcc:	00 e0       	ldi	r16, 0x00	; 0
     fce:	0a c0       	rjmp	.+20     	; 0xfe4 <udc_process_setup+0x526>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     fd0:	82 2f       	mov	r24, r18
     fd2:	80 76       	andi	r24, 0x60	; 96
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <udc_process_setup+0x51a>
     fd6:	7d cf       	rjmp	.-262    	; 0xed2 <udc_process_setup+0x414>
     fd8:	84 ce       	rjmp	.-760    	; 0xce2 <udc_process_setup+0x224>
     fda:	32 2f       	mov	r19, r18
     fdc:	30 76       	andi	r19, 0x60	; 96
     fde:	09 f0       	breq	.+2      	; 0xfe2 <udc_process_setup+0x524>
     fe0:	78 cf       	rjmp	.-272    	; 0xed2 <udc_process_setup+0x414>
     fe2:	8c cd       	rjmp	.-1256   	; 0xafc <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     fe4:	80 2f       	mov	r24, r16
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	08 95       	ret

00000ff4 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    1016:	e0 91 b9 22 	lds	r30, 0x22B9
    101a:	f0 91 ba 22 	lds	r31, 0x22BA
    101e:	30 97       	sbiw	r30, 0x00	; 0
    1020:	09 f0       	breq	.+2      	; 0x1024 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
    1022:	09 95       	icall
	}
}
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	6f 93       	push	r22
    105a:	7f 93       	push	r23
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    1068:	e0 91 b7 22 	lds	r30, 0x22B7
    106c:	f0 91 b8 22 	lds	r31, 0x22B8
    1070:	30 97       	sbiw	r30, 0x00	; 0
    1072:	09 f0       	breq	.+2      	; 0x1076 <__vector_15+0x30>
		tc_tcc0_err_callback();
    1074:	09 95       	icall
	}
}
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	bf 91       	pop	r27
    107c:	af 91       	pop	r26
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	7f 91       	pop	r23
    1084:	6f 91       	pop	r22
    1086:	5f 91       	pop	r21
    1088:	4f 91       	pop	r20
    108a:	3f 91       	pop	r19
    108c:	2f 91       	pop	r18
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    10ba:	e0 91 b5 22 	lds	r30, 0x22B5
    10be:	f0 91 b6 22 	lds	r31, 0x22B6
    10c2:	30 97       	sbiw	r30, 0x00	; 0
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_16+0x30>
		tc_tcc0_cca_callback();
    10c6:	09 95       	icall
	}
}
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    110c:	e0 91 b3 22 	lds	r30, 0x22B3
    1110:	f0 91 b4 22 	lds	r31, 0x22B4
    1114:	30 97       	sbiw	r30, 0x00	; 0
    1116:	09 f0       	breq	.+2      	; 0x111a <__vector_17+0x30>
		tc_tcc0_ccb_callback();
    1118:	09 95       	icall
	}
}
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	af 93       	push	r26
    1158:	bf 93       	push	r27
    115a:	ef 93       	push	r30
    115c:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    115e:	e0 91 b1 22 	lds	r30, 0x22B1
    1162:	f0 91 b2 22 	lds	r31, 0x22B2
    1166:	30 97       	sbiw	r30, 0x00	; 0
    1168:	09 f0       	breq	.+2      	; 0x116c <__vector_18+0x30>
		tc_tcc0_ccc_callback();
    116a:	09 95       	icall
	}
}
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    118e:	1f 92       	push	r1
    1190:	0f 92       	push	r0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	2f 93       	push	r18
    119a:	3f 93       	push	r19
    119c:	4f 93       	push	r20
    119e:	5f 93       	push	r21
    11a0:	6f 93       	push	r22
    11a2:	7f 93       	push	r23
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	af 93       	push	r26
    11aa:	bf 93       	push	r27
    11ac:	ef 93       	push	r30
    11ae:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    11b0:	e0 91 af 22 	lds	r30, 0x22AF
    11b4:	f0 91 b0 22 	lds	r31, 0x22B0
    11b8:	30 97       	sbiw	r30, 0x00	; 0
    11ba:	09 f0       	breq	.+2      	; 0x11be <__vector_19+0x30>
		tc_tcc0_ccd_callback();
    11bc:	09 95       	icall
	}
}
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1202:	e0 91 ad 22 	lds	r30, 0x22AD
    1206:	f0 91 ae 22 	lds	r31, 0x22AE
    120a:	30 97       	sbiw	r30, 0x00	; 0
    120c:	09 f0       	breq	.+2      	; 0x1210 <__vector_20+0x30>
		tc_tcc1_ovf_callback();
    120e:	09 95       	icall
	}
}
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	0f 90       	pop	r0
    122e:	1f 90       	pop	r1
    1230:	18 95       	reti

00001232 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
    123c:	2f 93       	push	r18
    123e:	3f 93       	push	r19
    1240:	4f 93       	push	r20
    1242:	5f 93       	push	r21
    1244:	6f 93       	push	r22
    1246:	7f 93       	push	r23
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	af 93       	push	r26
    124e:	bf 93       	push	r27
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1254:	e0 91 ab 22 	lds	r30, 0x22AB
    1258:	f0 91 ac 22 	lds	r31, 0x22AC
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	09 f0       	breq	.+2      	; 0x1262 <__vector_21+0x30>
		tc_tcc1_err_callback();
    1260:	09 95       	icall
	}
}
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	bf 91       	pop	r27
    1268:	af 91       	pop	r26
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	7f 91       	pop	r23
    1270:	6f 91       	pop	r22
    1272:	5f 91       	pop	r21
    1274:	4f 91       	pop	r20
    1276:	3f 91       	pop	r19
    1278:	2f 91       	pop	r18
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    12a6:	e0 91 a9 22 	lds	r30, 0x22A9
    12aa:	f0 91 aa 22 	lds	r31, 0x22AA
    12ae:	30 97       	sbiw	r30, 0x00	; 0
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <__vector_22+0x30>
		tc_tcc1_cca_callback();
    12b2:	09 95       	icall
	}
}
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    12d6:	1f 92       	push	r1
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
    12e0:	2f 93       	push	r18
    12e2:	3f 93       	push	r19
    12e4:	4f 93       	push	r20
    12e6:	5f 93       	push	r21
    12e8:	6f 93       	push	r22
    12ea:	7f 93       	push	r23
    12ec:	8f 93       	push	r24
    12ee:	9f 93       	push	r25
    12f0:	af 93       	push	r26
    12f2:	bf 93       	push	r27
    12f4:	ef 93       	push	r30
    12f6:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    12f8:	e0 91 a7 22 	lds	r30, 0x22A7
    12fc:	f0 91 a8 22 	lds	r31, 0x22A8
    1300:	30 97       	sbiw	r30, 0x00	; 0
    1302:	09 f0       	breq	.+2      	; 0x1306 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
    1304:	09 95       	icall
	}
}
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	bf 91       	pop	r27
    130c:	af 91       	pop	r26
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	7f 91       	pop	r23
    1314:	6f 91       	pop	r22
    1316:	5f 91       	pop	r21
    1318:	4f 91       	pop	r20
    131a:	3f 91       	pop	r19
    131c:	2f 91       	pop	r18
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    134a:	e0 91 a5 22 	lds	r30, 0x22A5
    134e:	f0 91 a6 22 	lds	r31, 0x22A6
    1352:	30 97       	sbiw	r30, 0x00	; 0
    1354:	09 f0       	breq	.+2      	; 0x1358 <__vector_77+0x30>
		tc_tcd0_ovf_callback();
    1356:	09 95       	icall
	}
}
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	bf 91       	pop	r27
    135e:	af 91       	pop	r26
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	7f 91       	pop	r23
    1366:	6f 91       	pop	r22
    1368:	5f 91       	pop	r21
    136a:	4f 91       	pop	r20
    136c:	3f 91       	pop	r19
    136e:	2f 91       	pop	r18
    1370:	0f 90       	pop	r0
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	0f 90       	pop	r0
    1376:	1f 90       	pop	r1
    1378:	18 95       	reti

0000137a <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    137a:	1f 92       	push	r1
    137c:	0f 92       	push	r0
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	2f 93       	push	r18
    1386:	3f 93       	push	r19
    1388:	4f 93       	push	r20
    138a:	5f 93       	push	r21
    138c:	6f 93       	push	r22
    138e:	7f 93       	push	r23
    1390:	8f 93       	push	r24
    1392:	9f 93       	push	r25
    1394:	af 93       	push	r26
    1396:	bf 93       	push	r27
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    139c:	e0 91 a3 22 	lds	r30, 0x22A3
    13a0:	f0 91 a4 22 	lds	r31, 0x22A4
    13a4:	30 97       	sbiw	r30, 0x00	; 0
    13a6:	09 f0       	breq	.+2      	; 0x13aa <__vector_78+0x30>
		tc_tcd0_err_callback();
    13a8:	09 95       	icall
	}
}
    13aa:	ff 91       	pop	r31
    13ac:	ef 91       	pop	r30
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	7f 91       	pop	r23
    13b8:	6f 91       	pop	r22
    13ba:	5f 91       	pop	r21
    13bc:	4f 91       	pop	r20
    13be:	3f 91       	pop	r19
    13c0:	2f 91       	pop	r18
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    13cc:	1f 92       	push	r1
    13ce:	0f 92       	push	r0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	6f 93       	push	r22
    13e0:	7f 93       	push	r23
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    13ee:	e0 91 a1 22 	lds	r30, 0x22A1
    13f2:	f0 91 a2 22 	lds	r31, 0x22A2
    13f6:	30 97       	sbiw	r30, 0x00	; 0
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__vector_79+0x30>
		tc_tcd0_cca_callback();
    13fa:	09 95       	icall
	}
}
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    141e:	1f 92       	push	r1
    1420:	0f 92       	push	r0
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	0f 92       	push	r0
    1426:	11 24       	eor	r1, r1
    1428:	2f 93       	push	r18
    142a:	3f 93       	push	r19
    142c:	4f 93       	push	r20
    142e:	5f 93       	push	r21
    1430:	6f 93       	push	r22
    1432:	7f 93       	push	r23
    1434:	8f 93       	push	r24
    1436:	9f 93       	push	r25
    1438:	af 93       	push	r26
    143a:	bf 93       	push	r27
    143c:	ef 93       	push	r30
    143e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1440:	e0 91 9f 22 	lds	r30, 0x229F
    1444:	f0 91 a0 22 	lds	r31, 0x22A0
    1448:	30 97       	sbiw	r30, 0x00	; 0
    144a:	09 f0       	breq	.+2      	; 0x144e <__vector_80+0x30>
		tc_tcd0_ccb_callback();
    144c:	09 95       	icall
	}
}
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1492:	e0 91 9d 22 	lds	r30, 0x229D
    1496:	f0 91 9e 22 	lds	r31, 0x229E
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__vector_81+0x30>
		tc_tcd0_ccc_callback();
    149e:	09 95       	icall
	}
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    14e4:	e0 91 9b 22 	lds	r30, 0x229B
    14e8:	f0 91 9c 22 	lds	r31, 0x229C
    14ec:	30 97       	sbiw	r30, 0x00	; 0
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
    14f0:	09 95       	icall
	}
}
    14f2:	ff 91       	pop	r31
    14f4:	ef 91       	pop	r30
    14f6:	bf 91       	pop	r27
    14f8:	af 91       	pop	r26
    14fa:	9f 91       	pop	r25
    14fc:	8f 91       	pop	r24
    14fe:	7f 91       	pop	r23
    1500:	6f 91       	pop	r22
    1502:	5f 91       	pop	r21
    1504:	4f 91       	pop	r20
    1506:	3f 91       	pop	r19
    1508:	2f 91       	pop	r18
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	0f 90       	pop	r0
    1510:	1f 90       	pop	r1
    1512:	18 95       	reti

00001514 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1514:	1f 92       	push	r1
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	2f 93       	push	r18
    1520:	3f 93       	push	r19
    1522:	4f 93       	push	r20
    1524:	5f 93       	push	r21
    1526:	6f 93       	push	r22
    1528:	7f 93       	push	r23
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	af 93       	push	r26
    1530:	bf 93       	push	r27
    1532:	ef 93       	push	r30
    1534:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1536:	e0 91 99 22 	lds	r30, 0x2299
    153a:	f0 91 9a 22 	lds	r31, 0x229A
    153e:	30 97       	sbiw	r30, 0x00	; 0
    1540:	09 f0       	breq	.+2      	; 0x1544 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
    1542:	09 95       	icall
	}
}
    1544:	ff 91       	pop	r31
    1546:	ef 91       	pop	r30
    1548:	bf 91       	pop	r27
    154a:	af 91       	pop	r26
    154c:	9f 91       	pop	r25
    154e:	8f 91       	pop	r24
    1550:	7f 91       	pop	r23
    1552:	6f 91       	pop	r22
    1554:	5f 91       	pop	r21
    1556:	4f 91       	pop	r20
    1558:	3f 91       	pop	r19
    155a:	2f 91       	pop	r18
    155c:	0f 90       	pop	r0
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	0f 90       	pop	r0
    1562:	1f 90       	pop	r1
    1564:	18 95       	reti

00001566 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1566:	1f 92       	push	r1
    1568:	0f 92       	push	r0
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	0f 92       	push	r0
    156e:	11 24       	eor	r1, r1
    1570:	2f 93       	push	r18
    1572:	3f 93       	push	r19
    1574:	4f 93       	push	r20
    1576:	5f 93       	push	r21
    1578:	6f 93       	push	r22
    157a:	7f 93       	push	r23
    157c:	8f 93       	push	r24
    157e:	9f 93       	push	r25
    1580:	af 93       	push	r26
    1582:	bf 93       	push	r27
    1584:	ef 93       	push	r30
    1586:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1588:	e0 91 97 22 	lds	r30, 0x2297
    158c:	f0 91 98 22 	lds	r31, 0x2298
    1590:	30 97       	sbiw	r30, 0x00	; 0
    1592:	09 f0       	breq	.+2      	; 0x1596 <__vector_84+0x30>
		tc_tcd1_err_callback();
    1594:	09 95       	icall
	}
}
    1596:	ff 91       	pop	r31
    1598:	ef 91       	pop	r30
    159a:	bf 91       	pop	r27
    159c:	af 91       	pop	r26
    159e:	9f 91       	pop	r25
    15a0:	8f 91       	pop	r24
    15a2:	7f 91       	pop	r23
    15a4:	6f 91       	pop	r22
    15a6:	5f 91       	pop	r21
    15a8:	4f 91       	pop	r20
    15aa:	3f 91       	pop	r19
    15ac:	2f 91       	pop	r18
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	0f 90       	pop	r0
    15b4:	1f 90       	pop	r1
    15b6:	18 95       	reti

000015b8 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    15b8:	1f 92       	push	r1
    15ba:	0f 92       	push	r0
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	0f 92       	push	r0
    15c0:	11 24       	eor	r1, r1
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    15da:	e0 91 95 22 	lds	r30, 0x2295
    15de:	f0 91 96 22 	lds	r31, 0x2296
    15e2:	30 97       	sbiw	r30, 0x00	; 0
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <__vector_85+0x30>
		tc_tcd1_cca_callback();
    15e6:	09 95       	icall
	}
}
    15e8:	ff 91       	pop	r31
    15ea:	ef 91       	pop	r30
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	7f 91       	pop	r23
    15f6:	6f 91       	pop	r22
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    162c:	e0 91 93 22 	lds	r30, 0x2293
    1630:	f0 91 94 22 	lds	r31, 0x2294
    1634:	30 97       	sbiw	r30, 0x00	; 0
    1636:	09 f0       	breq	.+2      	; 0x163a <__vector_86+0x30>
		tc_tcd1_ccb_callback();
    1638:	09 95       	icall
	}
}
    163a:	ff 91       	pop	r31
    163c:	ef 91       	pop	r30
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	0f 90       	pop	r0
    1658:	1f 90       	pop	r1
    165a:	18 95       	reti

0000165c <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	2f 93       	push	r18
    1668:	3f 93       	push	r19
    166a:	4f 93       	push	r20
    166c:	5f 93       	push	r21
    166e:	6f 93       	push	r22
    1670:	7f 93       	push	r23
    1672:	8f 93       	push	r24
    1674:	9f 93       	push	r25
    1676:	af 93       	push	r26
    1678:	bf 93       	push	r27
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    167e:	e0 91 91 22 	lds	r30, 0x2291
    1682:	f0 91 92 22 	lds	r31, 0x2292
    1686:	30 97       	sbiw	r30, 0x00	; 0
    1688:	09 f0       	breq	.+2      	; 0x168c <__vector_47+0x30>
		tc_tce0_ovf_callback();
    168a:	09 95       	icall
	}
}
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	7f 91       	pop	r23
    169a:	6f 91       	pop	r22
    169c:	5f 91       	pop	r21
    169e:	4f 91       	pop	r20
    16a0:	3f 91       	pop	r19
    16a2:	2f 91       	pop	r18
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    16d0:	e0 91 8f 22 	lds	r30, 0x228F
    16d4:	f0 91 90 22 	lds	r31, 0x2290
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	09 f0       	breq	.+2      	; 0x16de <__vector_48+0x30>
		tc_tce0_err_callback();
    16dc:	09 95       	icall
	}
}
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	4f 91       	pop	r20
    16f2:	3f 91       	pop	r19
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	0f 90       	pop	r0
    16fc:	1f 90       	pop	r1
    16fe:	18 95       	reti

00001700 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	2f 93       	push	r18
    170c:	3f 93       	push	r19
    170e:	4f 93       	push	r20
    1710:	5f 93       	push	r21
    1712:	6f 93       	push	r22
    1714:	7f 93       	push	r23
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	af 93       	push	r26
    171c:	bf 93       	push	r27
    171e:	ef 93       	push	r30
    1720:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1722:	e0 91 8d 22 	lds	r30, 0x228D
    1726:	f0 91 8e 22 	lds	r31, 0x228E
    172a:	30 97       	sbiw	r30, 0x00	; 0
    172c:	09 f0       	breq	.+2      	; 0x1730 <__vector_49+0x30>
		tc_tce0_cca_callback();
    172e:	09 95       	icall
	}
}
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	bf 91       	pop	r27
    1736:	af 91       	pop	r26
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	7f 91       	pop	r23
    173e:	6f 91       	pop	r22
    1740:	5f 91       	pop	r21
    1742:	4f 91       	pop	r20
    1744:	3f 91       	pop	r19
    1746:	2f 91       	pop	r18
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	2f 93       	push	r18
    175e:	3f 93       	push	r19
    1760:	4f 93       	push	r20
    1762:	5f 93       	push	r21
    1764:	6f 93       	push	r22
    1766:	7f 93       	push	r23
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	af 93       	push	r26
    176e:	bf 93       	push	r27
    1770:	ef 93       	push	r30
    1772:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1774:	e0 91 8b 22 	lds	r30, 0x228B
    1778:	f0 91 8c 22 	lds	r31, 0x228C
    177c:	30 97       	sbiw	r30, 0x00	; 0
    177e:	09 f0       	breq	.+2      	; 0x1782 <__vector_50+0x30>
		tc_tce0_ccb_callback();
    1780:	09 95       	icall
	}
}
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	2f 93       	push	r18
    17b0:	3f 93       	push	r19
    17b2:	4f 93       	push	r20
    17b4:	5f 93       	push	r21
    17b6:	6f 93       	push	r22
    17b8:	7f 93       	push	r23
    17ba:	8f 93       	push	r24
    17bc:	9f 93       	push	r25
    17be:	af 93       	push	r26
    17c0:	bf 93       	push	r27
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    17c6:	e0 91 89 22 	lds	r30, 0x2289
    17ca:	f0 91 8a 22 	lds	r31, 0x228A
    17ce:	30 97       	sbiw	r30, 0x00	; 0
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <__vector_51+0x30>
		tc_tce0_ccc_callback();
    17d2:	09 95       	icall
	}
}
    17d4:	ff 91       	pop	r31
    17d6:	ef 91       	pop	r30
    17d8:	bf 91       	pop	r27
    17da:	af 91       	pop	r26
    17dc:	9f 91       	pop	r25
    17de:	8f 91       	pop	r24
    17e0:	7f 91       	pop	r23
    17e2:	6f 91       	pop	r22
    17e4:	5f 91       	pop	r21
    17e6:	4f 91       	pop	r20
    17e8:	3f 91       	pop	r19
    17ea:	2f 91       	pop	r18
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	0f 90       	pop	r0
    17f2:	1f 90       	pop	r1
    17f4:	18 95       	reti

000017f6 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    17f6:	1f 92       	push	r1
    17f8:	0f 92       	push	r0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	2f 93       	push	r18
    1802:	3f 93       	push	r19
    1804:	4f 93       	push	r20
    1806:	5f 93       	push	r21
    1808:	6f 93       	push	r22
    180a:	7f 93       	push	r23
    180c:	8f 93       	push	r24
    180e:	9f 93       	push	r25
    1810:	af 93       	push	r26
    1812:	bf 93       	push	r27
    1814:	ef 93       	push	r30
    1816:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1818:	e0 91 87 22 	lds	r30, 0x2287
    181c:	f0 91 88 22 	lds	r31, 0x2288
    1820:	30 97       	sbiw	r30, 0x00	; 0
    1822:	09 f0       	breq	.+2      	; 0x1826 <__vector_52+0x30>
		tc_tce0_ccd_callback();
    1824:	09 95       	icall
	}
}
    1826:	ff 91       	pop	r31
    1828:	ef 91       	pop	r30
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	7f 91       	pop	r23
    1834:	6f 91       	pop	r22
    1836:	5f 91       	pop	r21
    1838:	4f 91       	pop	r20
    183a:	3f 91       	pop	r19
    183c:	2f 91       	pop	r18
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0
    1844:	1f 90       	pop	r1
    1846:	18 95       	reti

00001848 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1848:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    184a:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    184c:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    184e:	28 2f       	mov	r18, r24
    1850:	39 2f       	mov	r19, r25
    1852:	21 15       	cp	r18, r1
    1854:	88 e0       	ldi	r24, 0x08	; 8
    1856:	38 07       	cpc	r19, r24
    1858:	49 f4       	brne	.+18     	; 0x186c <tc_enable+0x24>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1862:	64 e0       	ldi	r22, 0x04	; 4
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
    186a:	35 c0       	rjmp	.+106    	; 0x18d6 <tc_enable+0x8e>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    186c:	20 34       	cpi	r18, 0x40	; 64
    186e:	88 e0       	ldi	r24, 0x08	; 8
    1870:	38 07       	cpc	r19, r24
    1872:	49 f4       	brne	.+18     	; 0x1886 <tc_enable+0x3e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    187c:	64 e0       	ldi	r22, 0x04	; 4
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
    1884:	28 c0       	rjmp	.+80     	; 0x18d6 <tc_enable+0x8e>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1886:	21 15       	cp	r18, r1
    1888:	89 e0       	ldi	r24, 0x09	; 9
    188a:	38 07       	cpc	r19, r24
    188c:	49 f4       	brne	.+18     	; 0x18a0 <tc_enable+0x58>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1896:	64 e0       	ldi	r22, 0x04	; 4
    1898:	84 e0       	ldi	r24, 0x04	; 4
    189a:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
    189e:	1b c0       	rjmp	.+54     	; 0x18d6 <tc_enable+0x8e>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    18a0:	20 34       	cpi	r18, 0x40	; 64
    18a2:	89 e0       	ldi	r24, 0x09	; 9
    18a4:	38 07       	cpc	r19, r24
    18a6:	49 f4       	brne	.+18     	; 0x18ba <tc_enable+0x72>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    18a8:	62 e0       	ldi	r22, 0x02	; 2
    18aa:	84 e0       	ldi	r24, 0x04	; 4
    18ac:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    18b0:	64 e0       	ldi	r22, 0x04	; 4
    18b2:	84 e0       	ldi	r24, 0x04	; 4
    18b4:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
    18b8:	0e c0       	rjmp	.+28     	; 0x18d6 <tc_enable+0x8e>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    18ba:	21 15       	cp	r18, r1
    18bc:	3a 40       	sbci	r19, 0x0A	; 10
    18be:	49 f4       	brne	.+18     	; 0x18d2 <tc_enable+0x8a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	85 e0       	ldi	r24, 0x05	; 5
    18c4:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    18c8:	64 e0       	ldi	r22, 0x04	; 4
    18ca:	85 e0       	ldi	r24, 0x05	; 5
    18cc:	0e 94 af 14 	call	0x295e	; 0x295e <sysclk_enable_module>
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <tc_enable+0x8e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18d2:	cf bf       	out	0x3f, r28	; 63
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <tc_enable+0xa0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    18d6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    18d8:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    18da:	ea e1       	ldi	r30, 0x1A	; 26
    18dc:	f4 e2       	ldi	r31, 0x24	; 36
    18de:	90 81       	ld	r25, Z
    18e0:	9f 5f       	subi	r25, 0xFF	; 255
    18e2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18e4:	8f bf       	out	0x3f, r24	; 63
    18e6:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <twim_interrupt_handler>:
	PMIC.CTRL |= CONF_PMIC_INTLVL;

	cpu_irq_enable();

	return STATUS_OK;
}
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	e0 91 bb 22 	lds	r30, 0x22BB
    18f4:	f0 91 bc 22 	lds	r31, 0x22BC
    18f8:	84 81       	ldd	r24, Z+4	; 0x04
    18fa:	83 ff       	sbrs	r24, 3
    18fc:	08 c0       	rjmp	.+16     	; 0x190e <twim_interrupt_handler+0x22>
    18fe:	88 60       	ori	r24, 0x08	; 8
    1900:	84 83       	std	Z+4, r24	; 0x04
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	83 83       	std	Z+3, r24	; 0x03
    1906:	86 ef       	ldi	r24, 0xF6	; 246
    1908:	80 93 c5 22 	sts	0x22C5, r24
    190c:	89 c0       	rjmp	.+274    	; 0x1a20 <twim_interrupt_handler+0x134>
    190e:	98 2f       	mov	r25, r24
    1910:	94 71       	andi	r25, 0x14	; 20
    1912:	31 f0       	breq	.+12     	; 0x1920 <twim_interrupt_handler+0x34>
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	83 83       	std	Z+3, r24	; 0x03
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	80 93 c5 22 	sts	0x22C5, r24
    191e:	80 c0       	rjmp	.+256    	; 0x1a20 <twim_interrupt_handler+0x134>
    1920:	86 ff       	sbrs	r24, 6
    1922:	45 c0       	rjmp	.+138    	; 0x19ae <twim_interrupt_handler+0xc2>
    1924:	a0 91 bd 22 	lds	r26, 0x22BD
    1928:	b0 91 be 22 	lds	r27, 0x22BE
    192c:	80 91 bf 22 	lds	r24, 0x22BF
    1930:	90 91 c0 22 	lds	r25, 0x22C0
    1934:	14 96       	adiw	r26, 0x04	; 4
    1936:	2d 91       	ld	r18, X+
    1938:	3c 91       	ld	r19, X
    193a:	15 97       	sbiw	r26, 0x05	; 5
    193c:	82 17       	cp	r24, r18
    193e:	93 07       	cpc	r25, r19
    1940:	6c f4       	brge	.+26     	; 0x195c <twim_interrupt_handler+0x70>
    1942:	9c 01       	movw	r18, r24
    1944:	2f 5f       	subi	r18, 0xFF	; 255
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	20 93 bf 22 	sts	0x22BF, r18
    194c:	30 93 c0 22 	sts	0x22C0, r19
    1950:	a8 0f       	add	r26, r24
    1952:	b9 1f       	adc	r27, r25
    1954:	11 96       	adiw	r26, 0x01	; 1
    1956:	8c 91       	ld	r24, X
    1958:	87 83       	std	Z+7, r24	; 0x07
    195a:	62 c0       	rjmp	.+196    	; 0x1a20 <twim_interrupt_handler+0x134>
    195c:	80 91 c1 22 	lds	r24, 0x22C1
    1960:	90 91 c2 22 	lds	r25, 0x22C2
    1964:	18 96       	adiw	r26, 0x08	; 8
    1966:	2d 91       	ld	r18, X+
    1968:	3c 91       	ld	r19, X
    196a:	19 97       	sbiw	r26, 0x09	; 9
    196c:	82 17       	cp	r24, r18
    196e:	93 07       	cpc	r25, r19
    1970:	c8 f4       	brcc	.+50     	; 0x19a4 <twim_interrupt_handler+0xb8>
    1972:	20 91 c3 22 	lds	r18, 0x22C3
    1976:	22 23       	and	r18, r18
    1978:	21 f0       	breq	.+8      	; 0x1982 <twim_interrupt_handler+0x96>
    197a:	86 81       	ldd	r24, Z+6	; 0x06
    197c:	81 60       	ori	r24, 0x01	; 1
    197e:	86 83       	std	Z+6, r24	; 0x06
    1980:	4f c0       	rjmp	.+158    	; 0x1a20 <twim_interrupt_handler+0x134>
    1982:	16 96       	adiw	r26, 0x06	; 6
    1984:	2d 91       	ld	r18, X+
    1986:	3c 91       	ld	r19, X
    1988:	17 97       	sbiw	r26, 0x07	; 7
    198a:	ac 01       	movw	r20, r24
    198c:	4f 5f       	subi	r20, 0xFF	; 255
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	40 93 c1 22 	sts	0x22C1, r20
    1994:	50 93 c2 22 	sts	0x22C2, r21
    1998:	d9 01       	movw	r26, r18
    199a:	a8 0f       	add	r26, r24
    199c:	b9 1f       	adc	r27, r25
    199e:	8c 91       	ld	r24, X
    19a0:	87 83       	std	Z+7, r24	; 0x07
    19a2:	3e c0       	rjmp	.+124    	; 0x1a20 <twim_interrupt_handler+0x134>
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	83 83       	std	Z+3, r24	; 0x03
    19a8:	10 92 c5 22 	sts	0x22C5, r1
    19ac:	39 c0       	rjmp	.+114    	; 0x1a20 <twim_interrupt_handler+0x134>
    19ae:	88 23       	and	r24, r24
    19b0:	a4 f5       	brge	.+104    	; 0x1a1a <twim_interrupt_handler+0x12e>
    19b2:	a0 91 bd 22 	lds	r26, 0x22BD
    19b6:	b0 91 be 22 	lds	r27, 0x22BE
    19ba:	80 91 c1 22 	lds	r24, 0x22C1
    19be:	90 91 c2 22 	lds	r25, 0x22C2
    19c2:	18 96       	adiw	r26, 0x08	; 8
    19c4:	2d 91       	ld	r18, X+
    19c6:	3c 91       	ld	r19, X
    19c8:	19 97       	sbiw	r26, 0x09	; 9
    19ca:	82 17       	cp	r24, r18
    19cc:	93 07       	cpc	r25, r19
    19ce:	f8 f4       	brcc	.+62     	; 0x1a0e <twim_interrupt_handler+0x122>
    19d0:	16 96       	adiw	r26, 0x06	; 6
    19d2:	4d 91       	ld	r20, X+
    19d4:	5c 91       	ld	r21, X
    19d6:	17 97       	sbiw	r26, 0x07	; 7
    19d8:	9c 01       	movw	r18, r24
    19da:	2f 5f       	subi	r18, 0xFF	; 255
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	20 93 c1 22 	sts	0x22C1, r18
    19e2:	30 93 c2 22 	sts	0x22C2, r19
    19e6:	67 81       	ldd	r22, Z+7	; 0x07
    19e8:	ea 01       	movw	r28, r20
    19ea:	c8 0f       	add	r28, r24
    19ec:	d9 1f       	adc	r29, r25
    19ee:	68 83       	st	Y, r22
    19f0:	18 96       	adiw	r26, 0x08	; 8
    19f2:	8d 91       	ld	r24, X+
    19f4:	9c 91       	ld	r25, X
    19f6:	19 97       	sbiw	r26, 0x09	; 9
    19f8:	28 17       	cp	r18, r24
    19fa:	39 07       	cpc	r19, r25
    19fc:	18 f4       	brcc	.+6      	; 0x1a04 <twim_interrupt_handler+0x118>
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	83 83       	std	Z+3, r24	; 0x03
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <twim_interrupt_handler+0x134>
    1a04:	87 e0       	ldi	r24, 0x07	; 7
    1a06:	83 83       	std	Z+3, r24	; 0x03
    1a08:	10 92 c5 22 	sts	0x22C5, r1
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <twim_interrupt_handler+0x134>
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	83 83       	std	Z+3, r24	; 0x03
    1a12:	89 ef       	ldi	r24, 0xF9	; 249
    1a14:	80 93 c5 22 	sts	0x22C5, r24
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <twim_interrupt_handler+0x134>
    1a1a:	8b ef       	ldi	r24, 0xFB	; 251
    1a1c:	80 93 c5 22 	sts	0x22C5, r24
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <__vector_13>:
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	4f 93       	push	r20
    1a36:	5f 93       	push	r21
    1a38:	6f 93       	push	r22
    1a3a:	7f 93       	push	r23
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	af 93       	push	r26
    1a42:	bf 93       	push	r27
    1a44:	ef 93       	push	r30
    1a46:	ff 93       	push	r31
    1a48:	51 df       	rcall	.-350    	; 0x18ec <twim_interrupt_handler>
    1a4a:	ff 91       	pop	r31
    1a4c:	ef 91       	pop	r30
    1a4e:	bf 91       	pop	r27
    1a50:	af 91       	pop	r26
    1a52:	9f 91       	pop	r25
    1a54:	8f 91       	pop	r24
    1a56:	7f 91       	pop	r23
    1a58:	6f 91       	pop	r22
    1a5a:	5f 91       	pop	r21
    1a5c:	4f 91       	pop	r20
    1a5e:	3f 91       	pop	r19
    1a60:	2f 91       	pop	r18
    1a62:	0f 90       	pop	r0
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	0f 90       	pop	r0
    1a68:	1f 90       	pop	r1
    1a6a:	18 95       	reti

00001a6c <__vector_46>:
    1a6c:	1f 92       	push	r1
    1a6e:	0f 92       	push	r0
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	0f 92       	push	r0
    1a74:	11 24       	eor	r1, r1
    1a76:	2f 93       	push	r18
    1a78:	3f 93       	push	r19
    1a7a:	4f 93       	push	r20
    1a7c:	5f 93       	push	r21
    1a7e:	6f 93       	push	r22
    1a80:	7f 93       	push	r23
    1a82:	8f 93       	push	r24
    1a84:	9f 93       	push	r25
    1a86:	af 93       	push	r26
    1a88:	bf 93       	push	r27
    1a8a:	ef 93       	push	r30
    1a8c:	ff 93       	push	r31
    1a8e:	2e df       	rcall	.-420    	; 0x18ec <twim_interrupt_handler>
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <twi_master_transfer>:
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <twi_master_transfer+0x6>
    1ab6:	53 c0       	rjmp	.+166    	; 0x1b5e <twi_master_transfer+0xac>
    1ab8:	61 15       	cp	r22, r1
    1aba:	71 05       	cpc	r23, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <twi_master_transfer+0xe>
    1abe:	51 c0       	rjmp	.+162    	; 0x1b62 <twi_master_transfer+0xb0>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	32 85       	ldd	r19, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1ac4:	20 91 c4 22 	lds	r18, 0x22C4
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <twi_master_transfer+0x1c>

		if (no_wait) { return ERR_BUSY; }
    1aca:	31 11       	cpse	r19, r1
    1acc:	4c c0       	rjmp	.+152    	; 0x1b66 <twi_master_transfer+0xb4>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1ace:	21 11       	cpse	r18, r1
    1ad0:	fc cf       	rjmp	.-8      	; 0x1aca <twi_master_transfer+0x18>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ad2:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    1ad4:	f8 94       	cli
		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1ad6:	31 e0       	ldi	r19, 0x01	; 1
    1ad8:	30 93 c4 22 	sts	0x22C4, r19
	transfer.status = OPERATION_IN_PROGRESS;
    1adc:	30 e8       	ldi	r19, 0x80	; 128
    1ade:	30 93 c5 22 	sts	0x22C5, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ae2:	2f bf       	out	0x3f, r18	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1ae4:	80 93 bb 22 	sts	0x22BB, r24
    1ae8:	90 93 bc 22 	sts	0x22BC, r25
		transfer.pkg         = (twi_package_t *) package;
    1aec:	60 93 bd 22 	sts	0x22BD, r22
    1af0:	70 93 be 22 	sts	0x22BE, r23
		transfer.addr_count  = 0;
    1af4:	10 92 bf 22 	sts	0x22BF, r1
    1af8:	10 92 c0 22 	sts	0x22C0, r1
		transfer.data_count  = 0;
    1afc:	10 92 c1 22 	sts	0x22C1, r1
    1b00:	10 92 c2 22 	sts	0x22C2, r1
		transfer.read        = read;
    1b04:	40 93 c3 22 	sts	0x22C3, r20

		uint8_t const chip = (package->chip) << 1;
    1b08:	fb 01       	movw	r30, r22
    1b0a:	20 81       	ld	r18, Z
    1b0c:	52 2f       	mov	r21, r18
    1b0e:	55 0f       	add	r21, r21

		if (package->addr_length || (false == read)) {
    1b10:	24 81       	ldd	r18, Z+4	; 0x04
    1b12:	35 81       	ldd	r19, Z+5	; 0x05
    1b14:	23 2b       	or	r18, r19
    1b16:	11 f4       	brne	.+4      	; 0x1b1c <twi_master_transfer+0x6a>
    1b18:	41 11       	cpse	r20, r1
    1b1a:	03 c0       	rjmp	.+6      	; 0x1b22 <twi_master_transfer+0x70>
			transfer.bus->MASTER.ADDR = chip;
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	56 83       	std	Z+6, r21	; 0x06
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <twi_master_transfer+0x76>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1b22:	51 60       	ori	r21, 0x01	; 1
    1b24:	fc 01       	movw	r30, r24
    1b26:	56 83       	std	Z+6, r21	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1b28:	e5 ec       	ldi	r30, 0xC5	; 197
    1b2a:	f2 e2       	ldi	r31, 0x22	; 34
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 38       	cpi	r24, 0x80	; 128
    1b30:	e9 f3       	breq	.-6      	; 0x1b2c <twi_master_transfer+0x7a>

	while (! twim_idle(transfer.bus)) { barrier(); }
    1b32:	e0 91 bb 22 	lds	r30, 0x22BB
    1b36:	f0 91 bc 22 	lds	r31, 0x22BC
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1b3a:	84 81       	ldd	r24, Z+4	; 0x04
    1b3c:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	49 f0       	breq	.+18     	; 0x1b54 <twi_master_transfer+0xa2>
    1b42:	ab eb       	ldi	r26, 0xBB	; 187
    1b44:	b2 e2       	ldi	r27, 0x22	; 34
    1b46:	ed 91       	ld	r30, X+
    1b48:	fc 91       	ld	r31, X
    1b4a:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1b4c:	84 81       	ldd	r24, Z+4	; 0x04
    1b4e:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	c9 f7       	brne	.-14     	; 0x1b46 <twi_master_transfer+0x94>

	status_code_t const status = transfer.status;
    1b54:	80 91 c5 22 	lds	r24, 0x22C5

	transfer.locked = false;
    1b58:	10 92 c4 22 	sts	0x22C4, r1
    1b5c:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1b5e:	88 ef       	ldi	r24, 0xF8	; 248
    1b60:	08 95       	ret
    1b62:	88 ef       	ldi	r24, 0xF8	; 248
    1b64:	08 95       	ret
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1b66:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1b68:	08 95       	ret

00001b6a <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	18 c0       	rjmp	.+48     	; 0x1b9e <udd_sleep_mode+0x34>
    1b6e:	90 91 f0 23 	lds	r25, 0x23F0
    1b72:	99 23       	and	r25, r25
    1b74:	89 f0       	breq	.+34     	; 0x1b98 <udd_sleep_mode+0x2e>
    1b76:	9f b7       	in	r25, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	ea e1       	ldi	r30, 0x1A	; 26
    1b7c:	f4 e2       	ldi	r31, 0x24	; 36
    1b7e:	20 81       	ld	r18, Z
    1b80:	21 50       	subi	r18, 0x01	; 1
    1b82:	20 83       	st	Z, r18
    1b84:	9f bf       	out	0x3f, r25	; 63
    1b86:	08 c0       	rjmp	.+16     	; 0x1b98 <udd_sleep_mode+0x2e>
    1b88:	9f b7       	in	r25, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	ea e1       	ldi	r30, 0x1A	; 26
    1b8e:	f4 e2       	ldi	r31, 0x24	; 36
    1b90:	20 81       	ld	r18, Z
    1b92:	2f 5f       	subi	r18, 0xFF	; 255
    1b94:	20 83       	st	Z, r18
    1b96:	9f bf       	out	0x3f, r25	; 63
    1b98:	80 93 f0 23 	sts	0x23F0, r24
    1b9c:	08 95       	ret
    1b9e:	90 91 f0 23 	lds	r25, 0x23F0
    1ba2:	99 23       	and	r25, r25
    1ba4:	89 f3       	breq	.-30     	; 0x1b88 <udd_sleep_mode+0x1e>
    1ba6:	f8 cf       	rjmp	.-16     	; 0x1b98 <udd_sleep_mode+0x2e>

00001ba8 <udd_ctrl_init>:
    1ba8:	0f 93       	push	r16
    1baa:	e8 ec       	ldi	r30, 0xC8	; 200
    1bac:	f4 e0       	ldi	r31, 0x04	; 4
    1bae:	80 81       	ld	r24, Z
    1bb0:	8f 7d       	andi	r24, 0xDF	; 223
    1bb2:	80 83       	st	Z, r24
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8f 7d       	andi	r24, 0xDF	; 223
    1bb8:	80 83       	st	Z, r24
    1bba:	e4 ec       	ldi	r30, 0xC4	; 196
    1bbc:	f3 e2       	ldi	r31, 0x23	; 35
    1bbe:	02 e0       	ldi	r16, 0x02	; 2
    1bc0:	05 93       	las	Z, r16
    1bc2:	10 92 c6 23 	sts	0x23C6, r1
    1bc6:	10 92 c7 23 	sts	0x23C7, r1
    1bca:	00 e2       	ldi	r16, 0x20	; 32
    1bcc:	06 93       	lac	Z, r16
    1bce:	00 e4       	ldi	r16, 0x40	; 64
    1bd0:	06 93       	lac	Z, r16
    1bd2:	ec eb       	ldi	r30, 0xBC	; 188
    1bd4:	f3 e2       	ldi	r31, 0x23	; 35
    1bd6:	00 e2       	ldi	r16, 0x20	; 32
    1bd8:	06 93       	lac	Z, r16
    1bda:	00 e4       	ldi	r16, 0x40	; 64
    1bdc:	06 93       	lac	Z, r16
    1bde:	10 92 15 24 	sts	0x2415, r1
    1be2:	10 92 16 24 	sts	0x2416, r1
    1be6:	10 92 17 24 	sts	0x2417, r1
    1bea:	10 92 18 24 	sts	0x2418, r1
    1bee:	10 92 13 24 	sts	0x2413, r1
    1bf2:	10 92 14 24 	sts	0x2414, r1
    1bf6:	10 92 af 23 	sts	0x23AF, r1
    1bfa:	0f 91       	pop	r16
    1bfc:	08 95       	ret

00001bfe <udd_ctrl_stall_data>:
    1bfe:	0f 93       	push	r16
    1c00:	85 e0       	ldi	r24, 0x05	; 5
    1c02:	80 93 af 23 	sts	0x23AF, r24
    1c06:	e5 ec       	ldi	r30, 0xC5	; 197
    1c08:	f3 e2       	ldi	r31, 0x23	; 35
    1c0a:	04 e0       	ldi	r16, 0x04	; 4
    1c0c:	05 93       	las	Z, r16
    1c0e:	ed eb       	ldi	r30, 0xBD	; 189
    1c10:	f3 e2       	ldi	r31, 0x23	; 35
    1c12:	04 e0       	ldi	r16, 0x04	; 4
    1c14:	05 93       	las	Z, r16
    1c16:	0f 91       	pop	r16
    1c18:	08 95       	ret

00001c1a <udd_ctrl_send_zlp_in>:
    1c1a:	0f 93       	push	r16
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	80 93 af 23 	sts	0x23AF, r24
    1c22:	10 92 c6 23 	sts	0x23C6, r1
    1c26:	10 92 c7 23 	sts	0x23C7, r1
    1c2a:	e4 ec       	ldi	r30, 0xC4	; 196
    1c2c:	f3 e2       	ldi	r31, 0x23	; 35
    1c2e:	02 e0       	ldi	r16, 0x02	; 2
    1c30:	06 93       	lac	Z, r16
    1c32:	0f 91       	pop	r16
    1c34:	08 95       	ret

00001c36 <udd_ctrl_endofrequest>:
    1c36:	e0 91 15 24 	lds	r30, 0x2415
    1c3a:	f0 91 16 24 	lds	r31, 0x2416
    1c3e:	30 97       	sbiw	r30, 0x00	; 0
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <udd_ctrl_endofrequest+0xe>
    1c42:	09 95       	icall
    1c44:	08 95       	ret

00001c46 <udd_ctrl_in_sent>:
    1c46:	0f 93       	push	r16
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	80 91 af 23 	lds	r24, 0x23AF
    1c50:	83 30       	cpi	r24, 0x03	; 3
    1c52:	19 f4       	brne	.+6      	; 0x1c5a <udd_ctrl_in_sent+0x14>
    1c54:	f0 df       	rcall	.-32     	; 0x1c36 <udd_ctrl_endofrequest>
    1c56:	a8 df       	rcall	.-176    	; 0x1ba8 <udd_ctrl_init>
    1c58:	60 c0       	rjmp	.+192    	; 0x1d1a <udd_ctrl_in_sent+0xd4>
    1c5a:	80 91 ab 23 	lds	r24, 0x23AB
    1c5e:	90 91 ac 23 	lds	r25, 0x23AC
    1c62:	c0 91 13 24 	lds	r28, 0x2413
    1c66:	d0 91 14 24 	lds	r29, 0x2414
    1c6a:	c8 1b       	sub	r28, r24
    1c6c:	d9 0b       	sbc	r29, r25
    1c6e:	71 f5       	brne	.+92     	; 0x1ccc <udd_ctrl_in_sent+0x86>
    1c70:	20 91 ad 23 	lds	r18, 0x23AD
    1c74:	30 91 ae 23 	lds	r19, 0x23AE
    1c78:	82 0f       	add	r24, r18
    1c7a:	93 1f       	adc	r25, r19
    1c7c:	80 93 ad 23 	sts	0x23AD, r24
    1c80:	90 93 ae 23 	sts	0x23AE, r25
    1c84:	20 91 0f 24 	lds	r18, 0x240F
    1c88:	30 91 10 24 	lds	r19, 0x2410
    1c8c:	82 17       	cp	r24, r18
    1c8e:	93 07       	cpc	r25, r19
    1c90:	21 f0       	breq	.+8      	; 0x1c9a <udd_ctrl_in_sent+0x54>
    1c92:	80 91 c6 22 	lds	r24, 0x22C6
    1c96:	88 23       	and	r24, r24
    1c98:	41 f0       	breq	.+16     	; 0x1caa <udd_ctrl_in_sent+0x64>
    1c9a:	84 e0       	ldi	r24, 0x04	; 4
    1c9c:	80 93 af 23 	sts	0x23AF, r24
    1ca0:	ec eb       	ldi	r30, 0xBC	; 188
    1ca2:	f3 e2       	ldi	r31, 0x23	; 35
    1ca4:	02 e0       	ldi	r16, 0x02	; 2
    1ca6:	06 93       	lac	Z, r16
    1ca8:	38 c0       	rjmp	.+112    	; 0x1d1a <udd_ctrl_in_sent+0xd4>
    1caa:	e0 91 17 24 	lds	r30, 0x2417
    1cae:	f0 91 18 24 	lds	r31, 0x2418
    1cb2:	30 97       	sbiw	r30, 0x00	; 0
    1cb4:	99 f0       	breq	.+38     	; 0x1cdc <udd_ctrl_in_sent+0x96>
    1cb6:	09 95       	icall
    1cb8:	88 23       	and	r24, r24
    1cba:	81 f0       	breq	.+32     	; 0x1cdc <udd_ctrl_in_sent+0x96>
    1cbc:	10 92 ab 23 	sts	0x23AB, r1
    1cc0:	10 92 ac 23 	sts	0x23AC, r1
    1cc4:	c0 91 13 24 	lds	r28, 0x2413
    1cc8:	d0 91 14 24 	lds	r29, 0x2414
    1ccc:	c0 34       	cpi	r28, 0x40	; 64
    1cce:	d1 05       	cpc	r29, r1
    1cd0:	28 f0       	brcs	.+10     	; 0x1cdc <udd_ctrl_in_sent+0x96>
    1cd2:	10 92 c6 22 	sts	0x22C6, r1
    1cd6:	c0 e4       	ldi	r28, 0x40	; 64
    1cd8:	d0 e0       	ldi	r29, 0x00	; 0
    1cda:	03 c0       	rjmp	.+6      	; 0x1ce2 <udd_ctrl_in_sent+0x9c>
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	80 93 c6 22 	sts	0x22C6, r24
    1ce2:	c0 93 c6 23 	sts	0x23C6, r28
    1ce6:	d0 93 c7 23 	sts	0x23C7, r29
    1cea:	80 91 ab 23 	lds	r24, 0x23AB
    1cee:	90 91 ac 23 	lds	r25, 0x23AC
    1cf2:	20 91 11 24 	lds	r18, 0x2411
    1cf6:	30 91 12 24 	lds	r19, 0x2412
    1cfa:	28 0f       	add	r18, r24
    1cfc:	39 1f       	adc	r19, r25
    1cfe:	20 93 c8 23 	sts	0x23C8, r18
    1d02:	30 93 c9 23 	sts	0x23C9, r19
    1d06:	c8 0f       	add	r28, r24
    1d08:	d9 1f       	adc	r29, r25
    1d0a:	c0 93 ab 23 	sts	0x23AB, r28
    1d0e:	d0 93 ac 23 	sts	0x23AC, r29
    1d12:	e4 ec       	ldi	r30, 0xC4	; 196
    1d14:	f3 e2       	ldi	r31, 0x23	; 35
    1d16:	02 e0       	ldi	r16, 0x02	; 2
    1d18:	06 93       	lac	Z, r16
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	0f 91       	pop	r16
    1d20:	08 95       	ret

00001d22 <udd_ep_get_size>:
    1d22:	fc 01       	movw	r30, r24
    1d24:	81 81       	ldd	r24, Z+1	; 0x01
    1d26:	87 70       	andi	r24, 0x07	; 7
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	31 97       	sbiw	r30, 0x01	; 1
    1d2e:	e7 30       	cpi	r30, 0x07	; 7
    1d30:	f1 05       	cpc	r31, r1
    1d32:	20 f4       	brcc	.+8      	; 0x1d3c <udd_ep_get_size+0x1a>
    1d34:	e2 50       	subi	r30, 0x02	; 2
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	0c 94 12 24 	jmp	0x4824	; 0x4824 <__tablejump2__>
    1d3c:	88 e0       	ldi	r24, 0x08	; 8
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	08 95       	ret
    1d42:	80 e2       	ldi	r24, 0x20	; 32
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	08 95       	ret
    1d48:	80 e4       	ldi	r24, 0x40	; 64
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	08 95       	ret
    1d4e:	80 e8       	ldi	r24, 0x80	; 128
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	08 95       	ret
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	91 e0       	ldi	r25, 0x01	; 1
    1d58:	08 95       	ret
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	08 95       	ret
    1d60:	8f ef       	ldi	r24, 0xFF	; 255
    1d62:	93 e0       	ldi	r25, 0x03	; 3
    1d64:	08 95       	ret
    1d66:	80 e1       	ldi	r24, 0x10	; 16
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	08 95       	ret

00001d6c <udd_ep_get_job>:
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	2f 70       	andi	r18, 0x0F	; 15
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	22 0f       	add	r18, r18
    1d74:	33 1f       	adc	r19, r19
    1d76:	99 27       	eor	r25, r25
    1d78:	87 fd       	sbrc	r24, 7
    1d7a:	90 95       	com	r25
    1d7c:	88 27       	eor	r24, r24
    1d7e:	99 0f       	add	r25, r25
    1d80:	88 1f       	adc	r24, r24
    1d82:	99 27       	eor	r25, r25
    1d84:	82 0f       	add	r24, r18
    1d86:	93 1f       	adc	r25, r19
    1d88:	02 97       	sbiw	r24, 0x02	; 2
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	22 0f       	add	r18, r18
    1d8e:	33 1f       	adc	r19, r19
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	22 0f       	add	r18, r18
    1d96:	33 1f       	adc	r19, r19
    1d98:	82 0f       	add	r24, r18
    1d9a:	93 1f       	adc	r25, r19
    1d9c:	89 5b       	subi	r24, 0xB9	; 185
    1d9e:	9c 4d       	sbci	r25, 0xDC	; 220
    1da0:	08 95       	ret

00001da2 <udd_ctrl_interrupt_tc_setup>:
    1da2:	0f 93       	push	r16
    1da4:	cf 93       	push	r28
    1da6:	80 91 cc 04 	lds	r24, 0x04CC
    1daa:	80 ff       	sbrs	r24, 0
    1dac:	63 c0       	rjmp	.+198    	; 0x1e74 <udd_ctrl_interrupt_tc_setup+0xd2>
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	80 93 cc 04 	sts	0x04CC, r24
    1db4:	ec eb       	ldi	r30, 0xBC	; 188
    1db6:	f3 e2       	ldi	r31, 0x23	; 35
    1db8:	00 e8       	ldi	r16, 0x80	; 128
    1dba:	06 93       	lac	Z, r16
    1dbc:	e4 ec       	ldi	r30, 0xC4	; 196
    1dbe:	f3 e2       	ldi	r31, 0x23	; 35
    1dc0:	00 e8       	ldi	r16, 0x80	; 128
    1dc2:	06 93       	lac	Z, r16
    1dc4:	80 93 ca 04 	sts	0x04CA, r24
    1dc8:	ec eb       	ldi	r30, 0xBC	; 188
    1dca:	f3 e2       	ldi	r31, 0x23	; 35
    1dcc:	00 e1       	ldi	r16, 0x10	; 16
    1dce:	06 93       	lac	Z, r16
    1dd0:	80 91 af 23 	lds	r24, 0x23AF
    1dd4:	88 23       	and	r24, r24
    1dd6:	29 f0       	breq	.+10     	; 0x1de2 <udd_ctrl_interrupt_tc_setup+0x40>
    1dd8:	83 50       	subi	r24, 0x03	; 3
    1dda:	82 30       	cpi	r24, 0x02	; 2
    1ddc:	08 f4       	brcc	.+2      	; 0x1de0 <udd_ctrl_interrupt_tc_setup+0x3e>
    1dde:	2b df       	rcall	.-426    	; 0x1c36 <udd_ctrl_endofrequest>
    1de0:	e3 de       	rcall	.-570    	; 0x1ba8 <udd_ctrl_init>
    1de2:	80 91 be 23 	lds	r24, 0x23BE
    1de6:	90 91 bf 23 	lds	r25, 0x23BF
    1dea:	08 97       	sbiw	r24, 0x08	; 8
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <udd_ctrl_interrupt_tc_setup+0x4e>
    1dee:	44 c0       	rjmp	.+136    	; 0x1e78 <udd_ctrl_interrupt_tc_setup+0xd6>
    1df0:	88 e0       	ldi	r24, 0x08	; 8
    1df2:	eb e6       	ldi	r30, 0x6B	; 107
    1df4:	f3 e2       	ldi	r31, 0x23	; 35
    1df6:	a9 e0       	ldi	r26, 0x09	; 9
    1df8:	b4 e2       	ldi	r27, 0x24	; 36
    1dfa:	01 90       	ld	r0, Z+
    1dfc:	0d 92       	st	X+, r0
    1dfe:	8a 95       	dec	r24
    1e00:	e1 f7       	brne	.-8      	; 0x1dfa <udd_ctrl_interrupt_tc_setup+0x58>
    1e02:	e8 ec       	ldi	r30, 0xC8	; 200
    1e04:	f4 e0       	ldi	r31, 0x04	; 4
    1e06:	80 81       	ld	r24, Z
    1e08:	80 62       	ori	r24, 0x20	; 32
    1e0a:	80 83       	st	Z, r24
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 62       	ori	r24, 0x20	; 32
    1e10:	80 83       	st	Z, r24
    1e12:	0e 94 5f 05 	call	0xabe	; 0xabe <udc_process_setup>
    1e16:	c8 2f       	mov	r28, r24
    1e18:	81 11       	cpse	r24, r1
    1e1a:	03 c0       	rjmp	.+6      	; 0x1e22 <udd_ctrl_interrupt_tc_setup+0x80>
    1e1c:	f0 de       	rcall	.-544    	; 0x1bfe <udd_ctrl_stall_data>
    1e1e:	c1 e0       	ldi	r28, 0x01	; 1
    1e20:	2c c0       	rjmp	.+88     	; 0x1e7a <udd_ctrl_interrupt_tc_setup+0xd8>
    1e22:	80 91 09 24 	lds	r24, 0x2409
    1e26:	88 23       	and	r24, r24
    1e28:	6c f4       	brge	.+26     	; 0x1e44 <udd_ctrl_interrupt_tc_setup+0xa2>
    1e2a:	10 92 ad 23 	sts	0x23AD, r1
    1e2e:	10 92 ae 23 	sts	0x23AE, r1
    1e32:	10 92 ab 23 	sts	0x23AB, r1
    1e36:	10 92 ac 23 	sts	0x23AC, r1
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	80 93 af 23 	sts	0x23AF, r24
    1e40:	02 df       	rcall	.-508    	; 0x1c46 <udd_ctrl_in_sent>
    1e42:	1b c0       	rjmp	.+54     	; 0x1e7a <udd_ctrl_interrupt_tc_setup+0xd8>
    1e44:	20 91 0f 24 	lds	r18, 0x240F
    1e48:	30 91 10 24 	lds	r19, 0x2410
    1e4c:	23 2b       	or	r18, r19
    1e4e:	11 f4       	brne	.+4      	; 0x1e54 <udd_ctrl_interrupt_tc_setup+0xb2>
    1e50:	e4 de       	rcall	.-568    	; 0x1c1a <udd_ctrl_send_zlp_in>
    1e52:	13 c0       	rjmp	.+38     	; 0x1e7a <udd_ctrl_interrupt_tc_setup+0xd8>
    1e54:	10 92 ad 23 	sts	0x23AD, r1
    1e58:	10 92 ae 23 	sts	0x23AE, r1
    1e5c:	10 92 ab 23 	sts	0x23AB, r1
    1e60:	10 92 ac 23 	sts	0x23AC, r1
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	80 93 af 23 	sts	0x23AF, r24
    1e6a:	ec eb       	ldi	r30, 0xBC	; 188
    1e6c:	f3 e2       	ldi	r31, 0x23	; 35
    1e6e:	02 e0       	ldi	r16, 0x02	; 2
    1e70:	06 93       	lac	Z, r16
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <udd_ctrl_interrupt_tc_setup+0xd8>
    1e74:	c0 e0       	ldi	r28, 0x00	; 0
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <udd_ctrl_interrupt_tc_setup+0xd8>
    1e78:	c1 e0       	ldi	r28, 0x01	; 1
    1e7a:	8c 2f       	mov	r24, r28
    1e7c:	cf 91       	pop	r28
    1e7e:	0f 91       	pop	r16
    1e80:	08 95       	ret

00001e82 <udd_ep_trans_complet>:
    1e82:	bf 92       	push	r11
    1e84:	cf 92       	push	r12
    1e86:	df 92       	push	r13
    1e88:	ef 92       	push	r14
    1e8a:	ff 92       	push	r15
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	b8 2e       	mov	r11, r24
    1e96:	6a df       	rcall	.-300    	; 0x1d6c <udd_ep_get_job>
    1e98:	ec 01       	movw	r28, r24
    1e9a:	1b 2d       	mov	r17, r11
    1e9c:	11 1f       	adc	r17, r17
    1e9e:	11 27       	eor	r17, r17
    1ea0:	11 1f       	adc	r17, r17
    1ea2:	8b 2d       	mov	r24, r11
    1ea4:	8f 70       	andi	r24, 0x0F	; 15
    1ea6:	e8 2e       	mov	r14, r24
    1ea8:	f1 2c       	mov	r15, r1
    1eaa:	ee 0c       	add	r14, r14
    1eac:	ff 1c       	adc	r15, r15
    1eae:	e1 0e       	add	r14, r17
    1eb0:	f1 1c       	adc	r15, r1
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	24 54       	subi	r18, 0x44	; 68
    1ec4:	3c 4d       	sbci	r19, 0xDC	; 220
    1ec6:	79 01       	movw	r14, r18
    1ec8:	c9 01       	movw	r24, r18
    1eca:	2b df       	rcall	.-426    	; 0x1d22 <udd_ep_get_size>
    1ecc:	6c 01       	movw	r12, r24
    1ece:	11 23       	and	r17, r17
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <udd_ep_trans_complet+0x52>
    1ed2:	5b c0       	rjmp	.+182    	; 0x1f8a <udd_ep_trans_complet+0x108>
    1ed4:	d7 01       	movw	r26, r14
    1ed6:	16 96       	adiw	r26, 0x06	; 6
    1ed8:	2d 91       	ld	r18, X+
    1eda:	3c 91       	ld	r19, X
    1edc:	17 97       	sbiw	r26, 0x07	; 7
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	28 0f       	add	r18, r24
    1ee4:	39 1f       	adc	r19, r25
    1ee6:	2d 83       	std	Y+5, r18	; 0x05
    1ee8:	3e 83       	std	Y+6, r19	; 0x06
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	28 17       	cp	r18, r24
    1ef0:	39 07       	cpc	r19, r25
    1ef2:	c9 f1       	breq	.+114    	; 0x1f66 <udd_ep_trans_complet+0xe4>
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e2 1b       	sub	r30, r18
    1ef8:	f3 0b       	sbc	r31, r19
    1efa:	9f 01       	movw	r18, r30
    1efc:	21 15       	cp	r18, r1
    1efe:	f4 e0       	ldi	r31, 0x04	; 4
    1f00:	3f 07       	cpc	r19, r31
    1f02:	40 f0       	brcs	.+16     	; 0x1f14 <udd_ep_trans_complet+0x92>
    1f04:	2f ef       	ldi	r18, 0xFF	; 255
    1f06:	33 e0       	ldi	r19, 0x03	; 3
    1f08:	c9 01       	movw	r24, r18
    1f0a:	b6 01       	movw	r22, r12
    1f0c:	0e 94 ad 23 	call	0x475a	; 0x475a <__udivmodhi4>
    1f10:	28 1b       	sub	r18, r24
    1f12:	39 0b       	sbc	r19, r25
    1f14:	88 81       	ld	r24, Y
    1f16:	81 ff       	sbrs	r24, 1
    1f18:	0a c0       	rjmp	.+20     	; 0x1f2e <udd_ep_trans_complet+0xac>
    1f1a:	c9 01       	movw	r24, r18
    1f1c:	b6 01       	movw	r22, r12
    1f1e:	0e 94 ad 23 	call	0x475a	; 0x475a <__udivmodhi4>
    1f22:	41 e0       	ldi	r20, 0x01	; 1
    1f24:	89 2b       	or	r24, r25
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <udd_ep_trans_complet+0xa8>
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	94 2f       	mov	r25, r20
    1f2c:	01 c0       	rjmp	.+2      	; 0x1f30 <udd_ep_trans_complet+0xae>
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	88 81       	ld	r24, Y
    1f32:	90 fb       	bst	r25, 0
    1f34:	81 f9       	bld	r24, 1
    1f36:	88 83       	st	Y, r24
    1f38:	d7 01       	movw	r26, r14
    1f3a:	16 96       	adiw	r26, 0x06	; 6
    1f3c:	1d 92       	st	X+, r1
    1f3e:	1c 92       	st	X, r1
    1f40:	17 97       	sbiw	r26, 0x07	; 7
    1f42:	12 96       	adiw	r26, 0x02	; 2
    1f44:	2d 93       	st	X+, r18
    1f46:	3c 93       	st	X, r19
    1f48:	13 97       	sbiw	r26, 0x03	; 3
    1f4a:	29 81       	ldd	r18, Y+1	; 0x01
    1f4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	82 0f       	add	r24, r18
    1f54:	93 1f       	adc	r25, r19
    1f56:	14 96       	adiw	r26, 0x04	; 4
    1f58:	8d 93       	st	X+, r24
    1f5a:	9c 93       	st	X, r25
    1f5c:	15 97       	sbiw	r26, 0x05	; 5
    1f5e:	f7 01       	movw	r30, r14
    1f60:	02 e0       	ldi	r16, 0x02	; 2
    1f62:	06 93       	lac	Z, r16
    1f64:	98 c0       	rjmp	.+304    	; 0x2096 <udd_ep_trans_complet+0x214>
    1f66:	88 81       	ld	r24, Y
    1f68:	81 ff       	sbrs	r24, 1
    1f6a:	87 c0       	rjmp	.+270    	; 0x207a <udd_ep_trans_complet+0x1f8>
    1f6c:	8d 7f       	andi	r24, 0xFD	; 253
    1f6e:	88 83       	st	Y, r24
    1f70:	d7 01       	movw	r26, r14
    1f72:	16 96       	adiw	r26, 0x06	; 6
    1f74:	1d 92       	st	X+, r1
    1f76:	1c 92       	st	X, r1
    1f78:	17 97       	sbiw	r26, 0x07	; 7
    1f7a:	12 96       	adiw	r26, 0x02	; 2
    1f7c:	1d 92       	st	X+, r1
    1f7e:	1c 92       	st	X, r1
    1f80:	13 97       	sbiw	r26, 0x03	; 3
    1f82:	f7 01       	movw	r30, r14
    1f84:	02 e0       	ldi	r16, 0x02	; 2
    1f86:	06 93       	lac	Z, r16
    1f88:	86 c0       	rjmp	.+268    	; 0x2096 <udd_ep_trans_complet+0x214>
    1f8a:	d7 01       	movw	r26, r14
    1f8c:	12 96       	adiw	r26, 0x02	; 2
    1f8e:	0d 91       	ld	r16, X+
    1f90:	1c 91       	ld	r17, X
    1f92:	13 97       	sbiw	r26, 0x03	; 3
    1f94:	88 81       	ld	r24, Y
    1f96:	82 ff       	sbrs	r24, 2
    1f98:	15 c0       	rjmp	.+42     	; 0x1fc4 <udd_ep_trans_complet+0x142>
    1f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	b6 01       	movw	r22, r12
    1fa8:	0e 94 ad 23 	call	0x475a	; 0x475a <__udivmodhi4>
    1fac:	b0 e4       	ldi	r27, 0x40	; 64
    1fae:	bb 9e       	mul	r11, r27
    1fb0:	b0 01       	movw	r22, r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	69 57       	subi	r22, 0x79	; 121
    1fb6:	7d 4d       	sbci	r23, 0xDD	; 221
    1fb8:	ac 01       	movw	r20, r24
    1fba:	cf 01       	movw	r24, r30
    1fbc:	82 0f       	add	r24, r18
    1fbe:	93 1f       	adc	r25, r19
    1fc0:	0e 94 78 24 	call	0x48f0	; 0x48f0 <memcpy>
    1fc4:	2d 81       	ldd	r18, Y+5	; 0x05
    1fc6:	3e 81       	ldd	r19, Y+6	; 0x06
    1fc8:	20 0f       	add	r18, r16
    1fca:	31 1f       	adc	r19, r17
    1fcc:	2d 83       	std	Y+5, r18	; 0x05
    1fce:	3e 83       	std	Y+6, r19	; 0x06
    1fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd4:	e2 17       	cp	r30, r18
    1fd6:	f3 07       	cpc	r31, r19
    1fd8:	10 f4       	brcc	.+4      	; 0x1fde <udd_ep_trans_complet+0x15c>
    1fda:	ed 83       	std	Y+5, r30	; 0x05
    1fdc:	fe 83       	std	Y+6, r31	; 0x06
    1fde:	d7 01       	movw	r26, r14
    1fe0:	16 96       	adiw	r26, 0x06	; 6
    1fe2:	8d 91       	ld	r24, X+
    1fe4:	9c 91       	ld	r25, X
    1fe6:	17 97       	sbiw	r26, 0x07	; 7
    1fe8:	80 17       	cp	r24, r16
    1fea:	91 07       	cpc	r25, r17
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <udd_ep_trans_complet+0x16e>
    1fee:	45 c0       	rjmp	.+138    	; 0x207a <udd_ep_trans_complet+0x1f8>
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	e8 17       	cp	r30, r24
    1ff6:	f9 07       	cpc	r31, r25
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <udd_ep_trans_complet+0x17a>
    1ffa:	3f c0       	rjmp	.+126    	; 0x207a <udd_ep_trans_complet+0x1f8>
    1ffc:	e8 1b       	sub	r30, r24
    1ffe:	f9 0b       	sbc	r31, r25
    2000:	e1 15       	cp	r30, r1
    2002:	b4 e0       	ldi	r27, 0x04	; 4
    2004:	fb 07       	cpc	r31, r27
    2006:	48 f0       	brcs	.+18     	; 0x201a <udd_ep_trans_complet+0x198>
    2008:	ef ef       	ldi	r30, 0xFF	; 255
    200a:	f3 e0       	ldi	r31, 0x03	; 3
    200c:	cf 01       	movw	r24, r30
    200e:	b6 01       	movw	r22, r12
    2010:	0e 94 ad 23 	call	0x475a	; 0x475a <__udivmodhi4>
    2014:	e8 1b       	sub	r30, r24
    2016:	f9 0b       	sbc	r31, r25
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <udd_ep_trans_complet+0x1a4>
    201a:	cf 01       	movw	r24, r30
    201c:	b6 01       	movw	r22, r12
    201e:	0e 94 ad 23 	call	0x475a	; 0x475a <__udivmodhi4>
    2022:	e8 1b       	sub	r30, r24
    2024:	f9 0b       	sbc	r31, r25
    2026:	d7 01       	movw	r26, r14
    2028:	12 96       	adiw	r26, 0x02	; 2
    202a:	1d 92       	st	X+, r1
    202c:	1c 92       	st	X, r1
    202e:	13 97       	sbiw	r26, 0x03	; 3
    2030:	ec 15       	cp	r30, r12
    2032:	fd 05       	cpc	r31, r13
    2034:	78 f4       	brcc	.+30     	; 0x2054 <udd_ep_trans_complet+0x1d2>
    2036:	88 81       	ld	r24, Y
    2038:	84 60       	ori	r24, 0x04	; 4
    203a:	88 83       	st	Y, r24
    203c:	b0 e4       	ldi	r27, 0x40	; 64
    203e:	bb 9e       	mul	r11, r27
    2040:	c0 01       	movw	r24, r0
    2042:	11 24       	eor	r1, r1
    2044:	89 57       	subi	r24, 0x79	; 121
    2046:	9d 4d       	sbci	r25, 0xDD	; 221
    2048:	f7 01       	movw	r30, r14
    204a:	84 83       	std	Z+4, r24	; 0x04
    204c:	95 83       	std	Z+5, r25	; 0x05
    204e:	c6 82       	std	Z+6, r12	; 0x06
    2050:	d7 82       	std	Z+7, r13	; 0x07
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <udd_ep_trans_complet+0x1f0>
    2054:	29 81       	ldd	r18, Y+1	; 0x01
    2056:	3a 81       	ldd	r19, Y+2	; 0x02
    2058:	8d 81       	ldd	r24, Y+5	; 0x05
    205a:	9e 81       	ldd	r25, Y+6	; 0x06
    205c:	82 0f       	add	r24, r18
    205e:	93 1f       	adc	r25, r19
    2060:	d7 01       	movw	r26, r14
    2062:	14 96       	adiw	r26, 0x04	; 4
    2064:	8d 93       	st	X+, r24
    2066:	9c 93       	st	X, r25
    2068:	15 97       	sbiw	r26, 0x05	; 5
    206a:	16 96       	adiw	r26, 0x06	; 6
    206c:	ed 93       	st	X+, r30
    206e:	fc 93       	st	X, r31
    2070:	17 97       	sbiw	r26, 0x07	; 7
    2072:	f7 01       	movw	r30, r14
    2074:	02 e0       	ldi	r16, 0x02	; 2
    2076:	06 93       	lac	Z, r16
    2078:	0e c0       	rjmp	.+28     	; 0x2096 <udd_ep_trans_complet+0x214>
    207a:	88 81       	ld	r24, Y
    207c:	80 ff       	sbrs	r24, 0
    207e:	0b c0       	rjmp	.+22     	; 0x2096 <udd_ep_trans_complet+0x214>
    2080:	8e 7f       	andi	r24, 0xFE	; 254
    2082:	88 83       	st	Y, r24
    2084:	ef 81       	ldd	r30, Y+7	; 0x07
    2086:	f8 85       	ldd	r31, Y+8	; 0x08
    2088:	30 97       	sbiw	r30, 0x00	; 0
    208a:	29 f0       	breq	.+10     	; 0x2096 <udd_ep_trans_complet+0x214>
    208c:	6d 81       	ldd	r22, Y+5	; 0x05
    208e:	7e 81       	ldd	r23, Y+6	; 0x06
    2090:	4b 2d       	mov	r20, r11
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	09 95       	icall
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	bf 90       	pop	r11
    20a8:	08 95       	ret

000020aa <udd_attach>:
    20aa:	cf 93       	push	r28
    20ac:	cf b7       	in	r28, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	5b dd       	rcall	.-1354   	; 0x1b6a <udd_sleep_mode>
    20b4:	ea ec       	ldi	r30, 0xCA	; 202
    20b6:	f4 e0       	ldi	r31, 0x04	; 4
    20b8:	80 e4       	ldi	r24, 0x40	; 64
    20ba:	80 83       	st	Z, r24
    20bc:	80 e2       	ldi	r24, 0x20	; 32
    20be:	80 83       	st	Z, r24
    20c0:	e1 ec       	ldi	r30, 0xC1	; 193
    20c2:	f4 e0       	ldi	r31, 0x04	; 4
    20c4:	80 81       	ld	r24, Z
    20c6:	81 60       	ori	r24, 0x01	; 1
    20c8:	80 83       	st	Z, r24
    20ca:	a9 ec       	ldi	r26, 0xC9	; 201
    20cc:	b4 e0       	ldi	r27, 0x04	; 4
    20ce:	8c 91       	ld	r24, X
    20d0:	82 60       	ori	r24, 0x02	; 2
    20d2:	8c 93       	st	X, r24
    20d4:	e8 ec       	ldi	r30, 0xC8	; 200
    20d6:	f4 e0       	ldi	r31, 0x04	; 4
    20d8:	80 81       	ld	r24, Z
    20da:	80 64       	ori	r24, 0x40	; 64
    20dc:	80 83       	st	Z, r24
    20de:	8c 91       	ld	r24, X
    20e0:	81 60       	ori	r24, 0x01	; 1
    20e2:	8c 93       	st	X, r24
    20e4:	80 81       	ld	r24, Z
    20e6:	80 68       	ori	r24, 0x80	; 128
    20e8:	80 83       	st	Z, r24
    20ea:	cf bf       	out	0x3f, r28	; 63
    20ec:	cf 91       	pop	r28
    20ee:	08 95       	ret

000020f0 <udd_enable>:
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	c0 e6       	ldi	r28, 0x60	; 96
    20f6:	d0 e0       	ldi	r29, 0x00	; 0
    20f8:	18 82       	st	Y, r1
    20fa:	80 e3       	ldi	r24, 0x30	; 48
    20fc:	3c d4       	rcall	.+2168   	; 0x2976 <sysclk_enable_usb>
    20fe:	e0 ec       	ldi	r30, 0xC0	; 192
    2100:	f4 e0       	ldi	r31, 0x04	; 4
    2102:	80 81       	ld	r24, Z
    2104:	80 64       	ori	r24, 0x40	; 64
    2106:	80 83       	st	Z, r24
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	88 83       	st	Y, r24
    210c:	cf b7       	in	r28, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	10 92 bd 23 	sts	0x23BD, r1
    2114:	10 92 c5 23 	sts	0x23C5, r1
    2118:	10 92 cd 23 	sts	0x23CD, r1
    211c:	10 92 d5 23 	sts	0x23D5, r1
    2120:	10 92 dd 23 	sts	0x23DD, r1
    2124:	10 92 e5 23 	sts	0x23E5, r1
    2128:	e7 e4       	ldi	r30, 0x47	; 71
    212a:	f3 e2       	ldi	r31, 0x23	; 35
    212c:	80 81       	ld	r24, Z
    212e:	8e 7f       	andi	r24, 0xFE	; 254
    2130:	80 83       	st	Z, r24
    2132:	e0 e5       	ldi	r30, 0x50	; 80
    2134:	f3 e2       	ldi	r31, 0x23	; 35
    2136:	80 81       	ld	r24, Z
    2138:	8e 7f       	andi	r24, 0xFE	; 254
    213a:	80 83       	st	Z, r24
    213c:	e9 e5       	ldi	r30, 0x59	; 89
    213e:	f3 e2       	ldi	r31, 0x23	; 35
    2140:	80 81       	ld	r24, Z
    2142:	8e 7f       	andi	r24, 0xFE	; 254
    2144:	80 83       	st	Z, r24
    2146:	e2 e6       	ldi	r30, 0x62	; 98
    2148:	f3 e2       	ldi	r31, 0x23	; 35
    214a:	80 81       	ld	r24, Z
    214c:	8e 7f       	andi	r24, 0xFE	; 254
    214e:	80 83       	st	Z, r24
    2150:	6a e1       	ldi	r22, 0x1A	; 26
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	45 d4       	rcall	.+2186   	; 0x29e2 <nvm_read_byte>
    2158:	8f 3f       	cpi	r24, 0xFF	; 255
    215a:	19 f0       	breq	.+6      	; 0x2162 <udd_enable+0x72>
    215c:	80 93 fa 04 	sts	0x04FA, r24
    2160:	03 c0       	rjmp	.+6      	; 0x2168 <udd_enable+0x78>
    2162:	8f e1       	ldi	r24, 0x1F	; 31
    2164:	80 93 fa 04 	sts	0x04FA, r24
    2168:	6b e1       	ldi	r22, 0x1B	; 27
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	39 d4       	rcall	.+2162   	; 0x29e2 <nvm_read_byte>
    2170:	8f 3f       	cpi	r24, 0xFF	; 255
    2172:	19 f0       	breq	.+6      	; 0x217a <udd_enable+0x8a>
    2174:	80 93 fb 04 	sts	0x04FB, r24
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <udd_enable+0x90>
    217a:	8f e1       	ldi	r24, 0x1F	; 31
    217c:	80 93 fb 04 	sts	0x04FB, r24
    2180:	e0 ec       	ldi	r30, 0xC0	; 192
    2182:	f4 e0       	ldi	r31, 0x04	; 4
    2184:	80 81       	ld	r24, Z
    2186:	82 60       	ori	r24, 0x02	; 2
    2188:	80 83       	st	Z, r24
    218a:	80 81       	ld	r24, Z
    218c:	80 68       	ori	r24, 0x80	; 128
    218e:	80 83       	st	Z, r24
    2190:	80 81       	ld	r24, Z
    2192:	80 61       	ori	r24, 0x10	; 16
    2194:	80 83       	st	Z, r24
    2196:	8c eb       	ldi	r24, 0xBC	; 188
    2198:	93 e2       	ldi	r25, 0x23	; 35
    219a:	86 83       	std	Z+6, r24	; 0x06
    219c:	97 83       	std	Z+7, r25	; 0x07
    219e:	80 81       	ld	r24, Z
    21a0:	80 62       	ori	r24, 0x20	; 32
    21a2:	80 83       	st	Z, r24
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	80 93 c5 04 	sts	0x04C5, r24
    21aa:	e8 ec       	ldi	r30, 0xC8	; 200
    21ac:	f4 e0       	ldi	r31, 0x04	; 4
    21ae:	80 81       	ld	r24, Z
    21b0:	81 60       	ori	r24, 0x01	; 1
    21b2:	80 83       	st	Z, r24
    21b4:	10 92 f0 23 	sts	0x23F0, r1
    21b8:	8f b7       	in	r24, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	ee e1       	ldi	r30, 0x1E	; 30
    21be:	f4 e2       	ldi	r31, 0x24	; 36
    21c0:	90 81       	ld	r25, Z
    21c2:	9f 5f       	subi	r25, 0xFF	; 255
    21c4:	90 83       	st	Z, r25
    21c6:	8f bf       	out	0x3f, r24	; 63
    21c8:	70 df       	rcall	.-288    	; 0x20aa <udd_attach>
    21ca:	cf bf       	out	0x3f, r28	; 63
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	08 95       	ret

000021d2 <udd_is_high_speed>:
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	08 95       	ret

000021d6 <udd_set_address>:
    21d6:	80 93 c3 04 	sts	0x04C3, r24
    21da:	08 95       	ret

000021dc <udd_getaddress>:
    21dc:	80 91 c3 04 	lds	r24, 0x04C3
    21e0:	08 95       	ret

000021e2 <udd_get_frame_number>:
    21e2:	80 91 ec 23 	lds	r24, 0x23EC
    21e6:	90 91 ed 23 	lds	r25, 0x23ED
    21ea:	08 95       	ret

000021ec <udd_get_micro_frame_number>:
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	08 95       	ret

000021f2 <udd_set_setup_payload>:
    21f2:	80 93 11 24 	sts	0x2411, r24
    21f6:	90 93 12 24 	sts	0x2412, r25
    21fa:	60 93 13 24 	sts	0x2413, r22
    21fe:	70 93 14 24 	sts	0x2414, r23
    2202:	08 95       	ret

00002204 <udd_ep_alloc>:
    2204:	e8 2f       	mov	r30, r24
    2206:	ef 70       	andi	r30, 0x0F	; 15
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	99 27       	eor	r25, r25
    2210:	87 fd       	sbrc	r24, 7
    2212:	90 95       	com	r25
    2214:	88 27       	eor	r24, r24
    2216:	99 0f       	add	r25, r25
    2218:	88 1f       	adc	r24, r24
    221a:	99 27       	eor	r25, r25
    221c:	e8 0f       	add	r30, r24
    221e:	f9 1f       	adc	r31, r25
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	ee 0f       	add	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	ee 0f       	add	r30, r30
    222a:	ff 1f       	adc	r31, r31
    222c:	e4 54       	subi	r30, 0x44	; 68
    222e:	fc 4d       	sbci	r31, 0xDC	; 220
    2230:	81 81       	ldd	r24, Z+1	; 0x01
    2232:	80 7c       	andi	r24, 0xC0	; 192
    2234:	09 f0       	breq	.+2      	; 0x2238 <udd_ep_alloc+0x34>
    2236:	43 c0       	rjmp	.+134    	; 0x22be <udd_ep_alloc+0xba>
    2238:	63 70       	andi	r22, 0x03	; 3
    223a:	61 30       	cpi	r22, 0x01	; 1
    223c:	29 f0       	breq	.+10     	; 0x2248 <udd_ep_alloc+0x44>
    223e:	10 f4       	brcc	.+4      	; 0x2244 <udd_ep_alloc+0x40>
    2240:	80 e4       	ldi	r24, 0x40	; 64
    2242:	03 c0       	rjmp	.+6      	; 0x224a <udd_ep_alloc+0x46>
    2244:	80 e8       	ldi	r24, 0x80	; 128
    2246:	01 c0       	rjmp	.+2      	; 0x224a <udd_ep_alloc+0x46>
    2248:	80 ec       	ldi	r24, 0xC0	; 192
    224a:	40 38       	cpi	r20, 0x80	; 128
    224c:	51 05       	cpc	r21, r1
    224e:	e1 f0       	breq	.+56     	; 0x2288 <udd_ep_alloc+0x84>
    2250:	50 f4       	brcc	.+20     	; 0x2266 <udd_ep_alloc+0x62>
    2252:	40 32       	cpi	r20, 0x20	; 32
    2254:	51 05       	cpc	r21, r1
    2256:	a1 f0       	breq	.+40     	; 0x2280 <udd_ep_alloc+0x7c>
    2258:	40 34       	cpi	r20, 0x40	; 64
    225a:	51 05       	cpc	r21, r1
    225c:	99 f0       	breq	.+38     	; 0x2284 <udd_ep_alloc+0x80>
    225e:	40 31       	cpi	r20, 0x10	; 16
    2260:	51 05       	cpc	r21, r1
    2262:	61 f4       	brne	.+24     	; 0x227c <udd_ep_alloc+0x78>
    2264:	19 c0       	rjmp	.+50     	; 0x2298 <udd_ep_alloc+0x94>
    2266:	41 15       	cp	r20, r1
    2268:	92 e0       	ldi	r25, 0x02	; 2
    226a:	59 07       	cpc	r21, r25
    226c:	89 f0       	breq	.+34     	; 0x2290 <udd_ep_alloc+0x8c>
    226e:	4f 3f       	cpi	r20, 0xFF	; 255
    2270:	93 e0       	ldi	r25, 0x03	; 3
    2272:	59 07       	cpc	r21, r25
    2274:	79 f0       	breq	.+30     	; 0x2294 <udd_ep_alloc+0x90>
    2276:	41 15       	cp	r20, r1
    2278:	51 40       	sbci	r21, 0x01	; 1
    227a:	41 f0       	breq	.+16     	; 0x228c <udd_ep_alloc+0x88>
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	0d c0       	rjmp	.+26     	; 0x229a <udd_ep_alloc+0x96>
    2280:	22 e0       	ldi	r18, 0x02	; 2
    2282:	0b c0       	rjmp	.+22     	; 0x229a <udd_ep_alloc+0x96>
    2284:	23 e0       	ldi	r18, 0x03	; 3
    2286:	09 c0       	rjmp	.+18     	; 0x229a <udd_ep_alloc+0x96>
    2288:	24 e0       	ldi	r18, 0x04	; 4
    228a:	07 c0       	rjmp	.+14     	; 0x229a <udd_ep_alloc+0x96>
    228c:	25 e0       	ldi	r18, 0x05	; 5
    228e:	05 c0       	rjmp	.+10     	; 0x229a <udd_ep_alloc+0x96>
    2290:	26 e0       	ldi	r18, 0x06	; 6
    2292:	03 c0       	rjmp	.+6      	; 0x229a <udd_ep_alloc+0x96>
    2294:	27 e0       	ldi	r18, 0x07	; 7
    2296:	01 c0       	rjmp	.+2      	; 0x229a <udd_ep_alloc+0x96>
    2298:	21 e0       	ldi	r18, 0x01	; 1
    229a:	11 82       	std	Z+1, r1	; 0x01
    229c:	96 e0       	ldi	r25, 0x06	; 6
    229e:	90 83       	st	Z, r25
    22a0:	82 2b       	or	r24, r18
    22a2:	81 83       	std	Z+1, r24	; 0x01
    22a4:	81 81       	ldd	r24, Z+1	; 0x01
    22a6:	80 7c       	andi	r24, 0xC0	; 192
    22a8:	80 3c       	cpi	r24, 0xC0	; 192
    22aa:	21 f4       	brne	.+8      	; 0x22b4 <udd_ep_alloc+0xb0>
    22ac:	81 81       	ldd	r24, Z+1	; 0x01
    22ae:	87 70       	andi	r24, 0x07	; 7
    22b0:	87 30       	cpi	r24, 0x07	; 7
    22b2:	39 f0       	breq	.+14     	; 0x22c2 <udd_ep_alloc+0xbe>
    22b4:	81 81       	ldd	r24, Z+1	; 0x01
    22b6:	80 62       	ori	r24, 0x20	; 32
    22b8:	81 83       	std	Z+1, r24	; 0x01
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	08 95       	ret
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	08 95       	ret
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	08 95       	ret

000022c6 <udd_ep_is_halted>:
    22c6:	e8 2f       	mov	r30, r24
    22c8:	ef 70       	andi	r30, 0x0F	; 15
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	99 27       	eor	r25, r25
    22d2:	87 fd       	sbrc	r24, 7
    22d4:	90 95       	com	r25
    22d6:	88 27       	eor	r24, r24
    22d8:	99 0f       	add	r25, r25
    22da:	88 1f       	adc	r24, r24
    22dc:	99 27       	eor	r25, r25
    22de:	e8 0f       	add	r30, r24
    22e0:	f9 1f       	adc	r31, r25
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	ee 0f       	add	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	ee 0f       	add	r30, r30
    22ec:	ff 1f       	adc	r31, r31
    22ee:	e4 54       	subi	r30, 0x44	; 68
    22f0:	fc 4d       	sbci	r31, 0xDC	; 220
    22f2:	81 81       	ldd	r24, Z+1	; 0x01
    22f4:	82 fb       	bst	r24, 2
    22f6:	88 27       	eor	r24, r24
    22f8:	80 f9       	bld	r24, 0
    22fa:	08 95       	ret

000022fc <udd_ep_clear_halt>:
    22fc:	e8 2f       	mov	r30, r24
    22fe:	ef 70       	andi	r30, 0x0F	; 15
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	28 2f       	mov	r18, r24
    2308:	33 27       	eor	r19, r19
    230a:	27 fd       	sbrc	r18, 7
    230c:	30 95       	com	r19
    230e:	22 27       	eor	r18, r18
    2310:	33 0f       	add	r19, r19
    2312:	22 1f       	adc	r18, r18
    2314:	33 27       	eor	r19, r19
    2316:	e2 0f       	add	r30, r18
    2318:	f3 1f       	adc	r31, r19
    231a:	ee 0f       	add	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
    2326:	e4 54       	subi	r30, 0x44	; 68
    2328:	fc 4d       	sbci	r31, 0xDC	; 220
    232a:	91 81       	ldd	r25, Z+1	; 0x01
    232c:	92 ff       	sbrs	r25, 2
    232e:	0e c0       	rjmp	.+28     	; 0x234c <udd_ep_clear_halt+0x50>
    2330:	91 81       	ldd	r25, Z+1	; 0x01
    2332:	9b 7f       	andi	r25, 0xFB	; 251
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	1a dd       	rcall	.-1484   	; 0x1d6c <udd_ep_get_job>
    2338:	fc 01       	movw	r30, r24
    233a:	80 81       	ld	r24, Z
    233c:	80 ff       	sbrs	r24, 0
    233e:	06 c0       	rjmp	.+12     	; 0x234c <udd_ep_clear_halt+0x50>
    2340:	8e 7f       	andi	r24, 0xFE	; 254
    2342:	80 83       	st	Z, r24
    2344:	07 80       	ldd	r0, Z+7	; 0x07
    2346:	f0 85       	ldd	r31, Z+8	; 0x08
    2348:	e0 2d       	mov	r30, r0
    234a:	09 95       	icall
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	08 95       	ret

00002350 <udd_ep_run>:
    2350:	7f 92       	push	r7
    2352:	8f 92       	push	r8
    2354:	9f 92       	push	r9
    2356:	af 92       	push	r10
    2358:	bf 92       	push	r11
    235a:	cf 92       	push	r12
    235c:	df 92       	push	r13
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	98 2e       	mov	r9, r24
    236c:	86 2e       	mov	r8, r22
    236e:	5a 01       	movw	r10, r20
    2370:	69 01       	movw	r12, r18
    2372:	fc dc       	rcall	.-1544   	; 0x1d6c <udd_ep_get_job>
    2374:	7c 01       	movw	r14, r24
    2376:	79 2c       	mov	r7, r9
    2378:	77 1c       	adc	r7, r7
    237a:	77 24       	eor	r7, r7
    237c:	77 1c       	adc	r7, r7
    237e:	c9 2d       	mov	r28, r9
    2380:	cf 70       	andi	r28, 0x0F	; 15
    2382:	d0 e0       	ldi	r29, 0x00	; 0
    2384:	cc 0f       	add	r28, r28
    2386:	dd 1f       	adc	r29, r29
    2388:	c7 0d       	add	r28, r7
    238a:	d1 1d       	adc	r29, r1
    238c:	cc 0f       	add	r28, r28
    238e:	dd 1f       	adc	r29, r29
    2390:	cc 0f       	add	r28, r28
    2392:	dd 1f       	adc	r29, r29
    2394:	cc 0f       	add	r28, r28
    2396:	dd 1f       	adc	r29, r29
    2398:	c4 54       	subi	r28, 0x44	; 68
    239a:	dc 4d       	sbci	r29, 0xDC	; 220
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	80 7c       	andi	r24, 0xC0	; 192
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <udd_ep_run+0x54>
    23a2:	4c c0       	rjmp	.+152    	; 0x243c <udd_ep_run+0xec>
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	80 7c       	andi	r24, 0xC0	; 192
    23a8:	80 3c       	cpi	r24, 0xC0	; 192
    23aa:	19 f0       	breq	.+6      	; 0x23b2 <udd_ep_run+0x62>
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	82 fd       	sbrc	r24, 2
    23b0:	47 c0       	rjmp	.+142    	; 0x2440 <udd_ep_run+0xf0>
    23b2:	8f b7       	in	r24, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	f7 01       	movw	r30, r14
    23b8:	90 81       	ld	r25, Z
    23ba:	90 ff       	sbrs	r25, 0
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <udd_ep_run+0x74>
    23be:	8f bf       	out	0x3f, r24	; 63
    23c0:	71 2c       	mov	r7, r1
    23c2:	3f c0       	rjmp	.+126    	; 0x2442 <udd_ep_run+0xf2>
    23c4:	f7 01       	movw	r30, r14
    23c6:	90 81       	ld	r25, Z
    23c8:	91 60       	ori	r25, 0x01	; 1
    23ca:	90 83       	st	Z, r25
    23cc:	8f bf       	out	0x3f, r24	; 63
    23ce:	f7 01       	movw	r30, r14
    23d0:	a1 82       	std	Z+1, r10	; 0x01
    23d2:	b2 82       	std	Z+2, r11	; 0x02
    23d4:	c3 82       	std	Z+3, r12	; 0x03
    23d6:	d4 82       	std	Z+4, r13	; 0x04
    23d8:	15 82       	std	Z+5, r1	; 0x05
    23da:	16 82       	std	Z+6, r1	; 0x06
    23dc:	07 83       	std	Z+7, r16	; 0x07
    23de:	10 87       	std	Z+8, r17	; 0x08
    23e0:	81 10       	cpse	r8, r1
    23e2:	06 c0       	rjmp	.+12     	; 0x23f0 <udd_ep_run+0xa0>
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	c1 14       	cp	r12, r1
    23e8:	d1 04       	cpc	r13, r1
    23ea:	19 f0       	breq	.+6      	; 0x23f2 <udd_ep_run+0xa2>
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <udd_ep_run+0xa2>
    23f0:	91 e0       	ldi	r25, 0x01	; 1
    23f2:	f7 01       	movw	r30, r14
    23f4:	80 81       	ld	r24, Z
    23f6:	90 fb       	bst	r25, 0
    23f8:	81 f9       	bld	r24, 1
    23fa:	8b 7f       	andi	r24, 0xFB	; 251
    23fc:	80 83       	st	Z, r24
    23fe:	77 20       	and	r7, r7
    2400:	19 f0       	breq	.+6      	; 0x2408 <udd_ep_run+0xb8>
    2402:	1e 82       	std	Y+6, r1	; 0x06
    2404:	1f 82       	std	Y+7, r1	; 0x07
    2406:	15 c0       	rjmp	.+42     	; 0x2432 <udd_ep_run+0xe2>
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	80 7c       	andi	r24, 0xC0	; 192
    240c:	80 3c       	cpi	r24, 0xC0	; 192
    240e:	69 f4       	brne	.+26     	; 0x242a <udd_ep_run+0xda>
    2410:	ce 01       	movw	r24, r28
    2412:	87 dc       	rcall	.-1778   	; 0x1d22 <udd_ep_get_size>
    2414:	bc 01       	movw	r22, r24
    2416:	c6 01       	movw	r24, r12
    2418:	0e 94 ad 23 	call	0x475a	; 0x475a <__udivmodhi4>
    241c:	89 2b       	or	r24, r25
    241e:	29 f0       	breq	.+10     	; 0x242a <udd_ep_run+0xda>
    2420:	f7 01       	movw	r30, r14
    2422:	80 81       	ld	r24, Z
    2424:	8e 7f       	andi	r24, 0xFE	; 254
    2426:	80 83       	st	Z, r24
    2428:	0c c0       	rjmp	.+24     	; 0x2442 <udd_ep_run+0xf2>
    242a:	1a 82       	std	Y+2, r1	; 0x02
    242c:	1b 82       	std	Y+3, r1	; 0x03
    242e:	1e 82       	std	Y+6, r1	; 0x06
    2430:	1f 82       	std	Y+7, r1	; 0x07
    2432:	89 2d       	mov	r24, r9
    2434:	26 dd       	rcall	.-1460   	; 0x1e82 <udd_ep_trans_complet>
    2436:	77 24       	eor	r7, r7
    2438:	73 94       	inc	r7
    243a:	03 c0       	rjmp	.+6      	; 0x2442 <udd_ep_run+0xf2>
    243c:	71 2c       	mov	r7, r1
    243e:	01 c0       	rjmp	.+2      	; 0x2442 <udd_ep_run+0xf2>
    2440:	71 2c       	mov	r7, r1
    2442:	87 2d       	mov	r24, r7
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	ff 90       	pop	r15
    244e:	ef 90       	pop	r14
    2450:	df 90       	pop	r13
    2452:	cf 90       	pop	r12
    2454:	bf 90       	pop	r11
    2456:	af 90       	pop	r10
    2458:	9f 90       	pop	r9
    245a:	8f 90       	pop	r8
    245c:	7f 90       	pop	r7
    245e:	08 95       	ret

00002460 <udd_ep_abort>:
    2460:	ff 92       	push	r15
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	18 2f       	mov	r17, r24
    246c:	f8 2e       	mov	r15, r24
    246e:	ff 1c       	adc	r15, r15
    2470:	ff 24       	eor	r15, r15
    2472:	ff 1c       	adc	r15, r15
    2474:	c8 2f       	mov	r28, r24
    2476:	cf 70       	andi	r28, 0x0F	; 15
    2478:	d0 e0       	ldi	r29, 0x00	; 0
    247a:	cc 0f       	add	r28, r28
    247c:	dd 1f       	adc	r29, r29
    247e:	cf 0d       	add	r28, r15
    2480:	d1 1d       	adc	r29, r1
    2482:	cc 0f       	add	r28, r28
    2484:	dd 1f       	adc	r29, r29
    2486:	cc 0f       	add	r28, r28
    2488:	dd 1f       	adc	r29, r29
    248a:	cc 0f       	add	r28, r28
    248c:	dd 1f       	adc	r29, r29
    248e:	c4 54       	subi	r28, 0x44	; 68
    2490:	dc 4d       	sbci	r29, 0xDC	; 220
    2492:	6c dc       	rcall	.-1832   	; 0x1d6c <udd_ep_get_job>
    2494:	dc 01       	movw	r26, r24
    2496:	fe 01       	movw	r30, r28
    2498:	02 e0       	ldi	r16, 0x02	; 2
    249a:	05 93       	las	Z, r16
    249c:	8c 91       	ld	r24, X
    249e:	80 ff       	sbrs	r24, 0
    24a0:	12 c0       	rjmp	.+36     	; 0x24c6 <udd_ep_abort+0x66>
    24a2:	8e 7f       	andi	r24, 0xFE	; 254
    24a4:	8c 93       	st	X, r24
    24a6:	17 96       	adiw	r26, 0x07	; 7
    24a8:	ed 91       	ld	r30, X+
    24aa:	fc 91       	ld	r31, X
    24ac:	18 97       	sbiw	r26, 0x08	; 8
    24ae:	30 97       	sbiw	r30, 0x00	; 0
    24b0:	51 f0       	breq	.+20     	; 0x24c6 <udd_ep_abort+0x66>
    24b2:	ff 20       	and	r15, r15
    24b4:	19 f0       	breq	.+6      	; 0x24bc <udd_ep_abort+0x5c>
    24b6:	6e 81       	ldd	r22, Y+6	; 0x06
    24b8:	7f 81       	ldd	r23, Y+7	; 0x07
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <udd_ep_abort+0x60>
    24bc:	6a 81       	ldd	r22, Y+2	; 0x02
    24be:	7b 81       	ldd	r23, Y+3	; 0x03
    24c0:	41 2f       	mov	r20, r17
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	09 95       	icall
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	08 95       	ret

000024d2 <udd_ep_free>:
    24d2:	cf 93       	push	r28
    24d4:	c8 2f       	mov	r28, r24
    24d6:	c4 df       	rcall	.-120    	; 0x2460 <udd_ep_abort>
    24d8:	ec 2f       	mov	r30, r28
    24da:	ef 70       	andi	r30, 0x0F	; 15
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	8c 2f       	mov	r24, r28
    24e4:	99 27       	eor	r25, r25
    24e6:	87 fd       	sbrc	r24, 7
    24e8:	90 95       	com	r25
    24ea:	88 27       	eor	r24, r24
    24ec:	99 0f       	add	r25, r25
    24ee:	88 1f       	adc	r24, r24
    24f0:	99 27       	eor	r25, r25
    24f2:	e8 0f       	add	r30, r24
    24f4:	f9 1f       	adc	r31, r25
    24f6:	ee 0f       	add	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	ee 0f       	add	r30, r30
    24fc:	ff 1f       	adc	r31, r31
    24fe:	ee 0f       	add	r30, r30
    2500:	ff 1f       	adc	r31, r31
    2502:	e4 54       	subi	r30, 0x44	; 68
    2504:	fc 4d       	sbci	r31, 0xDC	; 220
    2506:	11 82       	std	Z+1, r1	; 0x01
    2508:	cf 91       	pop	r28
    250a:	08 95       	ret

0000250c <udd_ep_set_halt>:
    250c:	0f 93       	push	r16
    250e:	e8 2f       	mov	r30, r24
    2510:	ef 70       	andi	r30, 0x0F	; 15
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	ee 0f       	add	r30, r30
    2516:	ff 1f       	adc	r31, r31
    2518:	28 2f       	mov	r18, r24
    251a:	33 27       	eor	r19, r19
    251c:	27 fd       	sbrc	r18, 7
    251e:	30 95       	com	r19
    2520:	22 27       	eor	r18, r18
    2522:	33 0f       	add	r19, r19
    2524:	22 1f       	adc	r18, r18
    2526:	33 27       	eor	r19, r19
    2528:	e2 0f       	add	r30, r18
    252a:	f3 1f       	adc	r31, r19
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	e4 54       	subi	r30, 0x44	; 68
    253a:	fc 4d       	sbci	r31, 0xDC	; 220
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	94 60       	ori	r25, 0x04	; 4
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	01 e0       	ldi	r16, 0x01	; 1
    2544:	06 93       	lac	Z, r16
    2546:	8c df       	rcall	.-232    	; 0x2460 <udd_ep_abort>
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	0f 91       	pop	r16
    254c:	08 95       	ret

0000254e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    254e:	1f 92       	push	r1
    2550:	0f 92       	push	r0
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1
    2558:	0f 93       	push	r16
    255a:	2f 93       	push	r18
    255c:	3f 93       	push	r19
    255e:	4f 93       	push	r20
    2560:	5f 93       	push	r21
    2562:	6f 93       	push	r22
    2564:	7f 93       	push	r23
    2566:	8f 93       	push	r24
    2568:	9f 93       	push	r25
    256a:	af 93       	push	r26
    256c:	bf 93       	push	r27
    256e:	ef 93       	push	r30
    2570:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2572:	80 91 cb 04 	lds	r24, 0x04CB
    2576:	88 23       	and	r24, r24
    2578:	34 f4       	brge	.+12     	; 0x2586 <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    257a:	80 e8       	ldi	r24, 0x80	; 128
    257c:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    2580:	0e 94 30 05 	call	0xa60	; 0xa60 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2584:	88 c0       	rjmp	.+272    	; 0x2696 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2586:	80 91 cb 04 	lds	r24, 0x04CB
    258a:	82 ff       	sbrs	r24, 2
    258c:	20 c0       	rjmp	.+64     	; 0x25ce <__vector_125+0x80>
		udd_ack_underflow_event();
    258e:	84 e0       	ldi	r24, 0x04	; 4
    2590:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    2594:	80 91 c4 23 	lds	r24, 0x23C4
    2598:	86 ff       	sbrs	r24, 6
    259a:	7d c0       	rjmp	.+250    	; 0x2696 <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    259c:	80 91 cc 04 	lds	r24, 0x04CC
    25a0:	81 fd       	sbrc	r24, 1
    25a2:	79 c0       	rjmp	.+242    	; 0x2696 <__vector_125+0x148>
    25a4:	fe db       	rcall	.-2052   	; 0x1da2 <udd_ctrl_interrupt_tc_setup>
    25a6:	81 11       	cpse	r24, r1
    25a8:	76 c0       	rjmp	.+236    	; 0x2696 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    25aa:	80 91 af 23 	lds	r24, 0x23AF
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	11 f4       	brne	.+4      	; 0x25b6 <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    25b2:	33 db       	rcall	.-2458   	; 0x1c1a <udd_ctrl_send_zlp_in>
    25b4:	70 c0       	rjmp	.+224    	; 0x2696 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    25b6:	84 30       	cpi	r24, 0x04	; 4
    25b8:	09 f0       	breq	.+2      	; 0x25bc <__vector_125+0x6e>
    25ba:	6d c0       	rjmp	.+218    	; 0x2696 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    25bc:	e5 ec       	ldi	r30, 0xC5	; 197
    25be:	f3 e2       	ldi	r31, 0x23	; 35
    25c0:	04 e0       	ldi	r16, 0x04	; 4
    25c2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    25c4:	ed eb       	ldi	r30, 0xBD	; 189
    25c6:	f3 e2       	ldi	r31, 0x23	; 35
    25c8:	04 e0       	ldi	r16, 0x04	; 4
    25ca:	05 93       	las	Z, r16
    25cc:	64 c0       	rjmp	.+200    	; 0x2696 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    25ce:	80 91 cb 04 	lds	r24, 0x04CB
    25d2:	81 ff       	sbrs	r24, 1
    25d4:	5b c0       	rjmp	.+182    	; 0x268c <__vector_125+0x13e>
		udd_ack_overflow_event();
    25d6:	82 e0       	ldi	r24, 0x02	; 2
    25d8:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    25dc:	80 91 bc 23 	lds	r24, 0x23BC
    25e0:	86 ff       	sbrs	r24, 6
    25e2:	59 c0       	rjmp	.+178    	; 0x2696 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    25e4:	80 91 cc 04 	lds	r24, 0x04CC
    25e8:	81 fd       	sbrc	r24, 1
    25ea:	55 c0       	rjmp	.+170    	; 0x2696 <__vector_125+0x148>
    25ec:	da db       	rcall	.-2124   	; 0x1da2 <udd_ctrl_interrupt_tc_setup>
    25ee:	81 11       	cpse	r24, r1
    25f0:	52 c0       	rjmp	.+164    	; 0x2696 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    25f2:	80 91 af 23 	lds	r24, 0x23AF
    25f6:	82 30       	cpi	r24, 0x02	; 2
    25f8:	41 f4       	brne	.+16     	; 0x260a <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    25fa:	84 e0       	ldi	r24, 0x04	; 4
    25fc:	80 93 af 23 	sts	0x23AF, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2600:	ec eb       	ldi	r30, 0xBC	; 188
    2602:	f3 e2       	ldi	r31, 0x23	; 35
    2604:	02 e0       	ldi	r16, 0x02	; 2
    2606:	06 93       	lac	Z, r16
    2608:	46 c0       	rjmp	.+140    	; 0x2696 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    260a:	83 30       	cpi	r24, 0x03	; 3
    260c:	09 f0       	breq	.+2      	; 0x2610 <__vector_125+0xc2>
    260e:	43 c0       	rjmp	.+134    	; 0x2696 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2610:	e5 ec       	ldi	r30, 0xC5	; 197
    2612:	f3 e2       	ldi	r31, 0x23	; 35
    2614:	04 e0       	ldi	r16, 0x04	; 4
    2616:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2618:	ed eb       	ldi	r30, 0xBD	; 189
    261a:	f3 e2       	ldi	r31, 0x23	; 35
    261c:	04 e0       	ldi	r16, 0x04	; 4
    261e:	05 93       	las	Z, r16
    2620:	3a c0       	rjmp	.+116    	; 0x2696 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2622:	80 e1       	ldi	r24, 0x10	; 16
    2624:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	1a df       	rcall	.-460    	; 0x2460 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    262c:	81 e8       	ldi	r24, 0x81	; 129
    262e:	18 df       	rcall	.-464    	; 0x2460 <udd_ep_abort>
		}
#endif
		udc_reset();
    2630:	0e 94 09 05 	call	0xa12	; 0xa12 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2634:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2638:	ed eb       	ldi	r30, 0xBD	; 189
    263a:	f3 e2       	ldi	r31, 0x23	; 35
    263c:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    263e:	96 e0       	ldi	r25, 0x06	; 6
    2640:	90 93 bc 23 	sts	0x23BC, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2644:	83 e4       	ldi	r24, 0x43	; 67
    2646:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2648:	e5 ec       	ldi	r30, 0xC5	; 197
    264a:	f3 e2       	ldi	r31, 0x23	; 35
    264c:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    264e:	90 93 c4 23 	sts	0x23C4, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2652:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2654:	8b e6       	ldi	r24, 0x6B	; 107
    2656:	93 e2       	ldi	r25, 0x23	; 35
    2658:	80 93 c0 23 	sts	0x23C0, r24
    265c:	90 93 c1 23 	sts	0x23C1, r25
		// Reset endpoint control management
		udd_ctrl_init();
    2660:	a3 da       	rcall	.-2746   	; 0x1ba8 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2662:	19 c0       	rjmp	.+50     	; 0x2696 <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    2664:	80 91 cb 04 	lds	r24, 0x04CB
    2668:	86 ff       	sbrs	r24, 6
    266a:	06 c0       	rjmp	.+12     	; 0x2678 <__vector_125+0x12a>
		udd_ack_suspend_event();
    266c:	80 e4       	ldi	r24, 0x40	; 64
    266e:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	7a da       	rcall	.-2828   	; 0x1b6a <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2676:	0f c0       	rjmp	.+30     	; 0x2696 <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    2678:	80 91 cb 04 	lds	r24, 0x04CB
    267c:	85 ff       	sbrs	r24, 5
    267e:	0b c0       	rjmp	.+22     	; 0x2696 <__vector_125+0x148>
		udd_ack_resume_event();
    2680:	80 e2       	ldi	r24, 0x20	; 32
    2682:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	70 da       	rcall	.-2848   	; 0x1b6a <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    268a:	05 c0       	rjmp	.+10     	; 0x2696 <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    268c:	80 91 cb 04 	lds	r24, 0x04CB
    2690:	84 ff       	sbrs	r24, 4
    2692:	e8 cf       	rjmp	.-48     	; 0x2664 <__vector_125+0x116>
    2694:	c6 cf       	rjmp	.-116    	; 0x2622 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2696:	ff 91       	pop	r31
    2698:	ef 91       	pop	r30
    269a:	bf 91       	pop	r27
    269c:	af 91       	pop	r26
    269e:	9f 91       	pop	r25
    26a0:	8f 91       	pop	r24
    26a2:	7f 91       	pop	r23
    26a4:	6f 91       	pop	r22
    26a6:	5f 91       	pop	r21
    26a8:	4f 91       	pop	r20
    26aa:	3f 91       	pop	r19
    26ac:	2f 91       	pop	r18
    26ae:	0f 91       	pop	r16
    26b0:	0f 90       	pop	r0
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	0f 90       	pop	r0
    26b6:	1f 90       	pop	r1
    26b8:	18 95       	reti

000026ba <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    26ba:	1f 92       	push	r1
    26bc:	0f 92       	push	r0
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	0f 92       	push	r0
    26c2:	11 24       	eor	r1, r1
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	2f 93       	push	r18
    26ca:	3f 93       	push	r19
    26cc:	4f 93       	push	r20
    26ce:	5f 93       	push	r21
    26d0:	6f 93       	push	r22
    26d2:	7f 93       	push	r23
    26d4:	8f 93       	push	r24
    26d6:	9f 93       	push	r25
    26d8:	af 93       	push	r26
    26da:	bf 93       	push	r27
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	ef 93       	push	r30
    26e2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    26e4:	80 91 cc 04 	lds	r24, 0x04CC
    26e8:	81 fd       	sbrc	r24, 1
    26ea:	03 c0       	rjmp	.+6      	; 0x26f2 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    26ec:	5a db       	rcall	.-2380   	; 0x1da2 <udd_ctrl_interrupt_tc_setup>
    26ee:	81 11       	cpse	r24, r1
    26f0:	b9 c0       	rjmp	.+370    	; 0x2864 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    26f2:	82 e0       	ldi	r24, 0x02	; 2
    26f4:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    26f8:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    26fc:	81 95       	neg	r24
    26fe:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2700:	ec eb       	ldi	r30, 0xBC	; 188
    2702:	f3 e2       	ldi	r31, 0x23	; 35
    2704:	e8 1b       	sub	r30, r24
    2706:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2708:	20 81       	ld	r18, Z
    270a:	31 81       	ldd	r19, Z+1	; 0x01
    270c:	2c 5b       	subi	r18, 0xBC	; 188
    270e:	33 42       	sbci	r19, 0x23	; 35
    2710:	36 95       	lsr	r19
    2712:	27 95       	ror	r18
    2714:	36 95       	lsr	r19
    2716:	27 95       	ror	r18
    2718:	36 95       	lsr	r19
    271a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    271c:	82 2f       	mov	r24, r18
    271e:	86 95       	lsr	r24
    2720:	20 ff       	sbrs	r18, 0
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <__vector_126+0x6e>
    2724:	90 e8       	ldi	r25, 0x80	; 128
    2726:	01 c0       	rjmp	.+2      	; 0x272a <__vector_126+0x70>
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    272c:	e8 2f       	mov	r30, r24
    272e:	ef 70       	andi	r30, 0x0F	; 15
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2736:	28 2f       	mov	r18, r24
    2738:	33 27       	eor	r19, r19
    273a:	27 fd       	sbrc	r18, 7
    273c:	30 95       	com	r19
    273e:	22 27       	eor	r18, r18
    2740:	33 0f       	add	r19, r19
    2742:	22 1f       	adc	r18, r18
    2744:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2746:	e2 0f       	add	r30, r18
    2748:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	ee 0f       	add	r30, r30
    2750:	ff 1f       	adc	r31, r31
    2752:	ee 0f       	add	r30, r30
    2754:	ff 1f       	adc	r31, r31
    2756:	e4 54       	subi	r30, 0x44	; 68
    2758:	fc 4d       	sbci	r31, 0xDC	; 220
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    275a:	90 81       	ld	r25, Z
    275c:	95 ff       	sbrs	r25, 5
    275e:	82 c0       	rjmp	.+260    	; 0x2864 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2760:	00 e2       	ldi	r16, 0x20	; 32
    2762:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2764:	81 11       	cpse	r24, r1
    2766:	79 c0       	rjmp	.+242    	; 0x285a <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2768:	80 91 af 23 	lds	r24, 0x23AF
    276c:	84 30       	cpi	r24, 0x04	; 4
    276e:	19 f4       	brne	.+6      	; 0x2776 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2770:	62 da       	rcall	.-2876   	; 0x1c36 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2772:	1a da       	rcall	.-3020   	; 0x1ba8 <udd_ctrl_init>
    2774:	77 c0       	rjmp	.+238    	; 0x2864 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2776:	c0 91 be 23 	lds	r28, 0x23BE
    277a:	d0 91 bf 23 	lds	r29, 0x23BF

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    277e:	80 91 13 24 	lds	r24, 0x2413
    2782:	90 91 14 24 	lds	r25, 0x2414
    2786:	00 91 ab 23 	lds	r16, 0x23AB
    278a:	10 91 ac 23 	lds	r17, 0x23AC
    278e:	98 01       	movw	r18, r16
    2790:	2c 0f       	add	r18, r28
    2792:	3d 1f       	adc	r19, r29
    2794:	82 17       	cp	r24, r18
    2796:	93 07       	cpc	r25, r19
    2798:	18 f4       	brcc	.+6      	; 0x27a0 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    279a:	ec 01       	movw	r28, r24
    279c:	c0 1b       	sub	r28, r16
    279e:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    27a0:	80 91 11 24 	lds	r24, 0x2411
    27a4:	90 91 12 24 	lds	r25, 0x2412
    27a8:	ae 01       	movw	r20, r28
    27aa:	6b e6       	ldi	r22, 0x6B	; 107
    27ac:	73 e2       	ldi	r23, 0x23	; 35
    27ae:	80 0f       	add	r24, r16
    27b0:	91 1f       	adc	r25, r17
    27b2:	0e 94 78 24 	call	0x48f0	; 0x48f0 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    27b6:	0c 0f       	add	r16, r28
    27b8:	1d 1f       	adc	r17, r29
    27ba:	00 93 ab 23 	sts	0x23AB, r16
    27be:	10 93 ac 23 	sts	0x23AC, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    27c2:	c0 34       	cpi	r28, 0x40	; 64
    27c4:	d1 05       	cpc	r29, r1
    27c6:	69 f4       	brne	.+26     	; 0x27e2 <__vector_126+0x128>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    27c8:	80 91 ad 23 	lds	r24, 0x23AD
    27cc:	90 91 ae 23 	lds	r25, 0x23AE
    27d0:	80 0f       	add	r24, r16
    27d2:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    27d4:	20 91 0f 24 	lds	r18, 0x240F
    27d8:	30 91 10 24 	lds	r19, 0x2410
    27dc:	82 17       	cp	r24, r18
    27de:	93 07       	cpc	r25, r19
    27e0:	88 f0       	brcs	.+34     	; 0x2804 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    27e2:	00 93 13 24 	sts	0x2413, r16
    27e6:	10 93 14 24 	sts	0x2414, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    27ea:	e0 91 17 24 	lds	r30, 0x2417
    27ee:	f0 91 18 24 	lds	r31, 0x2418
    27f2:	30 97       	sbiw	r30, 0x00	; 0
    27f4:	29 f0       	breq	.+10     	; 0x2800 <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    27f6:	09 95       	icall
    27f8:	81 11       	cpse	r24, r1
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    27fc:	00 da       	rcall	.-3072   	; 0x1bfe <udd_ctrl_stall_data>
    27fe:	32 c0       	rjmp	.+100    	; 0x2864 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2800:	0c da       	rcall	.-3048   	; 0x1c1a <udd_ctrl_send_zlp_in>
    2802:	30 c0       	rjmp	.+96     	; 0x2864 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2804:	80 91 13 24 	lds	r24, 0x2413
    2808:	90 91 14 24 	lds	r25, 0x2414
    280c:	08 17       	cp	r16, r24
    280e:	19 07       	cpc	r17, r25
    2810:	f9 f4       	brne	.+62     	; 0x2850 <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2812:	e0 91 17 24 	lds	r30, 0x2417
    2816:	f0 91 18 24 	lds	r31, 0x2418
    281a:	30 97       	sbiw	r30, 0x00	; 0
    281c:	11 f4       	brne	.+4      	; 0x2822 <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    281e:	ef d9       	rcall	.-3106   	; 0x1bfe <udd_ctrl_stall_data>
    2820:	21 c0       	rjmp	.+66     	; 0x2864 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2822:	09 95       	icall
    2824:	81 11       	cpse	r24, r1
    2826:	02 c0       	rjmp	.+4      	; 0x282c <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2828:	ea d9       	rcall	.-3116   	; 0x1bfe <udd_ctrl_stall_data>
    282a:	1c c0       	rjmp	.+56     	; 0x2864 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    282c:	20 91 ad 23 	lds	r18, 0x23AD
    2830:	30 91 ae 23 	lds	r19, 0x23AE
    2834:	80 91 ab 23 	lds	r24, 0x23AB
    2838:	90 91 ac 23 	lds	r25, 0x23AC
    283c:	82 0f       	add	r24, r18
    283e:	93 1f       	adc	r25, r19
    2840:	80 93 ad 23 	sts	0x23AD, r24
    2844:	90 93 ae 23 	sts	0x23AE, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2848:	10 92 ab 23 	sts	0x23AB, r1
    284c:	10 92 ac 23 	sts	0x23AC, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2850:	ec eb       	ldi	r30, 0xBC	; 188
    2852:	f3 e2       	ldi	r31, 0x23	; 35
    2854:	02 e0       	ldi	r16, 0x02	; 2
    2856:	06 93       	lac	Z, r16
    2858:	05 c0       	rjmp	.+10     	; 0x2864 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    285a:	80 38       	cpi	r24, 0x80	; 128
    285c:	11 f4       	brne	.+4      	; 0x2862 <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    285e:	f3 d9       	rcall	.-3098   	; 0x1c46 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2860:	01 c0       	rjmp	.+2      	; 0x2864 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2862:	0f db       	rcall	.-2530   	; 0x1e82 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2864:	ff 91       	pop	r31
    2866:	ef 91       	pop	r30
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	bf 91       	pop	r27
    286e:	af 91       	pop	r26
    2870:	9f 91       	pop	r25
    2872:	8f 91       	pop	r24
    2874:	7f 91       	pop	r23
    2876:	6f 91       	pop	r22
    2878:	5f 91       	pop	r21
    287a:	4f 91       	pop	r20
    287c:	3f 91       	pop	r19
    287e:	2f 91       	pop	r18
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	0f 90       	pop	r0
    288a:	1f 90       	pop	r1
    288c:	18 95       	reti

0000288e <sysclk_init>:
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	00 d0       	rcall	.+0      	; 0x2894 <sysclk_init+0x6>
    2894:	00 d0       	rcall	.+0      	; 0x2896 <sysclk_init+0x8>
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	80 93 70 00 	sts	0x0070, r24
    28a0:	80 93 71 00 	sts	0x0071, r24
    28a4:	80 93 72 00 	sts	0x0072, r24
    28a8:	80 93 73 00 	sts	0x0073, r24
    28ac:	80 93 74 00 	sts	0x0074, r24
    28b0:	80 93 75 00 	sts	0x0075, r24
    28b4:	80 93 76 00 	sts	0x0076, r24
    28b8:	6c e1       	ldi	r22, 0x1C	; 28
    28ba:	70 e0       	ldi	r23, 0x00	; 0
    28bc:	82 e0       	ldi	r24, 0x02	; 2
    28be:	91 d0       	rcall	.+290    	; 0x29e2 <nvm_read_byte>
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	6d e1       	ldi	r22, 0x1D	; 29
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	8c d0       	rcall	.+280    	; 0x29e2 <nvm_read_byte>
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	21 f4       	brne	.+8      	; 0x28dc <sysclk_init+0x4e>
    28d4:	80 e4       	ldi	r24, 0x40	; 64
    28d6:	93 e2       	ldi	r25, 0x23	; 35
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	9a 83       	std	Y+2, r25	; 0x02
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	8b 83       	std	Y+3, r24	; 0x03
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	e0 e6       	ldi	r30, 0x60	; 96
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	82 83       	std	Z+2, r24	; 0x02
    28ea:	8c 81       	ldd	r24, Y+4	; 0x04
    28ec:	83 83       	std	Z+3, r24	; 0x03
    28ee:	8f b7       	in	r24, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	e0 e5       	ldi	r30, 0x50	; 80
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	90 81       	ld	r25, Z
    28f8:	92 60       	ori	r25, 0x02	; 2
    28fa:	90 83       	st	Z, r25
    28fc:	8f bf       	out	0x3f, r24	; 63
    28fe:	81 81       	ldd	r24, Z+1	; 0x01
    2900:	81 ff       	sbrs	r24, 1
    2902:	fd cf       	rjmp	.-6      	; 0x28fe <sysclk_init+0x70>
    2904:	8f b7       	in	r24, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	a0 e5       	ldi	r26, 0x50	; 80
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	16 96       	adiw	r26, 0x06	; 6
    290e:	9c 91       	ld	r25, X
    2910:	16 97       	sbiw	r26, 0x06	; 6
    2912:	99 7f       	andi	r25, 0xF9	; 249
    2914:	16 96       	adiw	r26, 0x06	; 6
    2916:	9c 93       	st	X, r25
    2918:	16 97       	sbiw	r26, 0x06	; 6
    291a:	e0 e6       	ldi	r30, 0x60	; 96
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	90 e8       	ldi	r25, 0x80	; 128
    2920:	95 83       	std	Z+5, r25	; 0x05
    2922:	9b eb       	ldi	r25, 0xBB	; 187
    2924:	96 83       	std	Z+6, r25	; 0x06
    2926:	16 96       	adiw	r26, 0x06	; 6
    2928:	9c 91       	ld	r25, X
    292a:	16 97       	sbiw	r26, 0x06	; 6
    292c:	94 60       	ori	r25, 0x04	; 4
    292e:	16 96       	adiw	r26, 0x06	; 6
    2930:	9c 93       	st	X, r25
    2932:	90 81       	ld	r25, Z
    2934:	91 60       	ori	r25, 0x01	; 1
    2936:	90 83       	st	Z, r25
    2938:	8f bf       	out	0x3f, r24	; 63
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	80 e4       	ldi	r24, 0x40	; 64
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	5a d0       	rcall	.+180    	; 0x29f6 <ccp_write_io>
    2942:	8f b7       	in	r24, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	e0 e5       	ldi	r30, 0x50	; 80
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	90 81       	ld	r25, Z
    294c:	9e 7f       	andi	r25, 0xFE	; 254
    294e:	90 83       	st	Z, r25
    2950:	8f bf       	out	0x3f, r24	; 63
    2952:	24 96       	adiw	r28, 0x04	; 4
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	08 95       	ret

0000295e <sysclk_enable_module>:
    295e:	9f b7       	in	r25, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	e8 2f       	mov	r30, r24
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	e0 59       	subi	r30, 0x90	; 144
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 95       	com	r22
    296c:	80 81       	ld	r24, Z
    296e:	68 23       	and	r22, r24
    2970:	60 83       	st	Z, r22
    2972:	9f bf       	out	0x3f, r25	; 63
    2974:	08 95       	ret

00002976 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2976:	86 30       	cpi	r24, 0x06	; 6
    2978:	11 f4       	brne	.+4      	; 0x297e <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    297a:	68 e1       	ldi	r22, 0x18	; 24
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    297e:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2980:	e0 e5       	ldi	r30, 0x50	; 80
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2986:	81 fd       	sbrc	r24, 1
    2988:	24 c0       	rjmp	.+72     	; 0x29d2 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    298a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    298c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    298e:	90 81       	ld	r25, Z
    2990:	92 60       	ori	r25, 0x02	; 2
    2992:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2994:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2996:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2998:	81 ff       	sbrs	r24, 1
    299a:	fd cf       	rjmp	.-6      	; 0x2996 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    299c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    299e:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    29a0:	a0 e5       	ldi	r26, 0x50	; 80
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	16 96       	adiw	r26, 0x06	; 6
    29a6:	9c 91       	ld	r25, X
    29a8:	16 97       	sbiw	r26, 0x06	; 6
    29aa:	99 7f       	andi	r25, 0xF9	; 249
    29ac:	16 96       	adiw	r26, 0x06	; 6
    29ae:	9c 93       	st	X, r25
    29b0:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    29b2:	e0 e6       	ldi	r30, 0x60	; 96
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	90 e8       	ldi	r25, 0x80	; 128
    29b8:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    29ba:	9b eb       	ldi	r25, 0xBB	; 187
    29bc:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    29be:	16 96       	adiw	r26, 0x06	; 6
    29c0:	9c 91       	ld	r25, X
    29c2:	16 97       	sbiw	r26, 0x06	; 6
    29c4:	94 60       	ori	r25, 0x04	; 4
    29c6:	16 96       	adiw	r26, 0x06	; 6
    29c8:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    29ca:	90 81       	ld	r25, Z
    29cc:	91 60       	ori	r25, 0x01	; 1
    29ce:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    29d0:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    29d2:	63 60       	ori	r22, 0x03	; 3
    29d4:	84 e4       	ldi	r24, 0x44	; 68
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0e d0       	rcall	.+28     	; 0x29f6 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    29da:	60 e4       	ldi	r22, 0x40	; 64
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	bf cf       	rjmp	.-130    	; 0x295e <sysclk_enable_module>
    29e0:	08 95       	ret

000029e2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    29e2:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    29e6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    29e8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    29ea:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    29ee:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    29f0:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    29f4:	08 95       	ret

000029f6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    29f6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    29f8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    29fa:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    29fc:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    29fe:	60 83       	st	Z, r22
	ret                             // Return to caller
    2a00:	08 95       	ret

00002a02 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2a02:	cf 92       	push	r12
    2a04:	df 92       	push	r13
    2a06:	ef 92       	push	r14
    2a08:	ff 92       	push	r15
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2a10:	6b 01       	movw	r12, r22
    2a12:	e1 2c       	mov	r14, r1
    2a14:	f1 2c       	mov	r15, r1
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	7c e6       	ldi	r23, 0x6C	; 108
    2a1a:	8c ed       	ldi	r24, 0xDC	; 220
    2a1c:	92 e0       	ldi	r25, 0x02	; 2
    2a1e:	a7 01       	movw	r20, r14
    2a20:	96 01       	movw	r18, r12
    2a22:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodsi4>
    2a26:	ca 01       	movw	r24, r20
    2a28:	b9 01       	movw	r22, r18
    2a2a:	2f ef       	ldi	r18, 0xFF	; 255
    2a2c:	3f ef       	ldi	r19, 0xFF	; 255
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	50 e0       	ldi	r21, 0x00	; 0
    2a32:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodsi4>
	if (smallest_div < 1) {
    2a36:	21 15       	cp	r18, r1
    2a38:	31 05       	cpc	r19, r1
    2a3a:	29 f4       	brne	.+10     	; 0x2a46 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2a40:	21 e0       	ldi	r18, 0x01	; 1
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	2d c0       	rjmp	.+90     	; 0x2aa0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2a46:	22 30       	cpi	r18, 0x02	; 2
    2a48:	31 05       	cpc	r19, r1
    2a4a:	28 f4       	brcc	.+10     	; 0x2a56 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2a4c:	82 e0       	ldi	r24, 0x02	; 2
    2a4e:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2a50:	22 e0       	ldi	r18, 0x02	; 2
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	25 c0       	rjmp	.+74     	; 0x2aa0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2a56:	24 30       	cpi	r18, 0x04	; 4
    2a58:	31 05       	cpc	r19, r1
    2a5a:	28 f4       	brcc	.+10     	; 0x2a66 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2a5c:	83 e0       	ldi	r24, 0x03	; 3
    2a5e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2a60:	24 e0       	ldi	r18, 0x04	; 4
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	1d c0       	rjmp	.+58     	; 0x2aa0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2a66:	28 30       	cpi	r18, 0x08	; 8
    2a68:	31 05       	cpc	r19, r1
    2a6a:	28 f4       	brcc	.+10     	; 0x2a76 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2a6c:	84 e0       	ldi	r24, 0x04	; 4
    2a6e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2a70:	28 e0       	ldi	r18, 0x08	; 8
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	15 c0       	rjmp	.+42     	; 0x2aa0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2a76:	20 34       	cpi	r18, 0x40	; 64
    2a78:	31 05       	cpc	r19, r1
    2a7a:	28 f4       	brcc	.+10     	; 0x2a86 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2a7c:	85 e0       	ldi	r24, 0x05	; 5
    2a7e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2a80:	20 e4       	ldi	r18, 0x40	; 64
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	0d c0       	rjmp	.+26     	; 0x2aa0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2a86:	2f 3f       	cpi	r18, 0xFF	; 255
    2a88:	31 05       	cpc	r19, r1
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <pwm_set_frequency+0x8c>
    2a8c:	28 f4       	brcc	.+10     	; 0x2a98 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2a8e:	86 e0       	ldi	r24, 0x06	; 6
    2a90:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	31 e0       	ldi	r19, 0x01	; 1
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2a98:	87 e0       	ldi	r24, 0x07	; 7
    2a9a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	50 e0       	ldi	r21, 0x00	; 0
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	7c e6       	ldi	r23, 0x6C	; 108
    2aa8:	8c ed       	ldi	r24, 0xDC	; 220
    2aaa:	92 e0       	ldi	r25, 0x02	; 2
    2aac:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodsi4>
    2ab0:	ca 01       	movw	r24, r20
    2ab2:	b9 01       	movw	r22, r18
    2ab4:	a7 01       	movw	r20, r14
    2ab6:	96 01       	movw	r18, r12
    2ab8:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodsi4>
    2abc:	2d 83       	std	Y+5, r18	; 0x05
    2abe:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2ac0:	24 36       	cpi	r18, 0x64	; 100
    2ac2:	31 05       	cpc	r19, r1
    2ac4:	18 f4       	brcc	.+6      	; 0x2acc <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2ac6:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2ac8:	1d 82       	std	Y+5, r1	; 0x05
    2aca:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	ff 90       	pop	r15
    2ad2:	ef 90       	pop	r14
    2ad4:	df 90       	pop	r13
    2ad6:	cf 90       	pop	r12
    2ad8:	08 95       	ret

00002ada <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2ada:	0f 93       	push	r16
    2adc:	1f 93       	push	r17
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	ec 01       	movw	r28, r24
    2ae4:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
	UNUSED(num_chan);

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    2ae6:	62 30       	cpi	r22, 0x02	; 2
    2ae8:	b9 f1       	breq	.+110    	; 0x2b58 <pwm_init+0x7e>
    2aea:	28 f4       	brcc	.+10     	; 0x2af6 <pwm_init+0x1c>
    2aec:	66 23       	and	r22, r22
    2aee:	51 f0       	breq	.+20     	; 0x2b04 <pwm_init+0x2a>
    2af0:	61 30       	cpi	r22, 0x01	; 1
    2af2:	e9 f0       	breq	.+58     	; 0x2b2e <pwm_init+0x54>
    2af4:	6f c0       	rjmp	.+222    	; 0x2bd4 <pwm_init+0xfa>
    2af6:	63 30       	cpi	r22, 0x03	; 3
    2af8:	09 f4       	brne	.+2      	; 0x2afc <pwm_init+0x22>
    2afa:	43 c0       	rjmp	.+134    	; 0x2b82 <pwm_init+0xa8>
    2afc:	64 30       	cpi	r22, 0x04	; 4
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <pwm_init+0x28>
    2b00:	55 c0       	rjmp	.+170    	; 0x2bac <pwm_init+0xd2>
    2b02:	68 c0       	rjmp	.+208    	; 0x2bd4 <pwm_init+0xfa>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	98 e0       	ldi	r25, 0x08	; 8
    2b08:	88 83       	st	Y, r24
    2b0a:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2b0c:	e0 e4       	ldi	r30, 0x40	; 64
    2b0e:	f6 e0       	ldi	r31, 0x06	; 6
    2b10:	50 81       	ld	r21, Z
    2b12:	21 e0       	ldi	r18, 0x01	; 1
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	8f ef       	ldi	r24, 0xFF	; 255
    2b18:	84 0f       	add	r24, r20
    2b1a:	b9 01       	movw	r22, r18
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <pwm_init+0x48>
    2b1e:	66 0f       	add	r22, r22
    2b20:	77 1f       	adc	r23, r23
    2b22:	8a 95       	dec	r24
    2b24:	e2 f7       	brpl	.-8      	; 0x2b1e <pwm_init+0x44>
    2b26:	cb 01       	movw	r24, r22
    2b28:	85 2b       	or	r24, r21
    2b2a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2b2c:	53 c0       	rjmp	.+166    	; 0x2bd4 <pwm_init+0xfa>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2b2e:	80 e4       	ldi	r24, 0x40	; 64
    2b30:	98 e0       	ldi	r25, 0x08	; 8
    2b32:	88 83       	st	Y, r24
    2b34:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2b36:	e0 e4       	ldi	r30, 0x40	; 64
    2b38:	f6 e0       	ldi	r31, 0x06	; 6
    2b3a:	50 81       	ld	r21, Z
    2b3c:	21 e0       	ldi	r18, 0x01	; 1
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	83 e0       	ldi	r24, 0x03	; 3
    2b42:	84 0f       	add	r24, r20
    2b44:	b9 01       	movw	r22, r18
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <pwm_init+0x72>
    2b48:	66 0f       	add	r22, r22
    2b4a:	77 1f       	adc	r23, r23
    2b4c:	8a 95       	dec	r24
    2b4e:	e2 f7       	brpl	.-8      	; 0x2b48 <pwm_init+0x6e>
    2b50:	cb 01       	movw	r24, r22
    2b52:	85 2b       	or	r24, r21
    2b54:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2b56:	3e c0       	rjmp	.+124    	; 0x2bd4 <pwm_init+0xfa>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	99 e0       	ldi	r25, 0x09	; 9
    2b5c:	88 83       	st	Y, r24
    2b5e:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2b60:	e0 e6       	ldi	r30, 0x60	; 96
    2b62:	f6 e0       	ldi	r31, 0x06	; 6
    2b64:	50 81       	ld	r21, Z
    2b66:	21 e0       	ldi	r18, 0x01	; 1
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	8f ef       	ldi	r24, 0xFF	; 255
    2b6c:	84 0f       	add	r24, r20
    2b6e:	b9 01       	movw	r22, r18
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <pwm_init+0x9c>
    2b72:	66 0f       	add	r22, r22
    2b74:	77 1f       	adc	r23, r23
    2b76:	8a 95       	dec	r24
    2b78:	e2 f7       	brpl	.-8      	; 0x2b72 <pwm_init+0x98>
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	85 2b       	or	r24, r21
    2b7e:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2b80:	29 c0       	rjmp	.+82     	; 0x2bd4 <pwm_init+0xfa>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2b82:	80 e4       	ldi	r24, 0x40	; 64
    2b84:	99 e0       	ldi	r25, 0x09	; 9
    2b86:	88 83       	st	Y, r24
    2b88:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2b8a:	e0 e6       	ldi	r30, 0x60	; 96
    2b8c:	f6 e0       	ldi	r31, 0x06	; 6
    2b8e:	50 81       	ld	r21, Z
    2b90:	21 e0       	ldi	r18, 0x01	; 1
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	83 e0       	ldi	r24, 0x03	; 3
    2b96:	84 0f       	add	r24, r20
    2b98:	b9 01       	movw	r22, r18
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <pwm_init+0xc6>
    2b9c:	66 0f       	add	r22, r22
    2b9e:	77 1f       	adc	r23, r23
    2ba0:	8a 95       	dec	r24
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <pwm_init+0xc2>
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	85 2b       	or	r24, r21
    2ba8:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2baa:	14 c0       	rjmp	.+40     	; 0x2bd4 <pwm_init+0xfa>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	9a e0       	ldi	r25, 0x0A	; 10
    2bb0:	88 83       	st	Y, r24
    2bb2:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2bb4:	e0 e8       	ldi	r30, 0x80	; 128
    2bb6:	f6 e0       	ldi	r31, 0x06	; 6
    2bb8:	50 81       	ld	r21, Z
    2bba:	21 e0       	ldi	r18, 0x01	; 1
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	8f ef       	ldi	r24, 0xFF	; 255
    2bc0:	84 0f       	add	r24, r20
    2bc2:	b9 01       	movw	r22, r18
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <pwm_init+0xf0>
    2bc6:	66 0f       	add	r22, r22
    2bc8:	77 1f       	adc	r23, r23
    2bca:	8a 95       	dec	r24
    2bcc:	e2 f7       	brpl	.-8      	; 0x2bc6 <pwm_init+0xec>
    2bce:	cb 01       	movw	r24, r22
    2bd0:	85 2b       	or	r24, r21
    2bd2:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2bd4:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2bd6:	42 30       	cpi	r20, 0x02	; 2
    2bd8:	61 f0       	breq	.+24     	; 0x2bf2 <pwm_init+0x118>
    2bda:	18 f4       	brcc	.+6      	; 0x2be2 <pwm_init+0x108>
    2bdc:	41 30       	cpi	r20, 0x01	; 1
    2bde:	31 f0       	breq	.+12     	; 0x2bec <pwm_init+0x112>
    2be0:	10 c0       	rjmp	.+32     	; 0x2c02 <pwm_init+0x128>
    2be2:	43 30       	cpi	r20, 0x03	; 3
    2be4:	49 f0       	breq	.+18     	; 0x2bf8 <pwm_init+0x11e>
    2be6:	44 30       	cpi	r20, 0x04	; 4
    2be8:	51 f0       	breq	.+20     	; 0x2bfe <pwm_init+0x124>
    2bea:	0b c0       	rjmp	.+22     	; 0x2c02 <pwm_init+0x128>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    2bec:	80 e1       	ldi	r24, 0x10	; 16
    2bee:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2bf0:	08 c0       	rjmp	.+16     	; 0x2c02 <pwm_init+0x128>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    2bf2:	80 e2       	ldi	r24, 0x20	; 32
    2bf4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2bf6:	05 c0       	rjmp	.+10     	; 0x2c02 <pwm_init+0x128>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2bf8:	80 e4       	ldi	r24, 0x40	; 64
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <pwm_init+0x128>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    2bfe:	80 e8       	ldi	r24, 0x80	; 128
    2c00:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    2c02:	88 81       	ld	r24, Y
    2c04:	99 81       	ldd	r25, Y+1	; 0x01
    2c06:	0e 94 24 0c 	call	0x1848	; 0x1848 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2c0a:	e8 81       	ld	r30, Y
    2c0c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2c0e:	81 81       	ldd	r24, Z+1	; 0x01
    2c10:	88 7f       	andi	r24, 0xF8	; 248
    2c12:	83 60       	ori	r24, 0x03	; 3
    2c14:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2c16:	1d 82       	std	Y+5, r1	; 0x05
    2c18:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2c1a:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2c1c:	e8 81       	ld	r30, Y
    2c1e:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2c20:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2c22:	80 7f       	andi	r24, 0xF0	; 240
    2c24:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2c26:	b8 01       	movw	r22, r16
    2c28:	ce 01       	movw	r24, r28
    2c2a:	eb de       	rcall	.-554    	; 0x2a02 <pwm_set_frequency>
}
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	08 95       	ret

00002c36 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    2c3c:	ad 81       	ldd	r26, Y+5	; 0x05
    2c3e:	be 81       	ldd	r27, Y+6	; 0x06
    2c40:	26 2f       	mov	r18, r22
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	0e 94 18 24 	call	0x4830	; 0x4830 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    2c48:	24 e6       	ldi	r18, 0x64	; 100
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	e8 81       	ld	r30, Y
    2c58:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2c5a:	e6 fd       	sbrc	r30, 6
    2c5c:	17 c0       	rjmp	.+46     	; 0x2c8c <pwm_start+0x56>
		switch (channel_index) {
    2c5e:	82 30       	cpi	r24, 0x02	; 2
    2c60:	61 f0       	breq	.+24     	; 0x2c7a <pwm_start+0x44>
    2c62:	18 f4       	brcc	.+6      	; 0x2c6a <pwm_start+0x34>
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	31 f0       	breq	.+12     	; 0x2c74 <pwm_start+0x3e>
    2c68:	1b c0       	rjmp	.+54     	; 0x2ca0 <pwm_start+0x6a>
    2c6a:	83 30       	cpi	r24, 0x03	; 3
    2c6c:	49 f0       	breq	.+18     	; 0x2c80 <pwm_start+0x4a>
    2c6e:	84 30       	cpi	r24, 0x04	; 4
    2c70:	51 f0       	breq	.+20     	; 0x2c86 <pwm_start+0x50>
    2c72:	16 c0       	rjmp	.+44     	; 0x2ca0 <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2c74:	20 af       	std	Z+56, r18	; 0x38
    2c76:	31 af       	std	Z+57, r19	; 0x39
    2c78:	13 c0       	rjmp	.+38     	; 0x2ca0 <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2c7a:	22 af       	std	Z+58, r18	; 0x3a
    2c7c:	33 af       	std	Z+59, r19	; 0x3b
    2c7e:	10 c0       	rjmp	.+32     	; 0x2ca0 <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2c80:	24 af       	std	Z+60, r18	; 0x3c
    2c82:	35 af       	std	Z+61, r19	; 0x3d
    2c84:	0d c0       	rjmp	.+26     	; 0x2ca0 <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2c86:	26 af       	std	Z+62, r18	; 0x3e
    2c88:	37 af       	std	Z+63, r19	; 0x3f
    2c8a:	0a c0       	rjmp	.+20     	; 0x2ca0 <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2c8c:	81 30       	cpi	r24, 0x01	; 1
    2c8e:	19 f0       	breq	.+6      	; 0x2c96 <pwm_start+0x60>
    2c90:	82 30       	cpi	r24, 0x02	; 2
    2c92:	21 f0       	breq	.+8      	; 0x2c9c <pwm_start+0x66>
    2c94:	05 c0       	rjmp	.+10     	; 0x2ca0 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2c96:	20 af       	std	Z+56, r18	; 0x38
    2c98:	31 af       	std	Z+57, r19	; 0x39
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2c9c:	22 af       	std	Z+58, r18	; 0x3a
    2c9e:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    2ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca4:	e8 81       	ld	r30, Y
    2ca6:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2ca8:	86 a3       	std	Z+38, r24	; 0x26
    2caa:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	e8 81       	ld	r30, Y
    2cb0:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    2cb2:	e6 fd       	sbrc	r30, 6
    2cb4:	04 c0       	rjmp	.+8      	; 0x2cbe <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	89 2b       	or	r24, r25
    2cba:	81 83       	std	Z+1, r24	; 0x01
    2cbc:	04 c0       	rjmp	.+8      	; 0x2cc6 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	80 73       	andi	r24, 0x30	; 48
    2cc2:	89 2b       	or	r24, r25
    2cc4:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    2cc6:	e8 81       	ld	r30, Y
    2cc8:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2cca:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2ccc:	80 7f       	andi	r24, 0xF0	; 240
    2cce:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd0:	89 2b       	or	r24, r25
    2cd2:	80 83       	st	Z, r24
}
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	08 95       	ret

00002cda <resetGestureParameters>:
    if( !setMode(GESTURE, 0) ) {
        return FALSE;
    }
    
    return TRUE;
}
    2cda:	10 92 cb 24 	sts	0x24CB, r1
    2cde:	10 92 cc 24 	sts	0x24CC, r1
    2ce2:	10 92 45 24 	sts	0x2445, r1
    2ce6:	10 92 46 24 	sts	0x2446, r1
    2cea:	10 92 3c 24 	sts	0x243C, r1
    2cee:	10 92 3d 24 	sts	0x243D, r1
    2cf2:	10 92 20 24 	sts	0x2420, r1
    2cf6:	10 92 21 24 	sts	0x2421, r1
    2cfa:	10 92 2c 24 	sts	0x242C, r1
    2cfe:	10 92 2d 24 	sts	0x242D, r1
    2d02:	10 92 cf 24 	sts	0x24CF, r1
    2d06:	10 92 d0 24 	sts	0x24D0, r1
    2d0a:	10 92 32 24 	sts	0x2432, r1
    2d0e:	10 92 33 24 	sts	0x2433, r1
    2d12:	10 92 2e 24 	sts	0x242E, r1
    2d16:	10 92 2f 24 	sts	0x242F, r1
    2d1a:	10 92 47 24 	sts	0x2447, r1
    2d1e:	10 92 48 24 	sts	0x2448, r1
    2d22:	08 95       	ret

00002d24 <processGestureData>:
    2d24:	8f 92       	push	r8
    2d26:	9f 92       	push	r9
    2d28:	af 92       	push	r10
    2d2a:	bf 92       	push	r11
    2d2c:	cf 92       	push	r12
    2d2e:	df 92       	push	r13
    2d30:	ef 92       	push	r14
    2d32:	ff 92       	push	r15
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	00 91 cc 24 	lds	r16, 0x24CC
    2d40:	05 30       	cpi	r16, 0x05	; 5
    2d42:	08 f4       	brcc	.+2      	; 0x2d46 <processGestureData+0x22>
    2d44:	83 c1       	rjmp	.+774    	; 0x304c <__stack+0x4d>
    2d46:	8f ef       	ldi	r24, 0xFF	; 255
    2d48:	80 0f       	add	r24, r16
    2d4a:	80 32       	cpi	r24, 0x20	; 32
    2d4c:	08 f0       	brcs	.+2      	; 0x2d50 <processGestureData+0x2c>
    2d4e:	53 c0       	rjmp	.+166    	; 0x2df6 <processGestureData+0xd2>
    2d50:	c0 2e       	mov	r12, r16
    2d52:	d1 2c       	mov	r13, r1
    2d54:	1c 14       	cp	r1, r12
    2d56:	1d 04       	cpc	r1, r13
    2d58:	0c f0       	brlt	.+2      	; 0x2d5c <processGestureData+0x38>
    2d5a:	7b c1       	rjmp	.+758    	; 0x3052 <__stack+0x53>
    2d5c:	eb e4       	ldi	r30, 0x4B	; 75
    2d5e:	f4 e2       	ldi	r31, 0x24	; 36
    2d60:	8b ea       	ldi	r24, 0xAB	; 171
    2d62:	94 e2       	ldi	r25, 0x24	; 36
    2d64:	76 01       	movw	r14, r12
    2d66:	af 01       	movw	r20, r30
    2d68:	97 01       	movw	r18, r14
    2d6a:	25 55       	subi	r18, 0x55	; 85
    2d6c:	3b 4d       	sbci	r19, 0xDB	; 219
    2d6e:	71 91       	ld	r23, Z+
    2d70:	7b 30       	cpi	r23, 0x0B	; 11
    2d72:	78 f0       	brcs	.+30     	; 0x2d92 <processGestureData+0x6e>
    2d74:	ec 01       	movw	r28, r24
    2d76:	dc 01       	movw	r26, r24
    2d78:	a0 54       	subi	r26, 0x40	; 64
    2d7a:	b1 09       	sbc	r27, r1
    2d7c:	0c 91       	ld	r16, X
    2d7e:	0b 30       	cpi	r16, 0x0B	; 11
    2d80:	40 f0       	brcs	.+16     	; 0x2d92 <processGestureData+0x6e>
    2d82:	90 96       	adiw	r26, 0x20	; 32
    2d84:	1c 91       	ld	r17, X
    2d86:	1b 30       	cpi	r17, 0x0B	; 11
    2d88:	20 f0       	brcs	.+8      	; 0x2d92 <processGestureData+0x6e>
    2d8a:	98 80       	ld	r9, Y
    2d8c:	6a e0       	ldi	r22, 0x0A	; 10
    2d8e:	69 15       	cp	r22, r9
    2d90:	28 f0       	brcs	.+10     	; 0x2d9c <processGestureData+0x78>
    2d92:	01 96       	adiw	r24, 0x01	; 1
    2d94:	82 17       	cp	r24, r18
    2d96:	93 07       	cpc	r25, r19
    2d98:	51 f7       	brne	.-44     	; 0x2d6e <processGestureData+0x4a>
    2d9a:	5e c1       	rjmp	.+700    	; 0x3058 <__stack+0x59>
    2d9c:	77 23       	and	r23, r23
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <processGestureData+0x7e>
    2da0:	5e c1       	rjmp	.+700    	; 0x305e <__stack+0x5f>
    2da2:	00 23       	and	r16, r16
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <processGestureData+0x84>
    2da6:	5e c1       	rjmp	.+700    	; 0x3064 <__stack+0x65>
    2da8:	11 23       	and	r17, r17
    2daa:	09 f4       	brne	.+2      	; 0x2dae <processGestureData+0x8a>
    2dac:	5e c1       	rjmp	.+700    	; 0x306a <__stack+0x6b>
    2dae:	99 20       	and	r9, r9
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <processGestureData+0x90>
    2db2:	5e c1       	rjmp	.+700    	; 0x3070 <__stack+0x71>
    2db4:	c6 01       	movw	r24, r12
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	99 23       	and	r25, r25
    2dba:	34 f1       	brlt	.+76     	; 0x2e08 <processGestureData+0xe4>
    2dbc:	f7 01       	movw	r30, r14
    2dbe:	e5 5b       	subi	r30, 0xB5	; 181
    2dc0:	fb 4d       	sbci	r31, 0xDB	; 219
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	a5 59       	subi	r26, 0x95	; 149
    2dc6:	bb 4d       	sbci	r27, 0xDB	; 219
    2dc8:	31 97       	sbiw	r30, 0x01	; 1
    2dca:	60 81       	ld	r22, Z
    2dcc:	6b 30       	cpi	r22, 0x0B	; 11
    2dce:	70 f0       	brcs	.+28     	; 0x2dec <processGestureData+0xc8>
    2dd0:	8c 91       	ld	r24, X
    2dd2:	8b 30       	cpi	r24, 0x0B	; 11
    2dd4:	58 f0       	brcs	.+22     	; 0x2dec <processGestureData+0xc8>
    2dd6:	ef 01       	movw	r28, r30
    2dd8:	c0 5c       	subi	r28, 0xC0	; 192
    2dda:	df 4f       	sbci	r29, 0xFF	; 255
    2ddc:	98 81       	ld	r25, Y
    2dde:	9b 30       	cpi	r25, 0x0B	; 11
    2de0:	28 f0       	brcs	.+10     	; 0x2dec <processGestureData+0xc8>
    2de2:	a0 96       	adiw	r28, 0x20	; 32
    2de4:	88 80       	ld	r8, Y
    2de6:	2a e0       	ldi	r18, 0x0A	; 10
    2de8:	28 15       	cp	r18, r8
    2dea:	b8 f0       	brcs	.+46     	; 0x2e1a <processGestureData+0xf6>
    2dec:	11 97       	sbiw	r26, 0x01	; 1
    2dee:	e4 17       	cp	r30, r20
    2df0:	f5 07       	cpc	r31, r21
    2df2:	51 f7       	brne	.-44     	; 0x2dc8 <processGestureData+0xa4>
    2df4:	0e c0       	rjmp	.+28     	; 0x2e12 <processGestureData+0xee>
    2df6:	81 2c       	mov	r8, r1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	60 e0       	ldi	r22, 0x00	; 0
    2dfe:	91 2c       	mov	r9, r1
    2e00:	10 e0       	ldi	r17, 0x00	; 0
    2e02:	00 e0       	ldi	r16, 0x00	; 0
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	09 c0       	rjmp	.+18     	; 0x2e1a <processGestureData+0xf6>
    2e08:	81 2c       	mov	r8, r1
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	04 c0       	rjmp	.+8      	; 0x2e1a <processGestureData+0xf6>
    2e12:	81 2c       	mov	r8, r1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	60 e0       	ldi	r22, 0x00	; 0
    2e1a:	a7 2e       	mov	r10, r23
    2e1c:	b1 2c       	mov	r11, r1
    2e1e:	c0 2e       	mov	r12, r16
    2e20:	d1 2c       	mov	r13, r1
    2e22:	c1 2f       	mov	r28, r17
    2e24:	d0 e0       	ldi	r29, 0x00	; 0
    2e26:	29 2d       	mov	r18, r9
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
    2e2c:	48 2f       	mov	r20, r24
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	e9 2e       	mov	r14, r25
    2e32:	f1 2c       	mov	r15, r1
    2e34:	08 2d       	mov	r16, r8
    2e36:	10 e0       	ldi	r17, 0x00	; 0
    2e38:	fb 01       	movw	r30, r22
    2e3a:	e4 1b       	sub	r30, r20
    2e3c:	f5 0b       	sbc	r31, r21
    2e3e:	0f 2e       	mov	r0, r31
    2e40:	f4 e6       	ldi	r31, 0x64	; 100
    2e42:	9f 2e       	mov	r9, r31
    2e44:	f0 2d       	mov	r31, r0
    2e46:	9e 9e       	mul	r9, r30
    2e48:	c0 01       	movw	r24, r0
    2e4a:	9f 9e       	mul	r9, r31
    2e4c:	90 0d       	add	r25, r0
    2e4e:	11 24       	eor	r1, r1
    2e50:	64 0f       	add	r22, r20
    2e52:	75 1f       	adc	r23, r21
    2e54:	0e 94 c1 23 	call	0x4782	; 0x4782 <__divmodhi4>
    2e58:	fb 01       	movw	r30, r22
    2e5a:	a5 01       	movw	r20, r10
    2e5c:	4c 19       	sub	r20, r12
    2e5e:	5d 09       	sbc	r21, r13
    2e60:	94 9e       	mul	r9, r20
    2e62:	c0 01       	movw	r24, r0
    2e64:	95 9e       	mul	r9, r21
    2e66:	90 0d       	add	r25, r0
    2e68:	11 24       	eor	r1, r1
    2e6a:	b5 01       	movw	r22, r10
    2e6c:	6c 0d       	add	r22, r12
    2e6e:	7d 1d       	adc	r23, r13
    2e70:	0e 94 c1 23 	call	0x4782	; 0x4782 <__divmodhi4>
    2e74:	e6 1b       	sub	r30, r22
    2e76:	f7 0b       	sbc	r31, r23
    2e78:	a7 01       	movw	r20, r14
    2e7a:	40 1b       	sub	r20, r16
    2e7c:	51 0b       	sbc	r21, r17
    2e7e:	94 9e       	mul	r9, r20
    2e80:	c0 01       	movw	r24, r0
    2e82:	95 9e       	mul	r9, r21
    2e84:	90 0d       	add	r25, r0
    2e86:	11 24       	eor	r1, r1
    2e88:	b7 01       	movw	r22, r14
    2e8a:	60 0f       	add	r22, r16
    2e8c:	71 1f       	adc	r23, r17
    2e8e:	0e 94 c1 23 	call	0x4782	; 0x4782 <__divmodhi4>
    2e92:	8b 01       	movw	r16, r22
    2e94:	ae 01       	movw	r20, r28
    2e96:	42 1b       	sub	r20, r18
    2e98:	53 0b       	sbc	r21, r19
    2e9a:	94 9e       	mul	r9, r20
    2e9c:	c0 01       	movw	r24, r0
    2e9e:	95 9e       	mul	r9, r21
    2ea0:	90 0d       	add	r25, r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	be 01       	movw	r22, r28
    2ea6:	62 0f       	add	r22, r18
    2ea8:	73 1f       	adc	r23, r19
    2eaa:	0e 94 c1 23 	call	0x4782	; 0x4782 <__divmodhi4>
    2eae:	c8 01       	movw	r24, r16
    2eb0:	86 1b       	sub	r24, r22
    2eb2:	97 0b       	sbc	r25, r23
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	20 91 45 24 	lds	r18, 0x2445
    2eba:	30 91 46 24 	lds	r19, 0x2446
    2ebe:	2e 0f       	add	r18, r30
    2ec0:	3f 1f       	adc	r19, r31
    2ec2:	20 93 45 24 	sts	0x2445, r18
    2ec6:	30 93 46 24 	sts	0x2446, r19
    2eca:	80 91 3c 24 	lds	r24, 0x243C
    2ece:	90 91 3d 24 	lds	r25, 0x243D
    2ed2:	86 0f       	add	r24, r22
    2ed4:	97 1f       	adc	r25, r23
    2ed6:	80 93 3c 24 	sts	0x243C, r24
    2eda:	90 93 3d 24 	sts	0x243D, r25
    2ede:	22 33       	cpi	r18, 0x32	; 50
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	3c f0       	brlt	.+14     	; 0x2ef2 <processGestureData+0x1ce>
    2ee4:	21 e0       	ldi	r18, 0x01	; 1
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	20 93 20 24 	sts	0x2420, r18
    2eec:	30 93 21 24 	sts	0x2421, r19
    2ef0:	0e c0       	rjmp	.+28     	; 0x2f0e <processGestureData+0x1ea>
    2ef2:	2f 3c       	cpi	r18, 0xCF	; 207
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	3c f4       	brge	.+14     	; 0x2f06 <processGestureData+0x1e2>
    2ef8:	2f ef       	ldi	r18, 0xFF	; 255
    2efa:	3f ef       	ldi	r19, 0xFF	; 255
    2efc:	20 93 20 24 	sts	0x2420, r18
    2f00:	30 93 21 24 	sts	0x2421, r19
    2f04:	04 c0       	rjmp	.+8      	; 0x2f0e <processGestureData+0x1ea>
    2f06:	10 92 20 24 	sts	0x2420, r1
    2f0a:	10 92 21 24 	sts	0x2421, r1
    2f0e:	82 33       	cpi	r24, 0x32	; 50
    2f10:	91 05       	cpc	r25, r1
    2f12:	3c f0       	brlt	.+14     	; 0x2f22 <processGestureData+0x1fe>
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	80 93 2c 24 	sts	0x242C, r24
    2f1c:	90 93 2d 24 	sts	0x242D, r25
    2f20:	0e c0       	rjmp	.+28     	; 0x2f3e <processGestureData+0x21a>
    2f22:	8f 3c       	cpi	r24, 0xCF	; 207
    2f24:	9f 4f       	sbci	r25, 0xFF	; 255
    2f26:	3c f4       	brge	.+14     	; 0x2f36 <processGestureData+0x212>
    2f28:	8f ef       	ldi	r24, 0xFF	; 255
    2f2a:	9f ef       	ldi	r25, 0xFF	; 255
    2f2c:	80 93 2c 24 	sts	0x242C, r24
    2f30:	90 93 2d 24 	sts	0x242D, r25
    2f34:	04 c0       	rjmp	.+8      	; 0x2f3e <processGestureData+0x21a>
    2f36:	10 92 2c 24 	sts	0x242C, r1
    2f3a:	10 92 2d 24 	sts	0x242D, r1
    2f3e:	80 91 20 24 	lds	r24, 0x2420
    2f42:	90 91 21 24 	lds	r25, 0x2421
    2f46:	89 2b       	or	r24, r25
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <processGestureData+0x228>
    2f4a:	4f c0       	rjmp	.+158    	; 0x2fea <processGestureData+0x2c6>
    2f4c:	80 91 2c 24 	lds	r24, 0x242C
    2f50:	90 91 2d 24 	lds	r25, 0x242D
    2f54:	89 2b       	or	r24, r25
    2f56:	09 f0       	breq	.+2      	; 0x2f5a <processGestureData+0x236>
    2f58:	48 c0       	rjmp	.+144    	; 0x2fea <processGestureData+0x2c6>
    2f5a:	cf 01       	movw	r24, r30
    2f5c:	43 96       	adiw	r24, 0x13	; 19
    2f5e:	87 97       	sbiw	r24, 0x27	; 39
    2f60:	08 f0       	brcs	.+2      	; 0x2f64 <processGestureData+0x240>
    2f62:	89 c0       	rjmp	.+274    	; 0x3076 <__stack+0x77>
    2f64:	cb 01       	movw	r24, r22
    2f66:	43 96       	adiw	r24, 0x13	; 19
    2f68:	87 97       	sbiw	r24, 0x27	; 39
    2f6a:	08 f0       	brcs	.+2      	; 0x2f6e <processGestureData+0x24a>
    2f6c:	87 c0       	rjmp	.+270    	; 0x307c <__stack+0x7d>
    2f6e:	30 97       	sbiw	r30, 0x00	; 0
    2f70:	69 f4       	brne	.+26     	; 0x2f8c <processGestureData+0x268>
    2f72:	61 15       	cp	r22, r1
    2f74:	71 05       	cpc	r23, r1
    2f76:	51 f4       	brne	.+20     	; 0x2f8c <processGestureData+0x268>
    2f78:	80 91 cf 24 	lds	r24, 0x24CF
    2f7c:	90 91 d0 24 	lds	r25, 0x24D0
    2f80:	01 96       	adiw	r24, 0x01	; 1
    2f82:	80 93 cf 24 	sts	0x24CF, r24
    2f86:	90 93 d0 24 	sts	0x24D0, r25
    2f8a:	09 c0       	rjmp	.+18     	; 0x2f9e <processGestureData+0x27a>
    2f8c:	80 91 32 24 	lds	r24, 0x2432
    2f90:	90 91 33 24 	lds	r25, 0x2433
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	80 93 32 24 	sts	0x2432, r24
    2f9a:	90 93 33 24 	sts	0x2433, r25
    2f9e:	80 91 cf 24 	lds	r24, 0x24CF
    2fa2:	90 91 d0 24 	lds	r25, 0x24D0
    2fa6:	0a 97       	sbiw	r24, 0x0a	; 10
    2fa8:	0c f4       	brge	.+2      	; 0x2fac <processGestureData+0x288>
    2faa:	6b c0       	rjmp	.+214    	; 0x3082 <__stack+0x83>
    2fac:	80 91 32 24 	lds	r24, 0x2432
    2fb0:	90 91 33 24 	lds	r25, 0x2433
    2fb4:	02 97       	sbiw	r24, 0x02	; 2
    2fb6:	0c f4       	brge	.+2      	; 0x2fba <processGestureData+0x296>
    2fb8:	67 c0       	rjmp	.+206    	; 0x3088 <__stack+0x89>
    2fba:	ef 2b       	or	r30, r31
    2fbc:	51 f4       	brne	.+20     	; 0x2fd2 <processGestureData+0x2ae>
    2fbe:	67 2b       	or	r22, r23
    2fc0:	09 f0       	breq	.+2      	; 0x2fc4 <processGestureData+0x2a0>
    2fc2:	65 c0       	rjmp	.+202    	; 0x308e <__stack+0x8f>
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	80 93 2e 24 	sts	0x242E, r24
    2fcc:	90 93 2f 24 	sts	0x242F, r25
    2fd0:	6c c0       	rjmp	.+216    	; 0x30aa <__stack+0xab>
    2fd2:	67 2b       	or	r22, r23
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <processGestureData+0x2b4>
    2fd6:	5e c0       	rjmp	.+188    	; 0x3094 <__stack+0x95>
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	80 93 2e 24 	sts	0x242E, r24
    2fe0:	90 93 2f 24 	sts	0x242F, r25
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	60 c0       	rjmp	.+192    	; 0x30aa <__stack+0xab>
    2fea:	cf 01       	movw	r24, r30
    2fec:	43 96       	adiw	r24, 0x13	; 19
    2fee:	87 97       	sbiw	r24, 0x27	; 39
    2ff0:	08 f0       	brcs	.+2      	; 0x2ff4 <processGestureData+0x2d0>
    2ff2:	53 c0       	rjmp	.+166    	; 0x309a <__stack+0x9b>
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	43 96       	adiw	r24, 0x13	; 19
    2ff8:	87 97       	sbiw	r24, 0x27	; 39
    2ffa:	08 f0       	brcs	.+2      	; 0x2ffe <processGestureData+0x2da>
    2ffc:	51 c0       	rjmp	.+162    	; 0x30a0 <__stack+0xa1>
    2ffe:	ef 2b       	or	r30, r31
    3000:	59 f4       	brne	.+22     	; 0x3018 <__stack+0x19>
    3002:	67 2b       	or	r22, r23
    3004:	49 f4       	brne	.+18     	; 0x3018 <__stack+0x19>
    3006:	80 91 cf 24 	lds	r24, 0x24CF
    300a:	90 91 d0 24 	lds	r25, 0x24D0
    300e:	01 96       	adiw	r24, 0x01	; 1
    3010:	80 93 cf 24 	sts	0x24CF, r24
    3014:	90 93 d0 24 	sts	0x24D0, r25
    3018:	80 91 cf 24 	lds	r24, 0x24CF
    301c:	90 91 d0 24 	lds	r25, 0x24D0
    3020:	0a 97       	sbiw	r24, 0x0a	; 10
    3022:	0c f4       	brge	.+2      	; 0x3026 <__stack+0x27>
    3024:	40 c0       	rjmp	.+128    	; 0x30a6 <__stack+0xa7>
    3026:	10 92 20 24 	sts	0x2420, r1
    302a:	10 92 21 24 	sts	0x2421, r1
    302e:	10 92 2c 24 	sts	0x242C, r1
    3032:	10 92 2d 24 	sts	0x242D, r1
    3036:	10 92 45 24 	sts	0x2445, r1
    303a:	10 92 46 24 	sts	0x2446, r1
    303e:	10 92 3c 24 	sts	0x243C, r1
    3042:	10 92 3d 24 	sts	0x243D, r1
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	2f c0       	rjmp	.+94     	; 0x30aa <__stack+0xab>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	2c c0       	rjmp	.+88     	; 0x30aa <__stack+0xab>
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	29 c0       	rjmp	.+82     	; 0x30aa <__stack+0xab>
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	26 c0       	rjmp	.+76     	; 0x30aa <__stack+0xab>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	23 c0       	rjmp	.+70     	; 0x30aa <__stack+0xab>
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	20 c0       	rjmp	.+64     	; 0x30aa <__stack+0xab>
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	1d c0       	rjmp	.+58     	; 0x30aa <__stack+0xab>
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	1a c0       	rjmp	.+52     	; 0x30aa <__stack+0xab>
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	17 c0       	rjmp	.+46     	; 0x30aa <__stack+0xab>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	14 c0       	rjmp	.+40     	; 0x30aa <__stack+0xab>
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	11 c0       	rjmp	.+34     	; 0x30aa <__stack+0xab>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e c0       	rjmp	.+28     	; 0x30aa <__stack+0xab>
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0b c0       	rjmp	.+22     	; 0x30aa <__stack+0xab>
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	08 c0       	rjmp	.+16     	; 0x30aa <__stack+0xab>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	05 c0       	rjmp	.+10     	; 0x30aa <__stack+0xab>
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <__stack+0xab>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	ff 90       	pop	r15
    30b4:	ef 90       	pop	r14
    30b6:	df 90       	pop	r13
    30b8:	cf 90       	pop	r12
    30ba:	bf 90       	pop	r11
    30bc:	af 90       	pop	r10
    30be:	9f 90       	pop	r9
    30c0:	8f 90       	pop	r8
    30c2:	08 95       	ret

000030c4 <decodeGesture>:
    30c4:	80 91 2e 24 	lds	r24, 0x242E
    30c8:	90 91 2f 24 	lds	r25, 0x242F
    30cc:	81 30       	cpi	r24, 0x01	; 1
    30ce:	91 05       	cpc	r25, r1
    30d0:	49 f4       	brne	.+18     	; 0x30e4 <decodeGesture+0x20>
    30d2:	85 e0       	ldi	r24, 0x05	; 5
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	80 93 47 24 	sts	0x2447, r24
    30da:	90 93 48 24 	sts	0x2448, r25
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	08 95       	ret
    30e4:	02 97       	sbiw	r24, 0x02	; 2
    30e6:	49 f4       	brne	.+18     	; 0x30fa <decodeGesture+0x36>
    30e8:	86 e0       	ldi	r24, 0x06	; 6
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	80 93 47 24 	sts	0x2447, r24
    30f0:	90 93 48 24 	sts	0x2448, r25
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	08 95       	ret
    30fa:	80 91 20 24 	lds	r24, 0x2420
    30fe:	90 91 21 24 	lds	r25, 0x2421
    3102:	8f 3f       	cpi	r24, 0xFF	; 255
    3104:	2f ef       	ldi	r18, 0xFF	; 255
    3106:	92 07       	cpc	r25, r18
    3108:	79 f4       	brne	.+30     	; 0x3128 <decodeGesture+0x64>
    310a:	20 91 2c 24 	lds	r18, 0x242C
    310e:	30 91 2d 24 	lds	r19, 0x242D
    3112:	23 2b       	or	r18, r19
    3114:	c9 f5       	brne	.+114    	; 0x3188 <decodeGesture+0xc4>
    3116:	83 e0       	ldi	r24, 0x03	; 3
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	80 93 47 24 	sts	0x2447, r24
    311e:	90 93 48 24 	sts	0x2448, r25
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	08 95       	ret
    3128:	81 30       	cpi	r24, 0x01	; 1
    312a:	91 05       	cpc	r25, r1
    312c:	81 f4       	brne	.+32     	; 0x314e <decodeGesture+0x8a>
    312e:	20 91 2c 24 	lds	r18, 0x242C
    3132:	30 91 2d 24 	lds	r19, 0x242D
    3136:	23 2b       	or	r18, r19
    3138:	09 f0       	breq	.+2      	; 0x313c <decodeGesture+0x78>
    313a:	58 c0       	rjmp	.+176    	; 0x31ec <decodeGesture+0x128>
    313c:	84 e0       	ldi	r24, 0x04	; 4
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	80 93 47 24 	sts	0x2447, r24
    3144:	90 93 48 24 	sts	0x2448, r25
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	08 95       	ret
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	d9 f4       	brne	.+54     	; 0x3188 <decodeGesture+0xc4>
    3152:	20 91 2c 24 	lds	r18, 0x242C
    3156:	30 91 2d 24 	lds	r19, 0x242D
    315a:	21 30       	cpi	r18, 0x01	; 1
    315c:	31 05       	cpc	r19, r1
    315e:	49 f4       	brne	.+18     	; 0x3172 <decodeGesture+0xae>
    3160:	82 e0       	ldi	r24, 0x02	; 2
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	80 93 47 24 	sts	0x2447, r24
    3168:	90 93 48 24 	sts	0x2448, r25
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	08 95       	ret
    3172:	2f 3f       	cpi	r18, 0xFF	; 255
    3174:	3f 4f       	sbci	r19, 0xFF	; 255
    3176:	09 f0       	breq	.+2      	; 0x317a <decodeGesture+0xb6>
    3178:	68 c0       	rjmp	.+208    	; 0x324a <decodeGesture+0x186>
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	80 93 47 24 	sts	0x2447, r24
    3182:	90 93 48 24 	sts	0x2448, r25
    3186:	08 95       	ret
    3188:	8f 3f       	cpi	r24, 0xFF	; 255
    318a:	2f ef       	ldi	r18, 0xFF	; 255
    318c:	92 07       	cpc	r25, r18
    318e:	71 f5       	brne	.+92     	; 0x31ec <decodeGesture+0x128>
    3190:	80 91 2c 24 	lds	r24, 0x242C
    3194:	90 91 2d 24 	lds	r25, 0x242D
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	09 f0       	breq	.+2      	; 0x319e <decodeGesture+0xda>
    319c:	5a c0       	rjmp	.+180    	; 0x3252 <decodeGesture+0x18e>
    319e:	20 91 45 24 	lds	r18, 0x2445
    31a2:	30 91 46 24 	lds	r19, 0x2446
    31a6:	33 23       	and	r19, r19
    31a8:	1c f4       	brge	.+6      	; 0x31b0 <decodeGesture+0xec>
    31aa:	31 95       	neg	r19
    31ac:	21 95       	neg	r18
    31ae:	31 09       	sbc	r19, r1
    31b0:	80 91 3c 24 	lds	r24, 0x243C
    31b4:	90 91 3d 24 	lds	r25, 0x243D
    31b8:	99 23       	and	r25, r25
    31ba:	1c f4       	brge	.+6      	; 0x31c2 <decodeGesture+0xfe>
    31bc:	91 95       	neg	r25
    31be:	81 95       	neg	r24
    31c0:	91 09       	sbc	r25, r1
    31c2:	82 17       	cp	r24, r18
    31c4:	93 07       	cpc	r25, r19
    31c6:	4c f4       	brge	.+18     	; 0x31da <decodeGesture+0x116>
    31c8:	83 e0       	ldi	r24, 0x03	; 3
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	80 93 47 24 	sts	0x2447, r24
    31d0:	90 93 48 24 	sts	0x2448, r25
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	08 95       	ret
    31da:	82 e0       	ldi	r24, 0x02	; 2
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	80 93 47 24 	sts	0x2447, r24
    31e2:	90 93 48 24 	sts	0x2448, r25
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	08 95       	ret
    31ec:	81 30       	cpi	r24, 0x01	; 1
    31ee:	91 05       	cpc	r25, r1
    31f0:	61 f5       	brne	.+88     	; 0x324a <decodeGesture+0x186>
    31f2:	80 91 2c 24 	lds	r24, 0x242C
    31f6:	90 91 2d 24 	lds	r25, 0x242D
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	09 f0       	breq	.+2      	; 0x3200 <decodeGesture+0x13c>
    31fe:	57 c0       	rjmp	.+174    	; 0x32ae <decodeGesture+0x1ea>
    3200:	20 91 45 24 	lds	r18, 0x2445
    3204:	30 91 46 24 	lds	r19, 0x2446
    3208:	33 23       	and	r19, r19
    320a:	1c f4       	brge	.+6      	; 0x3212 <decodeGesture+0x14e>
    320c:	31 95       	neg	r19
    320e:	21 95       	neg	r18
    3210:	31 09       	sbc	r19, r1
    3212:	80 91 3c 24 	lds	r24, 0x243C
    3216:	90 91 3d 24 	lds	r25, 0x243D
    321a:	99 23       	and	r25, r25
    321c:	1c f4       	brge	.+6      	; 0x3224 <decodeGesture+0x160>
    321e:	91 95       	neg	r25
    3220:	81 95       	neg	r24
    3222:	91 09       	sbc	r25, r1
    3224:	82 17       	cp	r24, r18
    3226:	93 07       	cpc	r25, r19
    3228:	4c f4       	brge	.+18     	; 0x323c <decodeGesture+0x178>
    322a:	84 e0       	ldi	r24, 0x04	; 4
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	80 93 47 24 	sts	0x2447, r24
    3232:	90 93 48 24 	sts	0x2448, r25
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	08 95       	ret
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	80 93 47 24 	sts	0x2447, r24
    3244:	90 93 48 24 	sts	0x2448, r25
    3248:	08 95       	ret
    324a:	8f 3f       	cpi	r24, 0xFF	; 255
    324c:	2f ef       	ldi	r18, 0xFF	; 255
    324e:	92 07       	cpc	r25, r18
    3250:	61 f5       	brne	.+88     	; 0x32aa <decodeGesture+0x1e6>
    3252:	80 91 2c 24 	lds	r24, 0x242C
    3256:	90 91 2d 24 	lds	r25, 0x242D
    325a:	01 96       	adiw	r24, 0x01	; 1
    325c:	09 f0       	breq	.+2      	; 0x3260 <decodeGesture+0x19c>
    325e:	54 c0       	rjmp	.+168    	; 0x3308 <decodeGesture+0x244>
    3260:	20 91 45 24 	lds	r18, 0x2445
    3264:	30 91 46 24 	lds	r19, 0x2446
    3268:	33 23       	and	r19, r19
    326a:	1c f4       	brge	.+6      	; 0x3272 <decodeGesture+0x1ae>
    326c:	31 95       	neg	r19
    326e:	21 95       	neg	r18
    3270:	31 09       	sbc	r19, r1
    3272:	80 91 3c 24 	lds	r24, 0x243C
    3276:	90 91 3d 24 	lds	r25, 0x243D
    327a:	99 23       	and	r25, r25
    327c:	1c f4       	brge	.+6      	; 0x3284 <decodeGesture+0x1c0>
    327e:	91 95       	neg	r25
    3280:	81 95       	neg	r24
    3282:	91 09       	sbc	r25, r1
    3284:	82 17       	cp	r24, r18
    3286:	93 07       	cpc	r25, r19
    3288:	4c f4       	brge	.+18     	; 0x329c <decodeGesture+0x1d8>
    328a:	83 e0       	ldi	r24, 0x03	; 3
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	80 93 47 24 	sts	0x2447, r24
    3292:	90 93 48 24 	sts	0x2448, r25
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	08 95       	ret
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	80 93 47 24 	sts	0x2447, r24
    32a4:	90 93 48 24 	sts	0x2448, r25
    32a8:	08 95       	ret
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	81 f5       	brne	.+96     	; 0x330e <decodeGesture+0x24a>
    32ae:	80 91 2c 24 	lds	r24, 0x242C
    32b2:	90 91 2d 24 	lds	r25, 0x242D
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	69 f5       	brne	.+90     	; 0x3314 <decodeGesture+0x250>
    32ba:	20 91 45 24 	lds	r18, 0x2445
    32be:	30 91 46 24 	lds	r19, 0x2446
    32c2:	33 23       	and	r19, r19
    32c4:	1c f4       	brge	.+6      	; 0x32cc <decodeGesture+0x208>
    32c6:	31 95       	neg	r19
    32c8:	21 95       	neg	r18
    32ca:	31 09       	sbc	r19, r1
    32cc:	80 91 3c 24 	lds	r24, 0x243C
    32d0:	90 91 3d 24 	lds	r25, 0x243D
    32d4:	99 23       	and	r25, r25
    32d6:	1c f4       	brge	.+6      	; 0x32de <decodeGesture+0x21a>
    32d8:	91 95       	neg	r25
    32da:	81 95       	neg	r24
    32dc:	91 09       	sbc	r25, r1
    32de:	82 17       	cp	r24, r18
    32e0:	93 07       	cpc	r25, r19
    32e2:	4c f4       	brge	.+18     	; 0x32f6 <decodeGesture+0x232>
    32e4:	84 e0       	ldi	r24, 0x04	; 4
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	80 93 47 24 	sts	0x2447, r24
    32ec:	90 93 48 24 	sts	0x2448, r25
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	08 95       	ret
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	80 93 47 24 	sts	0x2447, r24
    32fe:	90 93 48 24 	sts	0x2448, r25
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	08 95       	ret
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	08 95       	ret
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	08 95       	ret
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	08 95       	ret

0000331a <wireReadDataByte>:
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	2b 97       	sbiw	r28, 0x0b	; 11
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	fe 01       	movw	r30, r28
    332a:	31 96       	adiw	r30, 0x01	; 1
    332c:	9b e0       	ldi	r25, 0x0B	; 11
    332e:	df 01       	movw	r26, r30
    3330:	1d 92       	st	X+, r1
    3332:	9a 95       	dec	r25
    3334:	e9 f7       	brne	.-6      	; 0x3330 <wireReadDataByte+0x16>
    3336:	99 e3       	ldi	r25, 0x39	; 57
    3338:	99 83       	std	Y+1, r25	; 0x01
    333a:	8a 83       	std	Y+2, r24	; 0x02
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	8d 83       	std	Y+5, r24	; 0x05
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	6f 83       	std	Y+7, r22	; 0x07
    3346:	78 87       	std	Y+8, r23	; 0x08
    3348:	89 87       	std	Y+9, r24	; 0x09
    334a:	9a 87       	std	Y+10, r25	; 0x0a
    334c:	41 e0       	ldi	r20, 0x01	; 1
    334e:	bf 01       	movw	r22, r30
    3350:	80 ea       	ldi	r24, 0xA0	; 160
    3352:	94 e0       	ldi	r25, 0x04	; 4
    3354:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <twi_master_transfer>
    3358:	21 e0       	ldi	r18, 0x01	; 1
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	88 23       	and	r24, r24
    335e:	11 f0       	breq	.+4      	; 0x3364 <wireReadDataByte+0x4a>
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	c9 01       	movw	r24, r18
    3366:	2b 96       	adiw	r28, 0x0b	; 11
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	08 95       	ret

00003372 <getMode>:
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
    3376:	1f 92       	push	r1
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
    337c:	be 01       	movw	r22, r28
    337e:	6f 5f       	subi	r22, 0xFF	; 255
    3380:	7f 4f       	sbci	r23, 0xFF	; 255
    3382:	80 e8       	ldi	r24, 0x80	; 128
    3384:	ca df       	rcall	.-108    	; 0x331a <wireReadDataByte>
    3386:	89 2b       	or	r24, r25
    3388:	11 f0       	breq	.+4      	; 0x338e <getMode+0x1c>
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	01 c0       	rjmp	.+2      	; 0x3390 <getMode+0x1e>
    338e:	8f ef       	ldi	r24, 0xFF	; 255
    3390:	0f 90       	pop	r0
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	08 95       	ret

00003398 <isGestureAvailable>:
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
    339c:	1f 92       	push	r1
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	be 01       	movw	r22, r28
    33a4:	6f 5f       	subi	r22, 0xFF	; 255
    33a6:	7f 4f       	sbci	r23, 0xFF	; 255
    33a8:	8f ea       	ldi	r24, 0xAF	; 175
    33aa:	b7 df       	rcall	.-146    	; 0x331a <wireReadDataByte>
    33ac:	89 2b       	or	r24, r25
    33ae:	39 f0       	breq	.+14     	; 0x33be <isGestureAvailable+0x26>
    33b0:	29 81       	ldd	r18, Y+1	; 0x01
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	20 fd       	sbrc	r18, 0
    33b8:	04 c0       	rjmp	.+8      	; 0x33c2 <isGestureAvailable+0x2a>
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <isGestureAvailable+0x2a>
    33be:	8f ef       	ldi	r24, 0xFF	; 255
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0f 90       	pop	r0
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	08 95       	ret

000033ca <wireReadDataBlock>:
 * @param[out] val pointer to the beginning of the data
 * @param[in] len number of bytes to read
 * @return Number of bytes read. -1 on read error.
 */
int wireReadDataBlock(uint8_t reg, uint8_t *val, unsigned int len)
{
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	2b 97       	sbiw	r28, 0x0b	; 11
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	04 2f       	mov	r16, r20
    33de:	15 2f       	mov	r17, r21
	twi_package_t packet_read = {
    33e0:	fe 01       	movw	r30, r28
    33e2:	31 96       	adiw	r30, 0x01	; 1
    33e4:	9b e0       	ldi	r25, 0x0B	; 11
    33e6:	df 01       	movw	r26, r30
    33e8:	1d 92       	st	X+, r1
    33ea:	9a 95       	dec	r25
    33ec:	e9 f7       	brne	.-6      	; 0x33e8 <wireReadDataBlock+0x1e>
    33ee:	99 e3       	ldi	r25, 0x39	; 57
    33f0:	99 83       	std	Y+1, r25	; 0x01
    33f2:	8a 83       	std	Y+2, r24	; 0x02
    33f4:	21 e0       	ldi	r18, 0x01	; 1
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	2d 83       	std	Y+5, r18	; 0x05
    33fa:	3e 83       	std	Y+6, r19	; 0x06
    33fc:	6f 83       	std	Y+7, r22	; 0x07
    33fe:	78 87       	std	Y+8, r23	; 0x08
    3400:	49 87       	std	Y+9, r20	; 0x09
    3402:	5a 87       	std	Y+10, r21	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    3404:	41 e0       	ldi	r20, 0x01	; 1
    3406:	bf 01       	movw	r22, r30
    3408:	80 ea       	ldi	r24, 0xA0	; 160
    340a:	94 e0       	ldi	r25, 0x04	; 4
    340c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <twi_master_transfer>
		.chip         = APDS9960_I2C_ADDR,      // TWI slave bus address
		.buffer       = val,        // transfer data destination buffer
		.length       = len                    // transfer data size (bytes)
	};
		
	if(twi_master_read(TWI_PORT_AD, &packet_read) == TWI_SUCCESS)
    3410:	81 11       	cpse	r24, r1
    3412:	03 c0       	rjmp	.+6      	; 0x341a <wireReadDataBlock+0x50>
	{
		return len;
    3414:	80 2f       	mov	r24, r16
    3416:	91 2f       	mov	r25, r17
    3418:	02 c0       	rjmp	.+4      	; 0x341e <wireReadDataBlock+0x54>
	}
		
	return -1;
    341a:	8f ef       	ldi	r24, 0xFF	; 255
    341c:	9f ef       	ldi	r25, 0xFF	; 255
    341e:	2b 96       	adiw	r28, 0x0b	; 11
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	08 95       	ret

0000342e <readGesture>:
 * @brief Processes a gesture event and returns best guessed gesture
 *
 * @return Number corresponding to gesture. -1 on error.
 */
int readGesture()
{
    342e:	2f 92       	push	r2
    3430:	3f 92       	push	r3
    3432:	5f 92       	push	r5
    3434:	6f 92       	push	r6
    3436:	7f 92       	push	r7
    3438:	8f 92       	push	r8
    343a:	9f 92       	push	r9
    343c:	af 92       	push	r10
    343e:	bf 92       	push	r11
    3440:	cf 92       	push	r12
    3442:	df 92       	push	r13
    3444:	ef 92       	push	r14
    3446:	ff 92       	push	r15
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	c2 58       	subi	r28, 0x82	; 130
    3456:	d1 09       	sbc	r29, r1
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	de bf       	out	0x3e, r29	; 62
    uint8_t fifo_level = 0;
    345c:	19 82       	std	Y+1, r1	; 0x01
    uint8_t gstatus;
    int motion;
    int i;
    
    /* Make sure that power and gesture is on and data is valid */
    if( !isGestureAvailable() || !(getMode() & 0b01000001) ) {
    345e:	9c df       	rcall	.-200    	; 0x3398 <isGestureAvailable>
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	09 f4       	brne	.+2      	; 0x3466 <readGesture+0x38>
    3464:	b0 c0       	rjmp	.+352    	; 0x35c6 <readGesture+0x198>
    3466:	85 df       	rcall	.-246    	; 0x3372 <getMode>
    3468:	81 74       	andi	r24, 0x41	; 65
    346a:	09 f4       	brne	.+2      	; 0x346e <readGesture+0x40>
    346c:	a4 c0       	rjmp	.+328    	; 0x35b6 <readGesture+0x188>
    
        /* Wait some time to collect next batch of FIFO data */
        delay_ms(FIFO_PAUSE_TIME);
        
        /* Get the contents of the STATUS register. Is data still valid? */
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
    346e:	8e 01       	movw	r16, r28
    3470:	0e 57       	subi	r16, 0x7E	; 126
    3472:	1f 4f       	sbci	r17, 0xFF	; 255
 * @brief Processes a gesture event and returns best guessed gesture
 *
 * @return Number corresponding to gesture. -1 on error.
 */
int readGesture()
{
    3474:	68 94       	set
    3476:	66 24       	eor	r6, r6
    3478:	67 f8       	bld	r6, 7
    347a:	0f 2e       	mov	r0, r31
    347c:	f9 ea       	ldi	r31, 0xA9	; 169
    347e:	7f 2e       	mov	r7, r31
    3480:	f0 2d       	mov	r31, r0
    3482:	0f 2e       	mov	r0, r31
    3484:	f3 e0       	ldi	r31, 0x03	; 3
    3486:	8f 2e       	mov	r8, r31
    3488:	f0 2d       	mov	r31, r0
    348a:	91 2c       	mov	r9, r1
    
        /* Wait some time to collect next batch of FIFO data */
        delay_ms(FIFO_PAUSE_TIME);
        
        /* Get the contents of the STATUS register. Is data still valid? */
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
    348c:	a0 2e       	mov	r10, r16
    348e:	b1 2e       	mov	r11, r17
    3490:	0f 2e       	mov	r0, r31
    3492:	fb ec       	ldi	r31, 0xCB	; 203
    3494:	cf 2e       	mov	r12, r31
    3496:	f4 e2       	ldi	r31, 0x24	; 36
    3498:	df 2e       	mov	r13, r31
    349a:	f0 2d       	mov	r31, r0
    349c:	0f 2e       	mov	r0, r31
    349e:	fc ec       	ldi	r31, 0xCC	; 204
    34a0:	ef 2e       	mov	r14, r31
    34a2:	f4 e2       	ldi	r31, 0x24	; 36
    34a4:	ff 2e       	mov	r15, r31
    34a6:	f0 2d       	mov	r31, r0
 * @brief Processes a gesture event and returns best guessed gesture
 *
 * @return Number corresponding to gesture. -1 on error.
 */
int readGesture()
{
    34a8:	86 2d       	mov	r24, r6
    34aa:	97 2d       	mov	r25, r7
    34ac:	a8 2d       	mov	r26, r8
    34ae:	b9 2d       	mov	r27, r9
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	a1 09       	sbc	r26, r1
    34b4:	b1 09       	sbc	r27, r1
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	a1 05       	cpc	r26, r1
    34ba:	b1 05       	cpc	r27, r1
    34bc:	c9 f7       	brne	.-14     	; 0x34b0 <readGesture+0x82>
    
        /* Wait some time to collect next batch of FIFO data */
        delay_ms(FIFO_PAUSE_TIME);
        
        /* Get the contents of the STATUS register. Is data still valid? */
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
    34be:	6a 2d       	mov	r22, r10
    34c0:	7b 2d       	mov	r23, r11
    34c2:	8f ea       	ldi	r24, 0xAF	; 175
    34c4:	2a df       	rcall	.-428    	; 0x331a <wireReadDataByte>
    34c6:	89 2b       	or	r24, r25
    34c8:	09 f4       	brne	.+2      	; 0x34cc <readGesture+0x9e>
    34ca:	78 c0       	rjmp	.+240    	; 0x35bc <readGesture+0x18e>
            return ERROR;
        }
        
        /* If we have valid data, read in FIFO */
        if( (gstatus & APDS9960_GVALID) == APDS9960_GVALID ) {
    34cc:	d8 01       	movw	r26, r16
    34ce:	8c 91       	ld	r24, X
    34d0:	80 ff       	sbrs	r24, 0
    34d2:	5d c0       	rjmp	.+186    	; 0x358e <readGesture+0x160>
        
            /* Read the current FIFO level */
            if( !wireReadDataByte(APDS9960_GFLVL, &fifo_level) ) {
    34d4:	be 01       	movw	r22, r28
    34d6:	6f 5f       	subi	r22, 0xFF	; 255
    34d8:	7f 4f       	sbci	r23, 0xFF	; 255
    34da:	8e ea       	ldi	r24, 0xAE	; 174
    34dc:	1e df       	rcall	.-452    	; 0x331a <wireReadDataByte>
    34de:	89 2b       	or	r24, r25
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <readGesture+0xb6>
    34e2:	6f c0       	rjmp	.+222    	; 0x35c2 <readGesture+0x194>
#if DEBUG
            printf("FIFO Level: %d \n",fifo_level);
#endif

            /* If there's stuff in the FIFO, read it into our data block */
            if( fifo_level > 0) {
    34e4:	49 81       	ldd	r20, Y+1	; 0x01
    34e6:	44 23       	and	r20, r20
    34e8:	f9 f2       	breq	.-66     	; 0x34a8 <readGesture+0x7a>
                bytes_read = wireReadDataBlock(APDS9960_GFIFO_U, fifo_data, (fifo_level * 4) );
    34ea:	50 e0       	ldi	r21, 0x00	; 0
    34ec:	44 0f       	add	r20, r20
    34ee:	55 1f       	adc	r21, r21
    34f0:	44 0f       	add	r20, r20
    34f2:	55 1f       	adc	r21, r21
    34f4:	be 01       	movw	r22, r28
    34f6:	6e 5f       	subi	r22, 0xFE	; 254
    34f8:	7f 4f       	sbci	r23, 0xFF	; 255
    34fa:	8c ef       	ldi	r24, 0xFC	; 252
    34fc:	66 df       	rcall	.-308    	; 0x33ca <wireReadDataBlock>
                }
                printf("\n");
#endif

                /* If at least 1 set of data, sort the data into U/D/L/R */
                if( bytes_read >= 4 ) {
    34fe:	84 30       	cpi	r24, 0x04	; 4
    3500:	98 f2       	brcs	.-90     	; 0x34a8 <readGesture+0x7a>
                    for( i = 0; i < bytes_read; i += 4 ) {
    3502:	99 27       	eor	r25, r25
    3504:	18 16       	cp	r1, r24
    3506:	19 06       	cpc	r1, r25
    3508:	cc f5       	brge	.+114    	; 0x357c <readGesture+0x14e>
    350a:	f6 01       	movw	r30, r12
    350c:	60 81       	ld	r22, Z
    350e:	d7 01       	movw	r26, r14
    3510:	5c 90       	ld	r5, X
    3512:	fe 01       	movw	r30, r28
    3514:	35 96       	adiw	r30, 0x05	; 5
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	ac 01       	movw	r20, r24
    351a:	56 95       	lsr	r21
    351c:	47 95       	ror	r20
    351e:	56 95       	lsr	r21
    3520:	47 95       	ror	r20
    3522:	71 e0       	ldi	r23, 0x01	; 1
    3524:	76 0f       	add	r23, r22
    3526:	74 0f       	add	r23, r20
                        gesture_data_.u_data[gesture_data_.index] = fifo_data[i + 0];
    3528:	a6 2f       	mov	r26, r22
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	cd 01       	movw	r24, r26
    352e:	85 5b       	subi	r24, 0xB5	; 181
    3530:	9b 4d       	sbci	r25, 0xDB	; 219
    3532:	1c 01       	movw	r2, r24
    3534:	cf 01       	movw	r24, r30
    3536:	03 97       	sbiw	r24, 0x03	; 3
    3538:	dc 01       	movw	r26, r24
    353a:	8c 91       	ld	r24, X
    353c:	d1 01       	movw	r26, r2
    353e:	8c 93       	st	X, r24
    3540:	cf 01       	movw	r24, r30
    3542:	02 97       	sbiw	r24, 0x02	; 2
                        gesture_data_.d_data[gesture_data_.index] = fifo_data[i + 1];
    3544:	dc 01       	movw	r26, r24
    3546:	8c 91       	ld	r24, X
    3548:	d1 01       	movw	r26, r2
    354a:	90 96       	adiw	r26, 0x20	; 32
    354c:	8c 93       	st	X, r24
                        gesture_data_.l_data[gesture_data_.index] = fifo_data[i + 2];
    354e:	c1 01       	movw	r24, r2
    3550:	80 5c       	subi	r24, 0xC0	; 192
    3552:	9f 4f       	sbci	r25, 0xFF	; 255
    3554:	9f 01       	movw	r18, r30
    3556:	21 50       	subi	r18, 0x01	; 1
    3558:	31 09       	sbc	r19, r1
    355a:	d9 01       	movw	r26, r18
    355c:	2c 91       	ld	r18, X
    355e:	dc 01       	movw	r26, r24
    3560:	2c 93       	st	X, r18
                        gesture_data_.r_data[gesture_data_.index] = fifo_data[i + 3];
    3562:	80 81       	ld	r24, Z
    3564:	90 96       	adiw	r26, 0x20	; 32
    3566:	8c 93       	st	X, r24
    3568:	6f 5f       	subi	r22, 0xFF	; 255
    356a:	34 96       	adiw	r30, 0x04	; 4
                printf("\n");
#endif

                /* If at least 1 set of data, sort the data into U/D/L/R */
                if( bytes_read >= 4 ) {
                    for( i = 0; i < bytes_read; i += 4 ) {
    356c:	67 13       	cpse	r22, r23
    356e:	dc cf       	rjmp	.-72     	; 0x3528 <readGesture+0xfa>
    3570:	53 94       	inc	r5
    3572:	f6 01       	movw	r30, r12
    3574:	70 83       	st	Z, r23
    3576:	45 0d       	add	r20, r5
    3578:	d7 01       	movw	r26, r14
    357a:	4c 93       	st	X, r20
                }
                printf("\n");
#endif

                    /* Filter and process gesture data. Decode near/far state */
                    if( processGestureData() ) {
    357c:	d3 db       	rcall	.-2138   	; 0x2d24 <processGestureData>
    357e:	89 2b       	or	r24, r25
    3580:	09 f0       	breq	.+2      	; 0x3584 <readGesture+0x156>
                        if( decodeGesture() ) {
    3582:	a0 dd       	rcall	.-1216   	; 0x30c4 <decodeGesture>
#endif
                        }
                    }
                    
                    /* Reset data */
                    gesture_data_.index = 0;
    3584:	f6 01       	movw	r30, r12
    3586:	10 82       	st	Z, r1
                    gesture_data_.total_gestures = 0;
    3588:	d7 01       	movw	r26, r14
    358a:	1c 92       	st	X, r1
    358c:	8d cf       	rjmp	.-230    	; 0x34a8 <readGesture+0x7a>
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
            return ERROR;
        }
        
        /* If we have valid data, read in FIFO */
        if( (gstatus & APDS9960_GVALID) == APDS9960_GVALID ) {
    358e:	80 e8       	ldi	r24, 0x80	; 128
    3590:	99 ea       	ldi	r25, 0xA9	; 169
    3592:	a3 e0       	ldi	r26, 0x03	; 3
    3594:	b0 e0       	ldi	r27, 0x00	; 0
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	a1 09       	sbc	r26, r1
    359a:	b1 09       	sbc	r27, r1
    359c:	00 97       	sbiw	r24, 0x00	; 0
    359e:	a1 05       	cpc	r26, r1
    35a0:	b1 05       	cpc	r27, r1
    35a2:	c9 f7       	brne	.-14     	; 0x3596 <readGesture+0x168>
            }
        } else {
    
            /* Determine best guessed gesture and clean up */
            delay_ms(FIFO_PAUSE_TIME);
            decodeGesture();
    35a4:	8f dd       	rcall	.-1250   	; 0x30c4 <decodeGesture>
            motion = gesture_motion_;
    35a6:	00 91 47 24 	lds	r16, 0x2447
    35aa:	10 91 48 24 	lds	r17, 0x2448
#if DEBUG
            printf("END: %d \n",gesture_motion_);
#endif
            resetGestureParameters();
    35ae:	95 db       	rcall	.-2262   	; 0x2cda <resetGestureParameters>
            return motion;
    35b0:	80 2f       	mov	r24, r16
    35b2:	91 2f       	mov	r25, r17
    35b4:	08 c0       	rjmp	.+16     	; 0x35c6 <readGesture+0x198>
    int motion;
    int i;
    
    /* Make sure that power and gesture is on and data is valid */
    if( !isGestureAvailable() || !(getMode() & 0b01000001) ) {
        return DIR_NONE;
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	05 c0       	rjmp	.+10     	; 0x35c6 <readGesture+0x198>
        /* Wait some time to collect next batch of FIFO data */
        delay_ms(FIFO_PAUSE_TIME);
        
        /* Get the contents of the STATUS register. Is data still valid? */
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
            return ERROR;
    35bc:	8f ef       	ldi	r24, 0xFF	; 255
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <readGesture+0x198>
        /* If we have valid data, read in FIFO */
        if( (gstatus & APDS9960_GVALID) == APDS9960_GVALID ) {
        
            /* Read the current FIFO level */
            if( !wireReadDataByte(APDS9960_GFLVL, &fifo_level) ) {
                return ERROR;
    35c2:	8f ef       	ldi	r24, 0xFF	; 255
    35c4:	90 e0       	ldi	r25, 0x00	; 0
#endif
            resetGestureParameters();
            return motion;
        }
    }
}
    35c6:	ce 57       	subi	r28, 0x7E	; 126
    35c8:	df 4f       	sbci	r29, 0xFF	; 255
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	ff 90       	pop	r15
    35d8:	ef 90       	pop	r14
    35da:	df 90       	pop	r13
    35dc:	cf 90       	pop	r12
    35de:	bf 90       	pop	r11
    35e0:	af 90       	pop	r10
    35e2:	9f 90       	pop	r9
    35e4:	8f 90       	pop	r8
    35e6:	7f 90       	pop	r7
    35e8:	6f 90       	pop	r6
    35ea:	5f 90       	pop	r5
    35ec:	3f 90       	pop	r3
    35ee:	2f 90       	pop	r2
    35f0:	08 95       	ret

000035f2 <set_pin_as_output>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    35f2:	e8 2f       	mov	r30, r24
    35f4:	e6 95       	lsr	r30
    35f6:	e6 95       	lsr	r30
    35f8:	e6 95       	lsr	r30
    35fa:	40 e2       	ldi	r20, 0x20	; 32
    35fc:	e4 9f       	mul	r30, r20
    35fe:	f0 01       	movw	r30, r0
    3600:	11 24       	eor	r1, r1
    3602:	fa 5f       	subi	r31, 0xFA	; 250
    3604:	87 70       	andi	r24, 0x07	; 7
    3606:	21 e0       	ldi	r18, 0x01	; 1
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	a9 01       	movw	r20, r18
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <set_pin_as_output+0x20>
    360e:	44 0f       	add	r20, r20
    3610:	55 1f       	adc	r21, r21
    3612:	8a 95       	dec	r24
    3614:	e2 f7       	brpl	.-8      	; 0x360e <set_pin_as_output+0x1c>
    3616:	41 83       	std	Z+1, r20	; 0x01
    3618:	08 95       	ret

0000361a <pin_level>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    361a:	e8 2f       	mov	r30, r24
    361c:	e6 95       	lsr	r30
    361e:	e6 95       	lsr	r30
    3620:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    3622:	40 e2       	ldi	r20, 0x20	; 32
    3624:	e4 9f       	mul	r30, r20
    3626:	f0 01       	movw	r30, r0
    3628:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    362a:	fa 5f       	subi	r31, 0xFA	; 250
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    362c:	67 2b       	or	r22, r23
    362e:	59 f0       	breq	.+22     	; 0x3646 <pin_level+0x2c>
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    3630:	87 70       	andi	r24, 0x07	; 7
    3632:	21 e0       	ldi	r18, 0x01	; 1
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	a9 01       	movw	r20, r18
    3638:	02 c0       	rjmp	.+4      	; 0x363e <pin_level+0x24>
    363a:	44 0f       	add	r20, r20
    363c:	55 1f       	adc	r21, r21
    363e:	8a 95       	dec	r24
    3640:	e2 f7       	brpl	.-8      	; 0x363a <pin_level+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3642:	45 83       	std	Z+5, r20	; 0x05
    3644:	08 95       	ret
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    3646:	87 70       	andi	r24, 0x07	; 7
    3648:	21 e0       	ldi	r18, 0x01	; 1
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	a9 01       	movw	r20, r18
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <pin_level+0x3a>
    3650:	44 0f       	add	r20, r20
    3652:	55 1f       	adc	r21, r21
    3654:	8a 95       	dec	r24
    3656:	e2 f7       	brpl	.-8      	; 0x3650 <pin_level+0x36>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3658:	46 83       	std	Z+6, r20	; 0x06
    365a:	08 95       	ret

0000365c <read_pin>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    365c:	e8 2f       	mov	r30, r24
    365e:	e6 95       	lsr	r30
    3660:	e6 95       	lsr	r30
    3662:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    3664:	60 e2       	ldi	r22, 0x20	; 32
    3666:	e6 9f       	mul	r30, r22
    3668:	f0 01       	movw	r30, r0
    366a:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    366c:	fa 5f       	subi	r31, 0xFA	; 250

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    366e:	40 85       	ldd	r20, Z+8	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    3670:	87 70       	andi	r24, 0x07	; 7
    3672:	21 e0       	ldi	r18, 0x01	; 1
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	b9 01       	movw	r22, r18
    3678:	02 c0       	rjmp	.+4      	; 0x367e <read_pin+0x22>
    367a:	66 0f       	add	r22, r22
    367c:	77 1f       	adc	r23, r23
    367e:	8a 95       	dec	r24
    3680:	e2 f7       	brpl	.-8      	; 0x367a <read_pin+0x1e>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    3682:	24 2f       	mov	r18, r20
    3684:	26 23       	and	r18, r22
    3686:	81 e0       	ldi	r24, 0x01	; 1
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	11 f4       	brne	.+4      	; 0x3690 <read_pin+0x34>
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	90 e0       	ldi	r25, 0x00	; 0
}

int read_pin(ioport_pin_t pin)
{
	return ioport_get_pin_level(pin);
    3690:	08 95       	ret

00003692 <select_timer>:
	M4_B=PIN_B;
	set_pin_as_output(M4_A);
	set_pin_as_output(M4_B);
	pwm_init(&M4_pwm, select_timer(PWM), select_channel(PWM), MOTOR_FREQ);
	pwm_start(&M4_pwm,0);
}
    3692:	9c 01       	movw	r18, r24
    3694:	21 50       	subi	r18, 0x01	; 1
    3696:	31 09       	sbc	r19, r1
    3698:	23 30       	cpi	r18, 0x03	; 3
    369a:	31 05       	cpc	r19, r1
    369c:	a8 f0       	brcs	.+42     	; 0x36c8 <select_timer+0x36>
    369e:	23 50       	subi	r18, 0x03	; 3
    36a0:	31 09       	sbc	r19, r1
    36a2:	22 30       	cpi	r18, 0x02	; 2
    36a4:	31 05       	cpc	r19, r1
    36a6:	98 f0       	brcs	.+38     	; 0x36ce <select_timer+0x3c>
    36a8:	22 50       	subi	r18, 0x02	; 2
    36aa:	31 09       	sbc	r19, r1
    36ac:	24 30       	cpi	r18, 0x04	; 4
    36ae:	31 05       	cpc	r19, r1
    36b0:	88 f0       	brcs	.+34     	; 0x36d4 <select_timer+0x42>
    36b2:	24 50       	subi	r18, 0x04	; 4
    36b4:	31 09       	sbc	r19, r1
    36b6:	22 30       	cpi	r18, 0x02	; 2
    36b8:	31 05       	cpc	r19, r1
    36ba:	78 f0       	brcs	.+30     	; 0x36da <select_timer+0x48>
    36bc:	0c 97       	sbiw	r24, 0x0c	; 12
    36be:	04 97       	sbiw	r24, 0x04	; 4
    36c0:	78 f4       	brcc	.+30     	; 0x36e0 <select_timer+0x4e>
    36c2:	84 e0       	ldi	r24, 0x04	; 4
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	08 95       	ret
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	08 95       	ret
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	08 95       	ret
    36d4:	82 e0       	ldi	r24, 0x02	; 2
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	08 95       	ret
    36da:	83 e0       	ldi	r24, 0x03	; 3
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	08 95       	ret
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	08 95       	ret

000036e6 <select_channel>:
    36e6:	81 30       	cpi	r24, 0x01	; 1
    36e8:	91 05       	cpc	r25, r1
    36ea:	41 f1       	breq	.+80     	; 0x373c <select_channel+0x56>
    36ec:	9c 01       	movw	r18, r24
    36ee:	2d 7f       	andi	r18, 0xFD	; 253
    36f0:	24 30       	cpi	r18, 0x04	; 4
    36f2:	31 05       	cpc	r19, r1
    36f4:	31 f1       	breq	.+76     	; 0x3742 <select_channel+0x5c>
    36f6:	8a 30       	cpi	r24, 0x0A	; 10
    36f8:	91 05       	cpc	r25, r1
    36fa:	31 f1       	breq	.+76     	; 0x3748 <select_channel+0x62>
    36fc:	8c 30       	cpi	r24, 0x0C	; 12
    36fe:	91 05       	cpc	r25, r1
    3700:	31 f1       	breq	.+76     	; 0x374e <select_channel+0x68>
    3702:	82 30       	cpi	r24, 0x02	; 2
    3704:	91 05       	cpc	r25, r1
    3706:	31 f1       	breq	.+76     	; 0x3754 <select_channel+0x6e>
    3708:	25 30       	cpi	r18, 0x05	; 5
    370a:	31 05       	cpc	r19, r1
    370c:	31 f1       	breq	.+76     	; 0x375a <select_channel+0x74>
    370e:	8b 30       	cpi	r24, 0x0B	; 11
    3710:	91 05       	cpc	r25, r1
    3712:	31 f1       	breq	.+76     	; 0x3760 <select_channel+0x7a>
    3714:	8d 30       	cpi	r24, 0x0D	; 13
    3716:	91 05       	cpc	r25, r1
    3718:	31 f1       	breq	.+76     	; 0x3766 <select_channel+0x80>
    371a:	83 30       	cpi	r24, 0x03	; 3
    371c:	91 05       	cpc	r25, r1
    371e:	31 f1       	breq	.+76     	; 0x376c <select_channel+0x86>
    3720:	88 30       	cpi	r24, 0x08	; 8
    3722:	91 05       	cpc	r25, r1
    3724:	31 f1       	breq	.+76     	; 0x3772 <select_channel+0x8c>
    3726:	8e 30       	cpi	r24, 0x0E	; 14
    3728:	91 05       	cpc	r25, r1
    372a:	31 f1       	breq	.+76     	; 0x3778 <select_channel+0x92>
    372c:	89 30       	cpi	r24, 0x09	; 9
    372e:	91 05       	cpc	r25, r1
    3730:	31 f1       	breq	.+76     	; 0x377e <select_channel+0x98>
    3732:	0f 97       	sbiw	r24, 0x0f	; 15
    3734:	39 f5       	brne	.+78     	; 0x3784 <select_channel+0x9e>
    3736:	84 e0       	ldi	r24, 0x04	; 4
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	08 95       	ret
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	08 95       	ret
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	08 95       	ret
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	08 95       	ret
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	08 95       	ret
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	08 95       	ret
    375a:	82 e0       	ldi	r24, 0x02	; 2
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	08 95       	ret
    3760:	82 e0       	ldi	r24, 0x02	; 2
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	08 95       	ret
    3766:	82 e0       	ldi	r24, 0x02	; 2
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	08 95       	ret
    376c:	83 e0       	ldi	r24, 0x03	; 3
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	08 95       	ret
    3772:	83 e0       	ldi	r24, 0x03	; 3
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	08 95       	ret
    3778:	83 e0       	ldi	r24, 0x03	; 3
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	08 95       	ret
    377e:	84 e0       	ldi	r24, 0x04	; 4
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	08 95       	ret
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	08 95       	ret

0000378a <init_M1>:
    378a:	1f 93       	push	r17
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	ea 01       	movw	r28, r20
    3792:	80 93 30 24 	sts	0x2430, r24
    3796:	60 93 22 24 	sts	0x2422, r22
    379a:	2b df       	rcall	.-426    	; 0x35f2 <set_pin_as_output>
    379c:	80 91 22 24 	lds	r24, 0x2422
    37a0:	28 df       	rcall	.-432    	; 0x35f2 <set_pin_as_output>
    37a2:	ce 01       	movw	r24, r28
    37a4:	a0 df       	rcall	.-192    	; 0x36e6 <select_channel>
    37a6:	18 2f       	mov	r17, r24
    37a8:	ce 01       	movw	r24, r28
    37aa:	73 df       	rcall	.-282    	; 0x3692 <select_timer>
    37ac:	20 e1       	ldi	r18, 0x10	; 16
    37ae:	37 e2       	ldi	r19, 0x27	; 39
    37b0:	41 2f       	mov	r20, r17
    37b2:	68 2f       	mov	r22, r24
    37b4:	85 e3       	ldi	r24, 0x35	; 53
    37b6:	94 e2       	ldi	r25, 0x24	; 36
    37b8:	90 d9       	rcall	.-3296   	; 0x2ada <pwm_init>
    37ba:	60 e0       	ldi	r22, 0x00	; 0
    37bc:	85 e3       	ldi	r24, 0x35	; 53
    37be:	94 e2       	ldi	r25, 0x24	; 36
    37c0:	3a da       	rcall	.-2956   	; 0x2c36 <pwm_start>
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	1f 91       	pop	r17
    37c8:	08 95       	ret

000037ca <motor1>:


void motor1(int speed)
{
    37ca:	cf 93       	push	r28
    37cc:	df 93       	push	r29
    37ce:	ec 01       	movw	r28, r24
	if (speed<0 )
    37d0:	99 23       	and	r25, r25
    37d2:	84 f4       	brge	.+32     	; 0x37f4 <motor1+0x2a>
	{
		if (MOTOR_1_DIR==FORWARD)
		{
			pin_level(M1_A,1);
    37d4:	61 e0       	ldi	r22, 0x01	; 1
    37d6:	70 e0       	ldi	r23, 0x00	; 0
    37d8:	80 91 30 24 	lds	r24, 0x2430
    37dc:	1e df       	rcall	.-452    	; 0x361a <pin_level>
			pin_level(M1_B,0);
    37de:	60 e0       	ldi	r22, 0x00	; 0
    37e0:	70 e0       	ldi	r23, 0x00	; 0
    37e2:	80 91 22 24 	lds	r24, 0x2422
    37e6:	19 df       	rcall	.-462    	; 0x361a <pin_level>
		else
		{
			pin_level(M1_A,0);
			pin_level(M1_B,1);
		}
		pwm_start(&M1_pwm, -speed);
    37e8:	6c 2f       	mov	r22, r28
    37ea:	61 95       	neg	r22
    37ec:	85 e3       	ldi	r24, 0x35	; 53
    37ee:	94 e2       	ldi	r25, 0x24	; 36
    37f0:	22 da       	rcall	.-3004   	; 0x2c36 <pwm_start>
    37f2:	0e c0       	rjmp	.+28     	; 0x3810 <motor1+0x46>
	}
	else
	{
		if (MOTOR_1_DIR==FORWARD)
		{
			pin_level(M1_A,0);
    37f4:	60 e0       	ldi	r22, 0x00	; 0
    37f6:	70 e0       	ldi	r23, 0x00	; 0
    37f8:	80 91 30 24 	lds	r24, 0x2430
    37fc:	0e df       	rcall	.-484    	; 0x361a <pin_level>
			pin_level(M1_B,1);
    37fe:	61 e0       	ldi	r22, 0x01	; 1
    3800:	70 e0       	ldi	r23, 0x00	; 0
    3802:	80 91 22 24 	lds	r24, 0x2422
    3806:	09 df       	rcall	.-494    	; 0x361a <pin_level>
		else
		{
			pin_level(M1_A,1);
			pin_level(M1_B,0);
		}
		pwm_start(&M1_pwm, speed);
    3808:	6c 2f       	mov	r22, r28
    380a:	85 e3       	ldi	r24, 0x35	; 53
    380c:	94 e2       	ldi	r25, 0x24	; 36
    380e:	13 da       	rcall	.-3034   	; 0x2c36 <pwm_start>
	}
}
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	08 95       	ret

00003816 <init_OctoPlus>:

#include "../OctoPlus.h"

void init_OctoPlus(void)
{
	sysclk_init();
    3816:	3b d8       	rcall	.-3978   	; 0x288e <sysclk_init>
	ioport_init();
	leds_init();
    3818:	03 d0       	rcall	.+6      	; 0x3820 <leds_init>
	switch_init();
    381a:	7c d2       	rcall	.+1272   	; 0x3d14 <switch_init>
	
	#ifdef ENABLE_RTC
		rtc_init();
	#endif
	#ifdef ENABLE_USB
		usb_init();
    381c:	a7 c2       	rjmp	.+1358   	; 0x3d6c <usb_init>
    381e:	08 95       	ret

00003820 <leds_init>:
	led1( ( leds & (1<<0) ) && (1<<0)  );
	led2( ( leds & (1<<1) ) && (1<<1)  );
	led3( ( leds & (1<<2) ) && (1<<2)  );
	led4( ( leds & (1<<3) ) && (1<<3)  );

}
    3820:	e0 e0       	ldi	r30, 0x00	; 0
    3822:	f6 e0       	ldi	r31, 0x06	; 6
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	81 83       	std	Z+1, r24	; 0x01
    3828:	82 e0       	ldi	r24, 0x02	; 2
    382a:	81 83       	std	Z+1, r24	; 0x01
    382c:	84 e0       	ldi	r24, 0x04	; 4
    382e:	81 83       	std	Z+1, r24	; 0x01
    3830:	88 e0       	ldi	r24, 0x08	; 8
    3832:	81 83       	std	Z+1, r24	; 0x01
    3834:	08 95       	ret

00003836 <led1>:
    3836:	81 30       	cpi	r24, 0x01	; 1
    3838:	91 05       	cpc	r25, r1
    383a:	31 f0       	breq	.+12     	; 0x3848 <led1+0x12>
    383c:	82 30       	cpi	r24, 0x02	; 2
    383e:	91 05       	cpc	r25, r1
    3840:	69 f0       	breq	.+26     	; 0x385c <led1+0x26>
    3842:	89 2b       	or	r24, r25
    3844:	79 f4       	brne	.+30     	; 0x3864 <led1+0x2e>
    3846:	05 c0       	rjmp	.+10     	; 0x3852 <led1+0x1c>
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	e0 e0       	ldi	r30, 0x00	; 0
    384c:	f6 e0       	ldi	r31, 0x06	; 6
    384e:	85 83       	std	Z+5, r24	; 0x05
    3850:	08 95       	ret
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	e0 e0       	ldi	r30, 0x00	; 0
    3856:	f6 e0       	ldi	r31, 0x06	; 6
    3858:	86 83       	std	Z+6, r24	; 0x06
    385a:	08 95       	ret
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	e0 e0       	ldi	r30, 0x00	; 0
    3860:	f6 e0       	ldi	r31, 0x06	; 6
    3862:	87 83       	std	Z+7, r24	; 0x07
    3864:	08 95       	ret

00003866 <led2>:
    3866:	81 30       	cpi	r24, 0x01	; 1
    3868:	91 05       	cpc	r25, r1
    386a:	31 f0       	breq	.+12     	; 0x3878 <led2+0x12>
    386c:	82 30       	cpi	r24, 0x02	; 2
    386e:	91 05       	cpc	r25, r1
    3870:	69 f0       	breq	.+26     	; 0x388c <led2+0x26>
    3872:	89 2b       	or	r24, r25
    3874:	79 f4       	brne	.+30     	; 0x3894 <led2+0x2e>
    3876:	05 c0       	rjmp	.+10     	; 0x3882 <led2+0x1c>
    3878:	82 e0       	ldi	r24, 0x02	; 2
    387a:	e0 e0       	ldi	r30, 0x00	; 0
    387c:	f6 e0       	ldi	r31, 0x06	; 6
    387e:	85 83       	std	Z+5, r24	; 0x05
    3880:	08 95       	ret
    3882:	82 e0       	ldi	r24, 0x02	; 2
    3884:	e0 e0       	ldi	r30, 0x00	; 0
    3886:	f6 e0       	ldi	r31, 0x06	; 6
    3888:	86 83       	std	Z+6, r24	; 0x06
    388a:	08 95       	ret
    388c:	82 e0       	ldi	r24, 0x02	; 2
    388e:	e0 e0       	ldi	r30, 0x00	; 0
    3890:	f6 e0       	ldi	r31, 0x06	; 6
    3892:	87 83       	std	Z+7, r24	; 0x07
    3894:	08 95       	ret

00003896 <led3>:
    3896:	81 30       	cpi	r24, 0x01	; 1
    3898:	91 05       	cpc	r25, r1
    389a:	31 f0       	breq	.+12     	; 0x38a8 <led3+0x12>
    389c:	82 30       	cpi	r24, 0x02	; 2
    389e:	91 05       	cpc	r25, r1
    38a0:	69 f0       	breq	.+26     	; 0x38bc <led3+0x26>
    38a2:	89 2b       	or	r24, r25
    38a4:	79 f4       	brne	.+30     	; 0x38c4 <led3+0x2e>
    38a6:	05 c0       	rjmp	.+10     	; 0x38b2 <led3+0x1c>
    38a8:	84 e0       	ldi	r24, 0x04	; 4
    38aa:	e0 e0       	ldi	r30, 0x00	; 0
    38ac:	f6 e0       	ldi	r31, 0x06	; 6
    38ae:	85 83       	std	Z+5, r24	; 0x05
    38b0:	08 95       	ret
    38b2:	84 e0       	ldi	r24, 0x04	; 4
    38b4:	e0 e0       	ldi	r30, 0x00	; 0
    38b6:	f6 e0       	ldi	r31, 0x06	; 6
    38b8:	86 83       	std	Z+6, r24	; 0x06
    38ba:	08 95       	ret
    38bc:	84 e0       	ldi	r24, 0x04	; 4
    38be:	e0 e0       	ldi	r30, 0x00	; 0
    38c0:	f6 e0       	ldi	r31, 0x06	; 6
    38c2:	87 83       	std	Z+7, r24	; 0x07
    38c4:	08 95       	ret

000038c6 <led4>:
    38c6:	81 30       	cpi	r24, 0x01	; 1
    38c8:	91 05       	cpc	r25, r1
    38ca:	31 f0       	breq	.+12     	; 0x38d8 <led4+0x12>
    38cc:	82 30       	cpi	r24, 0x02	; 2
    38ce:	91 05       	cpc	r25, r1
    38d0:	69 f0       	breq	.+26     	; 0x38ec <led4+0x26>
    38d2:	89 2b       	or	r24, r25
    38d4:	79 f4       	brne	.+30     	; 0x38f4 <led4+0x2e>
    38d6:	05 c0       	rjmp	.+10     	; 0x38e2 <led4+0x1c>
    38d8:	88 e0       	ldi	r24, 0x08	; 8
    38da:	e0 e0       	ldi	r30, 0x00	; 0
    38dc:	f6 e0       	ldi	r31, 0x06	; 6
    38de:	85 83       	std	Z+5, r24	; 0x05
    38e0:	08 95       	ret
    38e2:	88 e0       	ldi	r24, 0x08	; 8
    38e4:	e0 e0       	ldi	r30, 0x00	; 0
    38e6:	f6 e0       	ldi	r31, 0x06	; 6
    38e8:	86 83       	std	Z+6, r24	; 0x06
    38ea:	08 95       	ret
    38ec:	88 e0       	ldi	r24, 0x08	; 8
    38ee:	e0 e0       	ldi	r30, 0x00	; 0
    38f0:	f6 e0       	ldi	r31, 0x06	; 6
    38f2:	87 83       	std	Z+7, r24	; 0x07
    38f4:	08 95       	ret

000038f6 <animation>:
	}
}


void animation(void)
{
    38f6:	af 92       	push	r10
    38f8:	bf 92       	push	r11
    38fa:	cf 92       	push	r12
    38fc:	df 92       	push	r13
    38fe:	ef 92       	push	r14
    3900:	ff 92       	push	r15
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	00 d0       	rcall	.+0      	; 0x390c <animation+0x16>
    390c:	cd b7       	in	r28, 0x3d	; 61
    390e:	de b7       	in	r29, 0x3e	; 62
	volatile int i;
	for(i = 50;i<ANIMATION_MAX;i+=15)
    3910:	82 e3       	ldi	r24, 0x32	; 50
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	89 83       	std	Y+1, r24	; 0x01
    3916:	9a 83       	std	Y+2, r25	; 0x02
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	9a 81       	ldd	r25, Y+2	; 0x02
    391c:	84 36       	cpi	r24, 0x64	; 100
    391e:	91 05       	cpc	r25, r1
    3920:	0c f0       	brlt	.+2      	; 0x3924 <animation+0x2e>
    3922:	eb c1       	rjmp	.+982    	; 0x3cfa <animation+0x404>
	{
		led1(ON);
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	86 df       	rcall	.-244    	; 0x3836 <led1>
		delay_ms(i);
    392a:	e9 81       	ldd	r30, Y+1	; 0x01
    392c:	fa 81       	ldd	r31, Y+2	; 0x02
    392e:	9f 2f       	mov	r25, r31
    3930:	99 0f       	add	r25, r25
    3932:	99 0b       	sbc	r25, r25
    3934:	a1 2c       	mov	r10, r1
    3936:	0f 2e       	mov	r0, r31
    3938:	fc e6       	ldi	r31, 0x6C	; 108
    393a:	bf 2e       	mov	r11, r31
    393c:	f0 2d       	mov	r31, r0
    393e:	0f 2e       	mov	r0, r31
    3940:	fc ed       	ldi	r31, 0xDC	; 220
    3942:	cf 2e       	mov	r12, r31
    3944:	f0 2d       	mov	r31, r0
    3946:	68 94       	set
    3948:	dd 24       	eor	r13, r13
    394a:	d1 f8       	bld	r13, 1
    394c:	e1 2c       	mov	r14, r1
    394e:	f1 2c       	mov	r15, r1
    3950:	00 e0       	ldi	r16, 0x00	; 0
    3952:	10 e0       	ldi	r17, 0x00	; 0
    3954:	2e 2f       	mov	r18, r30
    3956:	3f 2f       	mov	r19, r31
    3958:	49 2f       	mov	r20, r25
    395a:	59 2f       	mov	r21, r25
    395c:	69 2f       	mov	r22, r25
    395e:	79 2f       	mov	r23, r25
    3960:	89 2f       	mov	r24, r25
    3962:	75 d7       	rcall	.+3818   	; 0x484e <__muldi3>
    3964:	29 51       	subi	r18, 0x19	; 25
    3966:	3c 4f       	sbci	r19, 0xFC	; 252
    3968:	4f 4f       	sbci	r20, 0xFF	; 255
    396a:	5f 4f       	sbci	r21, 0xFF	; 255
    396c:	6f 4f       	sbci	r22, 0xFF	; 255
    396e:	7f 4f       	sbci	r23, 0xFF	; 255
    3970:	8f 4f       	sbci	r24, 0xFF	; 255
    3972:	9f 4f       	sbci	r25, 0xFF	; 255
    3974:	c8 d5       	rcall	.+2960   	; 0x4506 <__floatundisf>
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e8       	ldi	r19, 0x80	; 128
    397a:	4b eb       	ldi	r20, 0xBB	; 187
    397c:	55 e4       	ldi	r21, 0x45	; 69
    397e:	b3 d4       	rcall	.+2406   	; 0x42e6 <__divsf3>
    3980:	1f d5       	rcall	.+2622   	; 0x43c0 <__fixunssfdi>
    3982:	f2 2f       	mov	r31, r18
    3984:	e3 2f       	mov	r30, r19
    3986:	8f 2f       	mov	r24, r31
    3988:	9e 2f       	mov	r25, r30
    398a:	a4 2f       	mov	r26, r20
    398c:	b5 2f       	mov	r27, r21
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	a1 09       	sbc	r26, r1
    3992:	b1 09       	sbc	r27, r1
    3994:	00 97       	sbiw	r24, 0x00	; 0
    3996:	a1 05       	cpc	r26, r1
    3998:	b1 05       	cpc	r27, r1
    399a:	c9 f7       	brne	.-14     	; 0x398e <animation+0x98>
		led2(ON);
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	62 df       	rcall	.-316    	; 0x3866 <led2>
		delay_ms(i);
    39a2:	e9 81       	ldd	r30, Y+1	; 0x01
    39a4:	fa 81       	ldd	r31, Y+2	; 0x02
    39a6:	9f 2f       	mov	r25, r31
    39a8:	99 0f       	add	r25, r25
    39aa:	99 0b       	sbc	r25, r25
    39ac:	a1 2c       	mov	r10, r1
    39ae:	0f 2e       	mov	r0, r31
    39b0:	fc e6       	ldi	r31, 0x6C	; 108
    39b2:	bf 2e       	mov	r11, r31
    39b4:	f0 2d       	mov	r31, r0
    39b6:	0f 2e       	mov	r0, r31
    39b8:	fc ed       	ldi	r31, 0xDC	; 220
    39ba:	cf 2e       	mov	r12, r31
    39bc:	f0 2d       	mov	r31, r0
    39be:	68 94       	set
    39c0:	dd 24       	eor	r13, r13
    39c2:	d1 f8       	bld	r13, 1
    39c4:	e1 2c       	mov	r14, r1
    39c6:	f1 2c       	mov	r15, r1
    39c8:	00 e0       	ldi	r16, 0x00	; 0
    39ca:	10 e0       	ldi	r17, 0x00	; 0
    39cc:	2e 2f       	mov	r18, r30
    39ce:	3f 2f       	mov	r19, r31
    39d0:	49 2f       	mov	r20, r25
    39d2:	59 2f       	mov	r21, r25
    39d4:	69 2f       	mov	r22, r25
    39d6:	79 2f       	mov	r23, r25
    39d8:	89 2f       	mov	r24, r25
    39da:	39 d7       	rcall	.+3698   	; 0x484e <__muldi3>
    39dc:	29 51       	subi	r18, 0x19	; 25
    39de:	3c 4f       	sbci	r19, 0xFC	; 252
    39e0:	4f 4f       	sbci	r20, 0xFF	; 255
    39e2:	5f 4f       	sbci	r21, 0xFF	; 255
    39e4:	6f 4f       	sbci	r22, 0xFF	; 255
    39e6:	7f 4f       	sbci	r23, 0xFF	; 255
    39e8:	8f 4f       	sbci	r24, 0xFF	; 255
    39ea:	9f 4f       	sbci	r25, 0xFF	; 255
    39ec:	8c d5       	rcall	.+2840   	; 0x4506 <__floatundisf>
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e8       	ldi	r19, 0x80	; 128
    39f2:	4b eb       	ldi	r20, 0xBB	; 187
    39f4:	55 e4       	ldi	r21, 0x45	; 69
    39f6:	77 d4       	rcall	.+2286   	; 0x42e6 <__divsf3>
    39f8:	e3 d4       	rcall	.+2502   	; 0x43c0 <__fixunssfdi>
    39fa:	f2 2f       	mov	r31, r18
    39fc:	e3 2f       	mov	r30, r19
    39fe:	8f 2f       	mov	r24, r31
    3a00:	9e 2f       	mov	r25, r30
    3a02:	a4 2f       	mov	r26, r20
    3a04:	b5 2f       	mov	r27, r21
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	a1 09       	sbc	r26, r1
    3a0a:	b1 09       	sbc	r27, r1
    3a0c:	00 97       	sbiw	r24, 0x00	; 0
    3a0e:	a1 05       	cpc	r26, r1
    3a10:	b1 05       	cpc	r27, r1
    3a12:	c9 f7       	brne	.-14     	; 0x3a06 <animation+0x110>
		led3(ON);
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	3e df       	rcall	.-388    	; 0x3896 <led3>
		delay_ms(i);
    3a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a1e:	9f 2f       	mov	r25, r31
    3a20:	99 0f       	add	r25, r25
    3a22:	99 0b       	sbc	r25, r25
    3a24:	a1 2c       	mov	r10, r1
    3a26:	0f 2e       	mov	r0, r31
    3a28:	fc e6       	ldi	r31, 0x6C	; 108
    3a2a:	bf 2e       	mov	r11, r31
    3a2c:	f0 2d       	mov	r31, r0
    3a2e:	0f 2e       	mov	r0, r31
    3a30:	fc ed       	ldi	r31, 0xDC	; 220
    3a32:	cf 2e       	mov	r12, r31
    3a34:	f0 2d       	mov	r31, r0
    3a36:	68 94       	set
    3a38:	dd 24       	eor	r13, r13
    3a3a:	d1 f8       	bld	r13, 1
    3a3c:	e1 2c       	mov	r14, r1
    3a3e:	f1 2c       	mov	r15, r1
    3a40:	00 e0       	ldi	r16, 0x00	; 0
    3a42:	10 e0       	ldi	r17, 0x00	; 0
    3a44:	2e 2f       	mov	r18, r30
    3a46:	3f 2f       	mov	r19, r31
    3a48:	49 2f       	mov	r20, r25
    3a4a:	59 2f       	mov	r21, r25
    3a4c:	69 2f       	mov	r22, r25
    3a4e:	79 2f       	mov	r23, r25
    3a50:	89 2f       	mov	r24, r25
    3a52:	fd d6       	rcall	.+3578   	; 0x484e <__muldi3>
    3a54:	29 51       	subi	r18, 0x19	; 25
    3a56:	3c 4f       	sbci	r19, 0xFC	; 252
    3a58:	4f 4f       	sbci	r20, 0xFF	; 255
    3a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a5c:	6f 4f       	sbci	r22, 0xFF	; 255
    3a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a60:	8f 4f       	sbci	r24, 0xFF	; 255
    3a62:	9f 4f       	sbci	r25, 0xFF	; 255
    3a64:	50 d5       	rcall	.+2720   	; 0x4506 <__floatundisf>
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e8       	ldi	r19, 0x80	; 128
    3a6a:	4b eb       	ldi	r20, 0xBB	; 187
    3a6c:	55 e4       	ldi	r21, 0x45	; 69
    3a6e:	3b d4       	rcall	.+2166   	; 0x42e6 <__divsf3>
    3a70:	a7 d4       	rcall	.+2382   	; 0x43c0 <__fixunssfdi>
    3a72:	f2 2f       	mov	r31, r18
    3a74:	e3 2f       	mov	r30, r19
    3a76:	8f 2f       	mov	r24, r31
    3a78:	9e 2f       	mov	r25, r30
    3a7a:	a4 2f       	mov	r26, r20
    3a7c:	b5 2f       	mov	r27, r21
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	a1 09       	sbc	r26, r1
    3a82:	b1 09       	sbc	r27, r1
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	a1 05       	cpc	r26, r1
    3a88:	b1 05       	cpc	r27, r1
    3a8a:	c9 f7       	brne	.-14     	; 0x3a7e <animation+0x188>
		led4(ON);
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	1a df       	rcall	.-460    	; 0x38c6 <led4>
		delay_ms(i);
    3a92:	e9 81       	ldd	r30, Y+1	; 0x01
    3a94:	fa 81       	ldd	r31, Y+2	; 0x02
    3a96:	9f 2f       	mov	r25, r31
    3a98:	99 0f       	add	r25, r25
    3a9a:	99 0b       	sbc	r25, r25
    3a9c:	a1 2c       	mov	r10, r1
    3a9e:	0f 2e       	mov	r0, r31
    3aa0:	fc e6       	ldi	r31, 0x6C	; 108
    3aa2:	bf 2e       	mov	r11, r31
    3aa4:	f0 2d       	mov	r31, r0
    3aa6:	0f 2e       	mov	r0, r31
    3aa8:	fc ed       	ldi	r31, 0xDC	; 220
    3aaa:	cf 2e       	mov	r12, r31
    3aac:	f0 2d       	mov	r31, r0
    3aae:	68 94       	set
    3ab0:	dd 24       	eor	r13, r13
    3ab2:	d1 f8       	bld	r13, 1
    3ab4:	e1 2c       	mov	r14, r1
    3ab6:	f1 2c       	mov	r15, r1
    3ab8:	00 e0       	ldi	r16, 0x00	; 0
    3aba:	10 e0       	ldi	r17, 0x00	; 0
    3abc:	2e 2f       	mov	r18, r30
    3abe:	3f 2f       	mov	r19, r31
    3ac0:	49 2f       	mov	r20, r25
    3ac2:	59 2f       	mov	r21, r25
    3ac4:	69 2f       	mov	r22, r25
    3ac6:	79 2f       	mov	r23, r25
    3ac8:	89 2f       	mov	r24, r25
    3aca:	c1 d6       	rcall	.+3458   	; 0x484e <__muldi3>
    3acc:	29 51       	subi	r18, 0x19	; 25
    3ace:	3c 4f       	sbci	r19, 0xFC	; 252
    3ad0:	4f 4f       	sbci	r20, 0xFF	; 255
    3ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad4:	6f 4f       	sbci	r22, 0xFF	; 255
    3ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    3ada:	9f 4f       	sbci	r25, 0xFF	; 255
    3adc:	14 d5       	rcall	.+2600   	; 0x4506 <__floatundisf>
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e8       	ldi	r19, 0x80	; 128
    3ae2:	4b eb       	ldi	r20, 0xBB	; 187
    3ae4:	55 e4       	ldi	r21, 0x45	; 69
    3ae6:	ff d3       	rcall	.+2046   	; 0x42e6 <__divsf3>
    3ae8:	6b d4       	rcall	.+2262   	; 0x43c0 <__fixunssfdi>
    3aea:	f2 2f       	mov	r31, r18
    3aec:	e3 2f       	mov	r30, r19
    3aee:	8f 2f       	mov	r24, r31
    3af0:	9e 2f       	mov	r25, r30
    3af2:	a4 2f       	mov	r26, r20
    3af4:	b5 2f       	mov	r27, r21
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	a1 09       	sbc	r26, r1
    3afa:	b1 09       	sbc	r27, r1
    3afc:	00 97       	sbiw	r24, 0x00	; 0
    3afe:	a1 05       	cpc	r26, r1
    3b00:	b1 05       	cpc	r27, r1
    3b02:	c9 f7       	brne	.-14     	; 0x3af6 <animation+0x200>
		
		led1(OFF);
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	96 de       	rcall	.-724    	; 0x3836 <led1>
		delay_ms(i);
    3b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b0e:	9f 2f       	mov	r25, r31
    3b10:	99 0f       	add	r25, r25
    3b12:	99 0b       	sbc	r25, r25
    3b14:	a1 2c       	mov	r10, r1
    3b16:	0f 2e       	mov	r0, r31
    3b18:	fc e6       	ldi	r31, 0x6C	; 108
    3b1a:	bf 2e       	mov	r11, r31
    3b1c:	f0 2d       	mov	r31, r0
    3b1e:	0f 2e       	mov	r0, r31
    3b20:	fc ed       	ldi	r31, 0xDC	; 220
    3b22:	cf 2e       	mov	r12, r31
    3b24:	f0 2d       	mov	r31, r0
    3b26:	68 94       	set
    3b28:	dd 24       	eor	r13, r13
    3b2a:	d1 f8       	bld	r13, 1
    3b2c:	e1 2c       	mov	r14, r1
    3b2e:	f1 2c       	mov	r15, r1
    3b30:	00 e0       	ldi	r16, 0x00	; 0
    3b32:	10 e0       	ldi	r17, 0x00	; 0
    3b34:	2e 2f       	mov	r18, r30
    3b36:	3f 2f       	mov	r19, r31
    3b38:	49 2f       	mov	r20, r25
    3b3a:	59 2f       	mov	r21, r25
    3b3c:	69 2f       	mov	r22, r25
    3b3e:	79 2f       	mov	r23, r25
    3b40:	89 2f       	mov	r24, r25
    3b42:	85 d6       	rcall	.+3338   	; 0x484e <__muldi3>
    3b44:	29 51       	subi	r18, 0x19	; 25
    3b46:	3c 4f       	sbci	r19, 0xFC	; 252
    3b48:	4f 4f       	sbci	r20, 0xFF	; 255
    3b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4c:	6f 4f       	sbci	r22, 0xFF	; 255
    3b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b50:	8f 4f       	sbci	r24, 0xFF	; 255
    3b52:	9f 4f       	sbci	r25, 0xFF	; 255
    3b54:	d8 d4       	rcall	.+2480   	; 0x4506 <__floatundisf>
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e8       	ldi	r19, 0x80	; 128
    3b5a:	4b eb       	ldi	r20, 0xBB	; 187
    3b5c:	55 e4       	ldi	r21, 0x45	; 69
    3b5e:	c3 d3       	rcall	.+1926   	; 0x42e6 <__divsf3>
    3b60:	2f d4       	rcall	.+2142   	; 0x43c0 <__fixunssfdi>
    3b62:	f2 2f       	mov	r31, r18
    3b64:	e3 2f       	mov	r30, r19
    3b66:	8f 2f       	mov	r24, r31
    3b68:	9e 2f       	mov	r25, r30
    3b6a:	a4 2f       	mov	r26, r20
    3b6c:	b5 2f       	mov	r27, r21
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	a1 09       	sbc	r26, r1
    3b72:	b1 09       	sbc	r27, r1
    3b74:	00 97       	sbiw	r24, 0x00	; 0
    3b76:	a1 05       	cpc	r26, r1
    3b78:	b1 05       	cpc	r27, r1
    3b7a:	c9 f7       	brne	.-14     	; 0x3b6e <animation+0x278>
		led2(OFF);
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	72 de       	rcall	.-796    	; 0x3866 <led2>
		delay_ms(i);
    3b82:	e9 81       	ldd	r30, Y+1	; 0x01
    3b84:	fa 81       	ldd	r31, Y+2	; 0x02
    3b86:	9f 2f       	mov	r25, r31
    3b88:	99 0f       	add	r25, r25
    3b8a:	99 0b       	sbc	r25, r25
    3b8c:	a1 2c       	mov	r10, r1
    3b8e:	0f 2e       	mov	r0, r31
    3b90:	fc e6       	ldi	r31, 0x6C	; 108
    3b92:	bf 2e       	mov	r11, r31
    3b94:	f0 2d       	mov	r31, r0
    3b96:	0f 2e       	mov	r0, r31
    3b98:	fc ed       	ldi	r31, 0xDC	; 220
    3b9a:	cf 2e       	mov	r12, r31
    3b9c:	f0 2d       	mov	r31, r0
    3b9e:	68 94       	set
    3ba0:	dd 24       	eor	r13, r13
    3ba2:	d1 f8       	bld	r13, 1
    3ba4:	e1 2c       	mov	r14, r1
    3ba6:	f1 2c       	mov	r15, r1
    3ba8:	00 e0       	ldi	r16, 0x00	; 0
    3baa:	10 e0       	ldi	r17, 0x00	; 0
    3bac:	2e 2f       	mov	r18, r30
    3bae:	3f 2f       	mov	r19, r31
    3bb0:	49 2f       	mov	r20, r25
    3bb2:	59 2f       	mov	r21, r25
    3bb4:	69 2f       	mov	r22, r25
    3bb6:	79 2f       	mov	r23, r25
    3bb8:	89 2f       	mov	r24, r25
    3bba:	49 d6       	rcall	.+3218   	; 0x484e <__muldi3>
    3bbc:	29 51       	subi	r18, 0x19	; 25
    3bbe:	3c 4f       	sbci	r19, 0xFC	; 252
    3bc0:	4f 4f       	sbci	r20, 0xFF	; 255
    3bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bc4:	6f 4f       	sbci	r22, 0xFF	; 255
    3bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bca:	9f 4f       	sbci	r25, 0xFF	; 255
    3bcc:	9c d4       	rcall	.+2360   	; 0x4506 <__floatundisf>
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e8       	ldi	r19, 0x80	; 128
    3bd2:	4b eb       	ldi	r20, 0xBB	; 187
    3bd4:	55 e4       	ldi	r21, 0x45	; 69
    3bd6:	87 d3       	rcall	.+1806   	; 0x42e6 <__divsf3>
    3bd8:	f3 d3       	rcall	.+2022   	; 0x43c0 <__fixunssfdi>
    3bda:	f2 2f       	mov	r31, r18
    3bdc:	e3 2f       	mov	r30, r19
    3bde:	8f 2f       	mov	r24, r31
    3be0:	9e 2f       	mov	r25, r30
    3be2:	a4 2f       	mov	r26, r20
    3be4:	b5 2f       	mov	r27, r21
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	a1 09       	sbc	r26, r1
    3bea:	b1 09       	sbc	r27, r1
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	a1 05       	cpc	r26, r1
    3bf0:	b1 05       	cpc	r27, r1
    3bf2:	c9 f7       	brne	.-14     	; 0x3be6 <animation+0x2f0>
		led3(OFF);
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	4e de       	rcall	.-868    	; 0x3896 <led3>
		delay_ms(i);
    3bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    3bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bfe:	9f 2f       	mov	r25, r31
    3c00:	99 0f       	add	r25, r25
    3c02:	99 0b       	sbc	r25, r25
    3c04:	a1 2c       	mov	r10, r1
    3c06:	0f 2e       	mov	r0, r31
    3c08:	fc e6       	ldi	r31, 0x6C	; 108
    3c0a:	bf 2e       	mov	r11, r31
    3c0c:	f0 2d       	mov	r31, r0
    3c0e:	0f 2e       	mov	r0, r31
    3c10:	fc ed       	ldi	r31, 0xDC	; 220
    3c12:	cf 2e       	mov	r12, r31
    3c14:	f0 2d       	mov	r31, r0
    3c16:	68 94       	set
    3c18:	dd 24       	eor	r13, r13
    3c1a:	d1 f8       	bld	r13, 1
    3c1c:	e1 2c       	mov	r14, r1
    3c1e:	f1 2c       	mov	r15, r1
    3c20:	00 e0       	ldi	r16, 0x00	; 0
    3c22:	10 e0       	ldi	r17, 0x00	; 0
    3c24:	2e 2f       	mov	r18, r30
    3c26:	3f 2f       	mov	r19, r31
    3c28:	49 2f       	mov	r20, r25
    3c2a:	59 2f       	mov	r21, r25
    3c2c:	69 2f       	mov	r22, r25
    3c2e:	79 2f       	mov	r23, r25
    3c30:	89 2f       	mov	r24, r25
    3c32:	0d d6       	rcall	.+3098   	; 0x484e <__muldi3>
    3c34:	29 51       	subi	r18, 0x19	; 25
    3c36:	3c 4f       	sbci	r19, 0xFC	; 252
    3c38:	4f 4f       	sbci	r20, 0xFF	; 255
    3c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c3c:	6f 4f       	sbci	r22, 0xFF	; 255
    3c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c40:	8f 4f       	sbci	r24, 0xFF	; 255
    3c42:	9f 4f       	sbci	r25, 0xFF	; 255
    3c44:	60 d4       	rcall	.+2240   	; 0x4506 <__floatundisf>
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e8       	ldi	r19, 0x80	; 128
    3c4a:	4b eb       	ldi	r20, 0xBB	; 187
    3c4c:	55 e4       	ldi	r21, 0x45	; 69
    3c4e:	4b d3       	rcall	.+1686   	; 0x42e6 <__divsf3>
    3c50:	b7 d3       	rcall	.+1902   	; 0x43c0 <__fixunssfdi>
    3c52:	f2 2f       	mov	r31, r18
    3c54:	e3 2f       	mov	r30, r19
    3c56:	8f 2f       	mov	r24, r31
    3c58:	9e 2f       	mov	r25, r30
    3c5a:	a4 2f       	mov	r26, r20
    3c5c:	b5 2f       	mov	r27, r21
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	a1 09       	sbc	r26, r1
    3c62:	b1 09       	sbc	r27, r1
    3c64:	00 97       	sbiw	r24, 0x00	; 0
    3c66:	a1 05       	cpc	r26, r1
    3c68:	b1 05       	cpc	r27, r1
    3c6a:	c9 f7       	brne	.-14     	; 0x3c5e <animation+0x368>
		led4(OFF);
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	2a de       	rcall	.-940    	; 0x38c6 <led4>
		delay_ms(i);
    3c72:	e9 81       	ldd	r30, Y+1	; 0x01
    3c74:	fa 81       	ldd	r31, Y+2	; 0x02
    3c76:	9f 2f       	mov	r25, r31
    3c78:	99 0f       	add	r25, r25
    3c7a:	99 0b       	sbc	r25, r25
    3c7c:	a1 2c       	mov	r10, r1
    3c7e:	0f 2e       	mov	r0, r31
    3c80:	fc e6       	ldi	r31, 0x6C	; 108
    3c82:	bf 2e       	mov	r11, r31
    3c84:	f0 2d       	mov	r31, r0
    3c86:	0f 2e       	mov	r0, r31
    3c88:	fc ed       	ldi	r31, 0xDC	; 220
    3c8a:	cf 2e       	mov	r12, r31
    3c8c:	f0 2d       	mov	r31, r0
    3c8e:	68 94       	set
    3c90:	dd 24       	eor	r13, r13
    3c92:	d1 f8       	bld	r13, 1
    3c94:	e1 2c       	mov	r14, r1
    3c96:	f1 2c       	mov	r15, r1
    3c98:	00 e0       	ldi	r16, 0x00	; 0
    3c9a:	10 e0       	ldi	r17, 0x00	; 0
    3c9c:	2e 2f       	mov	r18, r30
    3c9e:	3f 2f       	mov	r19, r31
    3ca0:	49 2f       	mov	r20, r25
    3ca2:	59 2f       	mov	r21, r25
    3ca4:	69 2f       	mov	r22, r25
    3ca6:	79 2f       	mov	r23, r25
    3ca8:	89 2f       	mov	r24, r25
    3caa:	d1 d5       	rcall	.+2978   	; 0x484e <__muldi3>
    3cac:	29 51       	subi	r18, 0x19	; 25
    3cae:	3c 4f       	sbci	r19, 0xFC	; 252
    3cb0:	4f 4f       	sbci	r20, 0xFF	; 255
    3cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb4:	6f 4f       	sbci	r22, 0xFF	; 255
    3cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    3cba:	9f 4f       	sbci	r25, 0xFF	; 255
    3cbc:	24 d4       	rcall	.+2120   	; 0x4506 <__floatundisf>
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	30 e8       	ldi	r19, 0x80	; 128
    3cc2:	4b eb       	ldi	r20, 0xBB	; 187
    3cc4:	55 e4       	ldi	r21, 0x45	; 69
    3cc6:	0f d3       	rcall	.+1566   	; 0x42e6 <__divsf3>
    3cc8:	7b d3       	rcall	.+1782   	; 0x43c0 <__fixunssfdi>
    3cca:	f2 2f       	mov	r31, r18
    3ccc:	e3 2f       	mov	r30, r19
    3cce:	8f 2f       	mov	r24, r31
    3cd0:	9e 2f       	mov	r25, r30
    3cd2:	a4 2f       	mov	r26, r20
    3cd4:	b5 2f       	mov	r27, r21
    3cd6:	01 97       	sbiw	r24, 0x01	; 1
    3cd8:	a1 09       	sbc	r26, r1
    3cda:	b1 09       	sbc	r27, r1
    3cdc:	00 97       	sbiw	r24, 0x00	; 0
    3cde:	a1 05       	cpc	r26, r1
    3ce0:	b1 05       	cpc	r27, r1
    3ce2:	c9 f7       	brne	.-14     	; 0x3cd6 <animation+0x3e0>


void animation(void)
{
	volatile int i;
	for(i = 50;i<ANIMATION_MAX;i+=15)
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce8:	0f 96       	adiw	r24, 0x0f	; 15
    3cea:	89 83       	std	Y+1, r24	; 0x01
    3cec:	9a 83       	std	Y+2, r25	; 0x02
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf2:	84 36       	cpi	r24, 0x64	; 100
    3cf4:	91 05       	cpc	r25, r1
    3cf6:	0c f4       	brge	.+2      	; 0x3cfa <animation+0x404>
    3cf8:	15 ce       	rjmp	.-982    	; 0x3924 <animation+0x2e>
		led3(OFF);
		delay_ms(i);
		led4(OFF);
		delay_ms(i);
	}
}
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	df 91       	pop	r29
    3d00:	cf 91       	pop	r28
    3d02:	1f 91       	pop	r17
    3d04:	0f 91       	pop	r16
    3d06:	ff 90       	pop	r15
    3d08:	ef 90       	pop	r14
    3d0a:	df 90       	pop	r13
    3d0c:	cf 90       	pop	r12
    3d0e:	bf 90       	pop	r11
    3d10:	af 90       	pop	r10
    3d12:	08 95       	ret

00003d14 <switch_init>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3d14:	88 e0       	ldi	r24, 0x08	; 8
    3d16:	e0 e4       	ldi	r30, 0x40	; 64
    3d18:	f6 e0       	ldi	r31, 0x06	; 6
    3d1a:	82 83       	std	Z+2, r24	; 0x02
    3d1c:	08 95       	ret

00003d1e <usb_putchar_printf>:
	usb_putchar(*string++);
}


#ifdef PRINTF_USB
int usb_putchar_printf(char var, FILE *stream) {
    3d1e:	cf 93       	push	r28
    3d20:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
    3d22:	8a 30       	cpi	r24, 0x0A	; 10
    3d24:	21 f4       	brne	.+8      	; 0x3d2e <usb_putchar_printf+0x10>
	
}

void usb_putchar(char a)
{
	udi_cdc_putc(a);
    3d26:	8d e0       	ldi	r24, 0x0D	; 13
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	0e 94 18 04 	call	0x830	; 0x830 <udi_cdc_putc>
    3d2e:	8c 2f       	mov	r24, r28
    3d30:	99 27       	eor	r25, r25
    3d32:	87 fd       	sbrc	r24, 7
    3d34:	90 95       	com	r25
    3d36:	0e 94 18 04 	call	0x830	; 0x830 <udi_cdc_putc>
int usb_putchar_printf(char var, FILE *stream) {
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
	usb_putchar(var);
	return 0;
}
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	cf 91       	pop	r28
    3d40:	08 95       	ret

00003d42 <usb_getchar_scanf>:

int usb_getchar_scanf(FILE *stream)
{
    3d42:	0f 93       	push	r16
    3d44:	1f 93       	push	r17
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	8c 01       	movw	r16, r24
	return udi_cdc_getc();
}

int usb_is_rx_ready(void)
{
	return udi_cdc_is_rx_ready();
    3d4c:	0e 94 4a 03 	call	0x694	; 0x694 <udi_cdc_is_rx_ready>

int usb_getchar_scanf(FILE *stream)
{
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
    3d50:	88 23       	and	r24, r24
    3d52:	e1 f3       	breq	.-8      	; 0x3d4c <usb_getchar_scanf+0xa>
	udi_cdc_putc(a);
}

char usb_getchar(void)
{
	return udi_cdc_getc();
    3d54:	0e 94 96 03 	call	0x72c	; 0x72c <udi_cdc_getc>
    3d58:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
	u8Data=usb_getchar();
	//echo input data
	usb_putchar_printf(u8Data,stream);
    3d5a:	b8 01       	movw	r22, r16
    3d5c:	e0 df       	rcall	.-64     	; 0x3d1e <usb_putchar_printf>
	// Return received data
	return u8Data;
}
    3d5e:	ce 01       	movw	r24, r28
    3d60:	99 27       	eor	r25, r25
    3d62:	df 91       	pop	r29
    3d64:	cf 91       	pop	r28
    3d66:	1f 91       	pop	r17
    3d68:	0f 91       	pop	r16
    3d6a:	08 95       	ret

00003d6c <usb_init>:

#include "./../include/usb_serial.h"

void usb_init(void)
{
	irq_initialize_vectors();
    3d6c:	87 e0       	ldi	r24, 0x07	; 7
    3d6e:	e0 ea       	ldi	r30, 0xA0	; 160
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    3d74:	78 94       	sei
	udc_start();
    3d76:	0e 94 06 05 	call	0xa0c	; 0xa0c <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    3d7a:	0e 94 55 10 	call	0x20aa	; 0x20aa <udd_attach>
	udc_attach();
	
	#ifdef PRINTF_USB
	// setup our stdio stream
	stdout = &mystdout;
    3d7e:	8c e7       	ldi	r24, 0x7C	; 124
    3d80:	90 e2       	ldi	r25, 0x20	; 32
    3d82:	80 93 3b 2e 	sts	0x2E3B, r24
    3d86:	90 93 3c 2e 	sts	0x2E3C, r25
	stdin = &mystdout;
    3d8a:	80 93 39 2e 	sts	0x2E39, r24
    3d8e:	90 93 3a 2e 	sts	0x2E3A, r25
    3d92:	08 95       	ret

00003d94 <print_gesture>:
	}
}

void print_gesture(void)
{
	if(isGestureAvailable())
    3d94:	01 db       	rcall	.-2558   	; 0x3398 <isGestureAvailable>
    3d96:	89 2b       	or	r24, r25
    3d98:	69 f1       	breq	.+90     	; 0x3df4 <print_gesture+0x60>
	{
		switch(readGesture())
    3d9a:	49 db       	rcall	.-2414   	; 0x342e <readGesture>
    3d9c:	83 30       	cpi	r24, 0x03	; 3
    3d9e:	91 05       	cpc	r25, r1
    3da0:	71 f0       	breq	.+28     	; 0x3dbe <print_gesture+0x2a>
    3da2:	34 f4       	brge	.+12     	; 0x3db0 <print_gesture+0x1c>
    3da4:	81 30       	cpi	r24, 0x01	; 1
    3da6:	91 05       	cpc	r25, r1
    3da8:	91 f0       	breq	.+36     	; 0x3dce <print_gesture+0x3a>
    3daa:	02 97       	sbiw	r24, 0x02	; 2
    3dac:	a1 f0       	breq	.+40     	; 0x3dd6 <print_gesture+0x42>
    3dae:	1f c0       	rjmp	.+62     	; 0x3dee <print_gesture+0x5a>
    3db0:	85 30       	cpi	r24, 0x05	; 5
    3db2:	91 05       	cpc	r25, r1
    3db4:	a1 f0       	breq	.+40     	; 0x3dde <print_gesture+0x4a>
    3db6:	3c f0       	brlt	.+14     	; 0x3dc6 <print_gesture+0x32>
    3db8:	06 97       	sbiw	r24, 0x06	; 6
    3dba:	a9 f0       	breq	.+42     	; 0x3de6 <print_gesture+0x52>
    3dbc:	18 c0       	rjmp	.+48     	; 0x3dee <print_gesture+0x5a>
		{
			case DIR_UP:
			printf("UP \n");
    3dbe:	80 e2       	ldi	r24, 0x20	; 32
    3dc0:	91 e2       	ldi	r25, 0x21	; 33
    3dc2:	b0 c5       	rjmp	.+2912   	; 0x4924 <puts>
			break;
    3dc4:	08 95       	ret
			case DIR_DOWN:
			printf("DOWN \n");
    3dc6:	84 e2       	ldi	r24, 0x24	; 36
    3dc8:	91 e2       	ldi	r25, 0x21	; 33
    3dca:	ac c5       	rjmp	.+2904   	; 0x4924 <puts>
			break;
    3dcc:	08 95       	ret
			case DIR_LEFT:
			printf("LEFT \n");
    3dce:	8a e2       	ldi	r24, 0x2A	; 42
    3dd0:	91 e2       	ldi	r25, 0x21	; 33
    3dd2:	a8 c5       	rjmp	.+2896   	; 0x4924 <puts>
			break;
    3dd4:	08 95       	ret
			case DIR_RIGHT:
			printf("RIGHT \n");
    3dd6:	80 e3       	ldi	r24, 0x30	; 48
    3dd8:	91 e2       	ldi	r25, 0x21	; 33
    3dda:	a4 c5       	rjmp	.+2888   	; 0x4924 <puts>
			break;
    3ddc:	08 95       	ret
			case DIR_NEAR:
			printf("NEAR \n");
    3dde:	87 e3       	ldi	r24, 0x37	; 55
    3de0:	91 e2       	ldi	r25, 0x21	; 33
    3de2:	a0 c5       	rjmp	.+2880   	; 0x4924 <puts>
			break;
    3de4:	08 95       	ret
			case DIR_FAR:
			printf("FAR \n");
    3de6:	8d e3       	ldi	r24, 0x3D	; 61
    3de8:	91 e2       	ldi	r25, 0x21	; 33
    3dea:	9c c5       	rjmp	.+2872   	; 0x4924 <puts>
			break;
    3dec:	08 95       	ret
			default:
			printf("NONE \n");
    3dee:	82 e4       	ldi	r24, 0x42	; 66
    3df0:	91 e2       	ldi	r25, 0x21	; 33
    3df2:	98 c5       	rjmp	.+2864   	; 0x4924 <puts>
    3df4:	08 95       	ret

00003df6 <__vector_43>:
	}
	
}

ISR(PORTE_INT0_vect) //  Sensor gestos
{
    3df6:	1f 92       	push	r1
    3df8:	0f 92       	push	r0
    3dfa:	0f b6       	in	r0, 0x3f	; 63
    3dfc:	0f 92       	push	r0
    3dfe:	11 24       	eor	r1, r1
    3e00:	2f 93       	push	r18
    3e02:	3f 93       	push	r19
    3e04:	4f 93       	push	r20
    3e06:	5f 93       	push	r21
    3e08:	6f 93       	push	r22
    3e0a:	7f 93       	push	r23
    3e0c:	8f 93       	push	r24
    3e0e:	9f 93       	push	r25
    3e10:	af 93       	push	r26
    3e12:	bf 93       	push	r27
    3e14:	ef 93       	push	r30
    3e16:	ff 93       	push	r31
	print_gesture();
    3e18:	bd df       	rcall	.-134    	; 0x3d94 <print_gesture>
	led2(TOGGLE);
    3e1a:	82 e0       	ldi	r24, 0x02	; 2
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	23 dd       	rcall	.-1466   	; 0x3866 <led2>
}
    3e20:	ff 91       	pop	r31
    3e22:	ef 91       	pop	r30
    3e24:	bf 91       	pop	r27
    3e26:	af 91       	pop	r26
    3e28:	9f 91       	pop	r25
    3e2a:	8f 91       	pop	r24
    3e2c:	7f 91       	pop	r23
    3e2e:	6f 91       	pop	r22
    3e30:	5f 91       	pop	r21
    3e32:	4f 91       	pop	r20
    3e34:	3f 91       	pop	r19
    3e36:	2f 91       	pop	r18
    3e38:	0f 90       	pop	r0
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	0f 90       	pop	r0
    3e3e:	1f 90       	pop	r1
    3e40:	18 95       	reti

00003e42 <__vector_44>:
ISR(PORTE_INT1_vect) // sensor Linea
{
    3e42:	1f 92       	push	r1
    3e44:	0f 92       	push	r0
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	0f 92       	push	r0
    3e4a:	11 24       	eor	r1, r1
    3e4c:	2f 93       	push	r18
    3e4e:	3f 93       	push	r19
    3e50:	4f 93       	push	r20
    3e52:	5f 93       	push	r21
    3e54:	6f 93       	push	r22
    3e56:	7f 93       	push	r23
    3e58:	8f 93       	push	r24
    3e5a:	9f 93       	push	r25
    3e5c:	af 93       	push	r26
    3e5e:	bf 93       	push	r27
    3e60:	ef 93       	push	r30
    3e62:	ff 93       	push	r31
	
	led1(TOGGLE);
    3e64:	82 e0       	ldi	r24, 0x02	; 2
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	e6 dc       	rcall	.-1588   	; 0x3836 <led1>
}
    3e6a:	ff 91       	pop	r31
    3e6c:	ef 91       	pop	r30
    3e6e:	bf 91       	pop	r27
    3e70:	af 91       	pop	r26
    3e72:	9f 91       	pop	r25
    3e74:	8f 91       	pop	r24
    3e76:	7f 91       	pop	r23
    3e78:	6f 91       	pop	r22
    3e7a:	5f 91       	pop	r21
    3e7c:	4f 91       	pop	r20
    3e7e:	3f 91       	pop	r19
    3e80:	2f 91       	pop	r18
    3e82:	0f 90       	pop	r0
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	0f 90       	pop	r0
    3e88:	1f 90       	pop	r1
    3e8a:	18 95       	reti

00003e8c <pid_control>:
uint8_t delta_time[num_pulses];
uint16_t sens_data[num_pulses];
int8_t pwm_in[num_pulses];

void pid_control(uint32_t ref, uint32_t sens)
{
    3e8c:	4f 92       	push	r4
    3e8e:	5f 92       	push	r5
    3e90:	6f 92       	push	r6
    3e92:	7f 92       	push	r7
    3e94:	8f 92       	push	r8
    3e96:	9f 92       	push	r9
    3e98:	af 92       	push	r10
    3e9a:	bf 92       	push	r11
    3e9c:	cf 92       	push	r12
    3e9e:	df 92       	push	r13
    3ea0:	ef 92       	push	r14
    3ea2:	ff 92       	push	r15
    3ea4:	29 01       	movw	r4, r18
    3ea6:	3a 01       	movw	r6, r20
	//u = Kp*e; //Ki*e_i;
	
	static double Kp=0.00004;//0.01054;
	static double Ki=0.0072;//19.62;
	static double KpKiT = 0.0024;//0.0022;//
	e = ref - sens;
    3ea8:	6b 01       	movw	r12, r22
    3eaa:	7c 01       	movw	r14, r24
    3eac:	c2 1a       	sub	r12, r18
    3eae:	d3 0a       	sbc	r13, r19
    3eb0:	e4 0a       	sbc	r14, r20
    3eb2:	f5 0a       	sbc	r15, r21
    3eb4:	c0 92 03 24 	sts	0x2403, r12
    3eb8:	d0 92 04 24 	sts	0x2404, r13
    3ebc:	e0 92 05 24 	sts	0x2405, r14
    3ec0:	f0 92 06 24 	sts	0x2406, r15
	u = u_past - Kp*(e-e_past) + KpKiT*e;
    3ec4:	80 91 fb 23 	lds	r24, 0x23FB
    3ec8:	90 91 fc 23 	lds	r25, 0x23FC
    3ecc:	a0 91 fd 23 	lds	r26, 0x23FD
    3ed0:	b0 91 fe 23 	lds	r27, 0x23FE
    3ed4:	a7 01       	movw	r20, r14
    3ed6:	96 01       	movw	r18, r12
    3ed8:	28 1b       	sub	r18, r24
    3eda:	39 0b       	sbc	r19, r25
    3edc:	4a 0b       	sbc	r20, r26
    3ede:	5b 0b       	sbc	r21, r27
    3ee0:	ca 01       	movw	r24, r20
    3ee2:	b9 01       	movw	r22, r18
    3ee4:	d5 d2       	rcall	.+1450   	; 0x4490 <__floatsisf>
    3ee6:	2c ea       	ldi	r18, 0xAC	; 172
    3ee8:	35 ec       	ldi	r19, 0xC5	; 197
    3eea:	47 e2       	ldi	r20, 0x27	; 39
    3eec:	58 e3       	ldi	r21, 0x38	; 56
    3eee:	d2 d3       	rcall	.+1956   	; 0x4694 <__mulsf3>
    3ef0:	9b 01       	movw	r18, r22
    3ef2:	ac 01       	movw	r20, r24
    3ef4:	60 91 ff 23 	lds	r22, 0x23FF
    3ef8:	70 91 00 24 	lds	r23, 0x2400
    3efc:	80 91 01 24 	lds	r24, 0x2401
    3f00:	90 91 02 24 	lds	r25, 0x2402
    3f04:	87 d1       	rcall	.+782    	; 0x4214 <__subsf3>
    3f06:	4b 01       	movw	r8, r22
    3f08:	5c 01       	movw	r10, r24
    3f0a:	c7 01       	movw	r24, r14
    3f0c:	b6 01       	movw	r22, r12
    3f0e:	c0 d2       	rcall	.+1408   	; 0x4490 <__floatsisf>
    3f10:	22 e5       	ldi	r18, 0x52	; 82
    3f12:	39 e4       	ldi	r19, 0x49	; 73
    3f14:	4d e1       	ldi	r20, 0x1D	; 29
    3f16:	5b e3       	ldi	r21, 0x3B	; 59
    3f18:	bd d3       	rcall	.+1914   	; 0x4694 <__mulsf3>
    3f1a:	9b 01       	movw	r18, r22
    3f1c:	ac 01       	movw	r20, r24
    3f1e:	c5 01       	movw	r24, r10
    3f20:	b4 01       	movw	r22, r8
    3f22:	79 d1       	rcall	.+754    	; 0x4216 <__addsf3>
    3f24:	4b 01       	movw	r8, r22
    3f26:	5c 01       	movw	r10, r24
    3f28:	60 93 f7 23 	sts	0x23F7, r22
    3f2c:	70 93 f8 23 	sts	0x23F8, r23
    3f30:	80 93 f9 23 	sts	0x23F9, r24
    3f34:	90 93 fa 23 	sts	0x23FA, r25
	e_i += e;
    3f38:	80 91 f3 23 	lds	r24, 0x23F3
    3f3c:	90 91 f4 23 	lds	r25, 0x23F4
    3f40:	a0 91 f5 23 	lds	r26, 0x23F5
    3f44:	b0 91 f6 23 	lds	r27, 0x23F6
    3f48:	c8 0e       	add	r12, r24
    3f4a:	d9 1e       	adc	r13, r25
    3f4c:	ea 1e       	adc	r14, r26
    3f4e:	fb 1e       	adc	r15, r27
    3f50:	c0 92 f3 23 	sts	0x23F3, r12
    3f54:	d0 92 f4 23 	sts	0x23F4, r13
    3f58:	e0 92 f5 23 	sts	0x23F5, r14
    3f5c:	f0 92 f6 23 	sts	0x23F6, r15
	
	u_motor = (int)u;
    3f60:	c5 01       	movw	r24, r10
    3f62:	b4 01       	movw	r22, r8
    3f64:	62 d2       	rcall	.+1220   	; 0x442a <__fixsfsi>
    3f66:	f6 2e       	mov	r15, r22
    3f68:	e7 2e       	mov	r14, r23
    3f6a:	60 93 f1 23 	sts	0x23F1, r22
    3f6e:	70 93 f2 23 	sts	0x23F2, r23
	
	if(u>99)
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	46 ec       	ldi	r20, 0xC6	; 198
    3f78:	52 e4       	ldi	r21, 0x42	; 66
    3f7a:	c5 01       	movw	r24, r10
    3f7c:	b4 01       	movw	r22, r8
    3f7e:	86 d3       	rcall	.+1804   	; 0x468c <__gesf2>
    3f80:	18 16       	cp	r1, r24
    3f82:	6c f4       	brge	.+26     	; 0x3f9e <pid_control+0x112>
	{
		u=99;
    3f84:	40 e0       	ldi	r20, 0x00	; 0
    3f86:	50 e0       	ldi	r21, 0x00	; 0
    3f88:	66 ec       	ldi	r22, 0xC6	; 198
    3f8a:	72 e4       	ldi	r23, 0x42	; 66
    3f8c:	40 93 f7 23 	sts	0x23F7, r20
    3f90:	50 93 f8 23 	sts	0x23F8, r21
    3f94:	60 93 f9 23 	sts	0x23F9, r22
    3f98:	70 93 fa 23 	sts	0x23FA, r23
    3f9c:	15 c0       	rjmp	.+42     	; 0x3fc8 <pid_control+0x13c>
	}
	else if(u<-99)
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	46 ec       	ldi	r20, 0xC6	; 198
    3fa4:	52 ec       	ldi	r21, 0xC2	; 194
    3fa6:	c5 01       	movw	r24, r10
    3fa8:	b4 01       	movw	r22, r8
    3faa:	99 d1       	rcall	.+818    	; 0x42de <__cmpsf2>
    3fac:	88 23       	and	r24, r24
    3fae:	64 f4       	brge	.+24     	; 0x3fc8 <pid_control+0x13c>
	{
		u=99;
    3fb0:	40 e0       	ldi	r20, 0x00	; 0
    3fb2:	50 e0       	ldi	r21, 0x00	; 0
    3fb4:	66 ec       	ldi	r22, 0xC6	; 198
    3fb6:	72 e4       	ldi	r23, 0x42	; 66
    3fb8:	40 93 f7 23 	sts	0x23F7, r20
    3fbc:	50 93 f8 23 	sts	0x23F8, r21
    3fc0:	60 93 f9 23 	sts	0x23F9, r22
    3fc4:	70 93 fa 23 	sts	0x23FA, r23
	}
	sens_data[i] = sens;
    3fc8:	80 91 07 24 	lds	r24, 0x2407
    3fcc:	90 91 08 24 	lds	r25, 0x2408
    3fd0:	fc 01       	movw	r30, r24
    3fd2:	ee 0f       	add	r30, r30
    3fd4:	ff 1f       	adc	r31, r31
    3fd6:	e7 52       	subi	r30, 0x27	; 39
    3fd8:	fb 4d       	sbci	r31, 0xDB	; 219
    3fda:	40 82       	st	Z, r4
    3fdc:	51 82       	std	Z+1, r5	; 0x01
	pwm_in[i] = u_motor;
    3fde:	fc 01       	movw	r30, r24
    3fe0:	ef 51       	subi	r30, 0x1F	; 31
    3fe2:	f4 4d       	sbci	r31, 0xD4	; 212
    3fe4:	f0 82       	st	Z, r15
	i++;
    3fe6:	01 96       	adiw	r24, 0x01	; 1
    3fe8:	80 93 07 24 	sts	0x2407, r24
    3fec:	90 93 08 24 	sts	0x2408, r25
	motor1(u_motor);
    3ff0:	8f 2d       	mov	r24, r15
    3ff2:	9e 2d       	mov	r25, r14
    3ff4:	ea db       	rcall	.-2092   	; 0x37ca <motor1>
	u_past=u;
    3ff6:	80 91 f7 23 	lds	r24, 0x23F7
    3ffa:	90 91 f8 23 	lds	r25, 0x23F8
    3ffe:	a0 91 f9 23 	lds	r26, 0x23F9
    4002:	b0 91 fa 23 	lds	r27, 0x23FA
    4006:	80 93 ff 23 	sts	0x23FF, r24
    400a:	90 93 00 24 	sts	0x2400, r25
    400e:	a0 93 01 24 	sts	0x2401, r26
    4012:	b0 93 02 24 	sts	0x2402, r27
	e_past = e;
    4016:	80 91 03 24 	lds	r24, 0x2403
    401a:	90 91 04 24 	lds	r25, 0x2404
    401e:	a0 91 05 24 	lds	r26, 0x2405
    4022:	b0 91 06 24 	lds	r27, 0x2406
    4026:	80 93 fb 23 	sts	0x23FB, r24
    402a:	90 93 fc 23 	sts	0x23FC, r25
    402e:	a0 93 fd 23 	sts	0x23FD, r26
    4032:	b0 93 fe 23 	sts	0x23FE, r27
}
    4036:	ff 90       	pop	r15
    4038:	ef 90       	pop	r14
    403a:	df 90       	pop	r13
    403c:	cf 90       	pop	r12
    403e:	bf 90       	pop	r11
    4040:	af 90       	pop	r10
    4042:	9f 90       	pop	r9
    4044:	8f 90       	pop	r8
    4046:	7f 90       	pop	r7
    4048:	6f 90       	pop	r6
    404a:	5f 90       	pop	r5
    404c:	4f 90       	pop	r4
    404e:	08 95       	ret

00004050 <main>:


int main (void)
{
    4050:	cf 93       	push	r28
    4052:	df 93       	push	r29
    4054:	00 d0       	rcall	.+0      	; 0x4056 <main+0x6>
    4056:	1f 92       	push	r1
    4058:	cd b7       	in	r28, 0x3d	; 61
    405a:	de b7       	in	r29, 0x3e	; 62
	init_OctoPlus();
    405c:	dc db       	rcall	.-2120   	; 0x3816 <init_OctoPlus>
	animation();
    405e:	4b dc       	rcall	.-1898   	; 0x38f6 <animation>
	init_M1(PA4,PA5,PWM_PC0);
    4060:	41 e0       	ldi	r20, 0x01	; 1
    4062:	50 e0       	ldi	r21, 0x00	; 0
    4064:	65 e0       	ldi	r22, 0x05	; 5
    4066:	84 e0       	ldi	r24, 0x04	; 4
    4068:	90 db       	rcall	.-2272   	; 0x378a <init_M1>
    406a:	e0 e4       	ldi	r30, 0x40	; 64
    406c:	f6 e0       	ldi	r31, 0x06	; 6
    406e:	80 e4       	ldi	r24, 0x40	; 64
    4070:	82 83       	std	Z+2, r24	; 0x02
    4072:	80 e8       	ldi	r24, 0x80	; 128
    4074:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4076:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4078:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    407a:	e6 e5       	ldi	r30, 0x56	; 86
    407c:	f6 e0       	ldi	r31, 0x06	; 6
    407e:	90 81       	ld	r25, Z
    4080:	97 70       	andi	r25, 0x07	; 7
    4082:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    4084:	90 81       	ld	r25, Z
    4086:	98 61       	ori	r25, 0x18	; 24
    4088:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    408a:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    408c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    408e:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    4090:	e7 e5       	ldi	r30, 0x57	; 87
    4092:	f6 e0       	ldi	r31, 0x06	; 6
    4094:	90 81       	ld	r25, Z
    4096:	97 70       	andi	r25, 0x07	; 7
    4098:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    409a:	90 81       	ld	r25, Z
    409c:	98 61       	ori	r25, 0x18	; 24
    409e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    40a0:	8f bf       	out	0x3f, r24	; 63
	ioport_set_pin_mode(PC6,IOPORT_MODE_PULLUP);
	ioport_set_pin_mode(PC7,IOPORT_MODE_PULLUP);
	
		
	//-------Timer Setup-------
	tc_enable(&TCC1); // enable the clock to the TCC0
    40a2:	80 e4       	ldi	r24, 0x40	; 64
    40a4:	98 e0       	ldi	r25, 0x08	; 8
    40a6:	0e 94 24 0c 	call	0x1848	; 0x1848 <tc_enable>
	TCC1_PER=0xFFFF; //Set up the period to achieve the 100ms tick
    40aa:	8f ef       	ldi	r24, 0xFF	; 255
    40ac:	9f ef       	ldi	r25, 0xFF	; 255
    40ae:	80 93 66 08 	sts	0x0866, r24
    40b2:	90 93 67 08 	sts	0x0867, r25
	TCC1_CTRLA=TC_CLKSEL_DIV1024_gc; //Setup the preescaler.
    40b6:	87 e0       	ldi	r24, 0x07	; 7
    40b8:	80 93 40 08 	sts	0x0840, r24
	uint16_t sens = 0;
	uint16_t sens_current=0; 
	uint16_t tick_time=0;
	uint8_t encoder_state = 0;
	uint64_t ref = 0;
	led1(1);
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	ba db       	rcall	.-2188   	; 0x3836 <led1>
	TCC1_CNT = 0;
    40c2:	00 e6       	ldi	r16, 0x60	; 96
    40c4:	18 e0       	ldi	r17, 0x08	; 8
    40c6:	f8 01       	movw	r30, r16
    40c8:	10 82       	st	Z, r1
    40ca:	11 82       	std	Z+1, r1	; 0x01
	motor1(0);
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	7c db       	rcall	.-2312   	; 0x37ca <motor1>
	past_counter = TCC1_CNT;
    40d2:	f8 01       	movw	r30, r16
    40d4:	c0 80       	ld	r12, Z
    40d6:	d1 80       	ldd	r13, Z+1	; 0x01
	uint16_t past_counter = 0;
	uint16_t counter = 0;
	uint16_t sens = 0;
	uint16_t sens_current=0; 
	uint16_t tick_time=0;
	uint8_t encoder_state = 0;
    40d8:	19 82       	std	Y+1, r1	; 0x01
	
	uint16_t past_counter = 0;
	uint16_t counter = 0;
	uint16_t sens = 0;
	uint16_t sens_current=0; 
	uint16_t tick_time=0;
    40da:	00 e0       	ldi	r16, 0x00	; 0
    40dc:	10 e0       	ldi	r17, 0x00	; 0
	
	
	uint16_t past_counter = 0;
	uint16_t counter = 0;
	uint16_t sens = 0;
	uint16_t sens_current=0; 
    40de:	1a 82       	std	Y+2, r1	; 0x02
    40e0:	1b 82       	std	Y+3, r1	; 0x03
    
	
	
	uint16_t past_counter = 0;
	uint16_t counter = 0;
	uint16_t sens = 0;
    40e2:	21 2c       	mov	r2, r1
    40e4:	31 2c       	mov	r3, r1
		{
			pid_control(1428,sens);
			tick_time = 0;
		}
		
		if (past_counter != TCC1_CNT)
    40e6:	0f 2e       	mov	r0, r31
    40e8:	f0 e6       	ldi	r31, 0x60	; 96
    40ea:	ef 2e       	mov	r14, r31
    40ec:	f8 e0       	ldi	r31, 0x08	; 8
    40ee:	ff 2e       	mov	r15, r31
    40f0:	f0 2d       	mov	r31, r0
			{
				if (sens_current>2999)
				{
					sens_current = 3000;
				}
				sens = 184200/sens_current;
    40f2:	0f 2e       	mov	r0, r31
    40f4:	f8 e8       	ldi	r31, 0x88	; 136
    40f6:	4f 2e       	mov	r4, r31
    40f8:	ff ec       	ldi	r31, 0xCF	; 207
    40fa:	5f 2e       	mov	r5, r31
    40fc:	f2 e0       	ldi	r31, 0x02	; 2
    40fe:	6f 2e       	mov	r6, r31
    4100:	71 2c       	mov	r7, r1
    4102:	f0 2d       	mov	r31, r0
	uint64_t ref = 0;
	led1(1);
	TCC1_CNT = 0;
	motor1(0);
	past_counter = TCC1_CNT;
	while(i<num_pulses)
    4104:	43 c0       	rjmp	.+134    	; 0x418c <main+0x13c>
	{
		if (tick_time > 54)
    4106:	07 33       	cpi	r16, 0x37	; 55
    4108:	11 05       	cpc	r17, r1
    410a:	48 f0       	brcs	.+18     	; 0x411e <main+0xce>
		{
			pid_control(1428,sens);
    410c:	a5 01       	movw	r20, r10
    410e:	94 01       	movw	r18, r8
    4110:	64 e9       	ldi	r22, 0x94	; 148
    4112:	75 e0       	ldi	r23, 0x05	; 5
    4114:	80 e0       	ldi	r24, 0x00	; 0
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	b9 de       	rcall	.-654    	; 0x3e8c <pid_control>
			tick_time = 0;
    411a:	00 e0       	ldi	r16, 0x00	; 0
    411c:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if (past_counter != TCC1_CNT)
    411e:	f7 01       	movw	r30, r14
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	8c 15       	cp	r24, r12
    4126:	9d 05       	cpc	r25, r13
    4128:	a1 f1       	breq	.+104    	; 0x4192 <main+0x142>
		{
			
			tick_time++;
    412a:	0f 5f       	subi	r16, 0xFF	; 255
    412c:	1f 4f       	sbci	r17, 0xFF	; 255
			past_counter=TCC1_CNT;
    412e:	c0 80       	ld	r12, Z
    4130:	d1 80       	ldd	r13, Z+1	; 0x01
			sens_current++;
    4132:	2a 81       	ldd	r18, Y+2	; 0x02
    4134:	3b 81       	ldd	r19, Y+3	; 0x03
    4136:	2f 5f       	subi	r18, 0xFF	; 255
    4138:	3f 4f       	sbci	r19, 0xFF	; 255
    413a:	2a 83       	std	Y+2, r18	; 0x02
    413c:	3b 83       	std	Y+3, r19	; 0x03
			if (encoder_state == 1 && read_pin(PC6)==0)
    413e:	39 81       	ldd	r19, Y+1	; 0x01
    4140:	31 30       	cpi	r19, 0x01	; 1
    4142:	d1 f4       	brne	.+52     	; 0x4178 <main+0x128>
    4144:	86 e1       	ldi	r24, 0x16	; 22
    4146:	8a da       	rcall	.-2796   	; 0x365c <read_pin>
    4148:	89 2b       	or	r24, r25
    414a:	b1 f4       	brne	.+44     	; 0x4178 <main+0x128>
			{
				if (sens_current>2999)
    414c:	8a 81       	ldd	r24, Y+2	; 0x02
    414e:	9b 81       	ldd	r25, Y+3	; 0x03
    4150:	88 3b       	cpi	r24, 0xB8	; 184
    4152:	9b 40       	sbci	r25, 0x0B	; 11
    4154:	20 f0       	brcs	.+8      	; 0x415e <main+0x10e>
				{
					sens_current = 3000;
    4156:	f8 eb       	ldi	r31, 0xB8	; 184
    4158:	fa 83       	std	Y+2, r31	; 0x02
    415a:	2b e0       	ldi	r18, 0x0B	; 11
    415c:	2b 83       	std	Y+3, r18	; 0x03
				}
				sens = 184200/sens_current;
    415e:	8a 81       	ldd	r24, Y+2	; 0x02
    4160:	9b 81       	ldd	r25, Y+3	; 0x03
    4162:	9c 01       	movw	r18, r24
    4164:	40 e0       	ldi	r20, 0x00	; 0
    4166:	50 e0       	ldi	r21, 0x00	; 0
    4168:	c3 01       	movw	r24, r6
    416a:	b2 01       	movw	r22, r4
    416c:	3f d3       	rcall	.+1662   	; 0x47ec <__divmodsi4>
    416e:	19 01       	movw	r2, r18
				sens_current = 0;
				encoder_state = 0;
    4170:	19 82       	std	Y+1, r1	; 0x01
				if (sens_current>2999)
				{
					sens_current = 3000;
				}
				sens = 184200/sens_current;
				sens_current = 0;
    4172:	1a 82       	std	Y+2, r1	; 0x02
    4174:	1b 82       	std	Y+3, r1	; 0x03
				encoder_state = 0;
    4176:	0a c0       	rjmp	.+20     	; 0x418c <main+0x13c>
			}
			else if (encoder_state != read_pin(PC6))
    4178:	86 e1       	ldi	r24, 0x16	; 22
    417a:	70 da       	rcall	.-2848   	; 0x365c <read_pin>
    417c:	e9 81       	ldd	r30, Y+1	; 0x01
    417e:	2e 2f       	mov	r18, r30
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	28 17       	cp	r18, r24
    4184:	39 07       	cpc	r19, r25
    4186:	11 f0       	breq	.+4      	; 0x418c <main+0x13c>
			{
				encoder_state = 1;
    4188:	f1 e0       	ldi	r31, 0x01	; 1
    418a:	f9 83       	std	Y+1, r31	; 0x01
	past_counter = TCC1_CNT;
	while(i<num_pulses)
	{
		if (tick_time > 54)
		{
			pid_control(1428,sens);
    418c:	41 01       	movw	r8, r2
    418e:	a1 2c       	mov	r10, r1
    4190:	b1 2c       	mov	r11, r1
	uint64_t ref = 0;
	led1(1);
	TCC1_CNT = 0;
	motor1(0);
	past_counter = TCC1_CNT;
	while(i<num_pulses)
    4192:	80 91 07 24 	lds	r24, 0x2407
    4196:	90 91 08 24 	lds	r25, 0x2408
    419a:	88 35       	cpi	r24, 0x58	; 88
    419c:	92 40       	sbci	r25, 0x02	; 2
    419e:	0c f4       	brge	.+2      	; 0x41a2 <main+0x152>
    41a0:	b2 cf       	rjmp	.-156    	; 0x4106 <main+0xb6>
			{
				encoder_state = 1;
			}
		}
	}
	for (i=1;i<num_pulses;i++)
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	80 93 07 24 	sts	0x2407, r24
    41aa:	90 93 08 24 	sts	0x2408, r25
	{
		printf("%d %d %d\n",i,sens_data[i],pwm_in[i]);
    41ae:	08 e4       	ldi	r16, 0x48	; 72
    41b0:	11 e2       	ldi	r17, 0x21	; 33
    41b2:	fc 01       	movw	r30, r24
    41b4:	ef 51       	subi	r30, 0x1F	; 31
    41b6:	f4 4d       	sbci	r31, 0xD4	; 212
    41b8:	40 81       	ld	r20, Z
    41ba:	24 2f       	mov	r18, r20
    41bc:	33 27       	eor	r19, r19
    41be:	27 fd       	sbrc	r18, 7
    41c0:	30 95       	com	r19
    41c2:	3f 93       	push	r19
    41c4:	4f 93       	push	r20
    41c6:	fc 01       	movw	r30, r24
    41c8:	ee 0f       	add	r30, r30
    41ca:	ff 1f       	adc	r31, r31
    41cc:	e7 52       	subi	r30, 0x27	; 39
    41ce:	fb 4d       	sbci	r31, 0xDB	; 219
    41d0:	21 81       	ldd	r18, Z+1	; 0x01
    41d2:	2f 93       	push	r18
    41d4:	20 81       	ld	r18, Z
    41d6:	2f 93       	push	r18
    41d8:	9f 93       	push	r25
    41da:	8f 93       	push	r24
    41dc:	1f 93       	push	r17
    41de:	0f 93       	push	r16
    41e0:	90 d3       	rcall	.+1824   	; 0x4902 <printf>
			{
				encoder_state = 1;
			}
		}
	}
	for (i=1;i<num_pulses;i++)
    41e2:	80 91 07 24 	lds	r24, 0x2407
    41e6:	90 91 08 24 	lds	r25, 0x2408
    41ea:	01 96       	adiw	r24, 0x01	; 1
    41ec:	80 93 07 24 	sts	0x2407, r24
    41f0:	90 93 08 24 	sts	0x2408, r25
    41f4:	cd bf       	out	0x3d, r28	; 61
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	88 35       	cpi	r24, 0x58	; 88
    41fa:	f2 e0       	ldi	r31, 0x02	; 2
    41fc:	9f 07       	cpc	r25, r31
    41fe:	cc f2       	brlt	.-78     	; 0x41b2 <main+0x162>
	{
		printf("%d %d %d\n",i,sens_data[i],pwm_in[i]);
	}
	motor1(0);
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	e2 da       	rcall	.-2620   	; 0x37ca <motor1>
	for (;;)
	{
		led3(read_pin(PC6));
    4206:	86 e1       	ldi	r24, 0x16	; 22
    4208:	29 da       	rcall	.-2990   	; 0x365c <read_pin>
    420a:	45 db       	rcall	.-2422   	; 0x3896 <led3>
		led4(read_pin(PC7));
    420c:	87 e1       	ldi	r24, 0x17	; 23
    420e:	26 da       	rcall	.-2996   	; 0x365c <read_pin>
    4210:	5a db       	rcall	.-2380   	; 0x38c6 <led4>
    4212:	f9 cf       	rjmp	.-14     	; 0x4206 <main+0x1b6>

00004214 <__subsf3>:
    4214:	50 58       	subi	r21, 0x80	; 128

00004216 <__addsf3>:
    4216:	bb 27       	eor	r27, r27
    4218:	aa 27       	eor	r26, r26
    421a:	0e d0       	rcall	.+28     	; 0x4238 <__addsf3x>
    421c:	fd c1       	rjmp	.+1018   	; 0x4618 <__fp_round>
    421e:	ee d1       	rcall	.+988    	; 0x45fc <__fp_pscA>
    4220:	30 f0       	brcs	.+12     	; 0x422e <__addsf3+0x18>
    4222:	f3 d1       	rcall	.+998    	; 0x460a <__fp_pscB>
    4224:	20 f0       	brcs	.+8      	; 0x422e <__addsf3+0x18>
    4226:	31 f4       	brne	.+12     	; 0x4234 <__addsf3+0x1e>
    4228:	9f 3f       	cpi	r25, 0xFF	; 255
    422a:	11 f4       	brne	.+4      	; 0x4230 <__addsf3+0x1a>
    422c:	1e f4       	brtc	.+6      	; 0x4234 <__addsf3+0x1e>
    422e:	d3 c1       	rjmp	.+934    	; 0x45d6 <__fp_nan>
    4230:	0e f4       	brtc	.+2      	; 0x4234 <__addsf3+0x1e>
    4232:	e0 95       	com	r30
    4234:	e7 fb       	bst	r30, 7
    4236:	c9 c1       	rjmp	.+914    	; 0x45ca <__fp_inf>

00004238 <__addsf3x>:
    4238:	e9 2f       	mov	r30, r25
    423a:	ff d1       	rcall	.+1022   	; 0x463a <__fp_split3>
    423c:	80 f3       	brcs	.-32     	; 0x421e <__addsf3+0x8>
    423e:	ba 17       	cp	r27, r26
    4240:	62 07       	cpc	r22, r18
    4242:	73 07       	cpc	r23, r19
    4244:	84 07       	cpc	r24, r20
    4246:	95 07       	cpc	r25, r21
    4248:	18 f0       	brcs	.+6      	; 0x4250 <__addsf3x+0x18>
    424a:	71 f4       	brne	.+28     	; 0x4268 <__addsf3x+0x30>
    424c:	9e f5       	brtc	.+102    	; 0x42b4 <__addsf3x+0x7c>
    424e:	17 c2       	rjmp	.+1070   	; 0x467e <__fp_zero>
    4250:	0e f4       	brtc	.+2      	; 0x4254 <__addsf3x+0x1c>
    4252:	e0 95       	com	r30
    4254:	0b 2e       	mov	r0, r27
    4256:	ba 2f       	mov	r27, r26
    4258:	a0 2d       	mov	r26, r0
    425a:	0b 01       	movw	r0, r22
    425c:	b9 01       	movw	r22, r18
    425e:	90 01       	movw	r18, r0
    4260:	0c 01       	movw	r0, r24
    4262:	ca 01       	movw	r24, r20
    4264:	a0 01       	movw	r20, r0
    4266:	11 24       	eor	r1, r1
    4268:	ff 27       	eor	r31, r31
    426a:	59 1b       	sub	r21, r25
    426c:	99 f0       	breq	.+38     	; 0x4294 <__addsf3x+0x5c>
    426e:	59 3f       	cpi	r21, 0xF9	; 249
    4270:	50 f4       	brcc	.+20     	; 0x4286 <__addsf3x+0x4e>
    4272:	50 3e       	cpi	r21, 0xE0	; 224
    4274:	68 f1       	brcs	.+90     	; 0x42d0 <__addsf3x+0x98>
    4276:	1a 16       	cp	r1, r26
    4278:	f0 40       	sbci	r31, 0x00	; 0
    427a:	a2 2f       	mov	r26, r18
    427c:	23 2f       	mov	r18, r19
    427e:	34 2f       	mov	r19, r20
    4280:	44 27       	eor	r20, r20
    4282:	58 5f       	subi	r21, 0xF8	; 248
    4284:	f3 cf       	rjmp	.-26     	; 0x426c <__addsf3x+0x34>
    4286:	46 95       	lsr	r20
    4288:	37 95       	ror	r19
    428a:	27 95       	ror	r18
    428c:	a7 95       	ror	r26
    428e:	f0 40       	sbci	r31, 0x00	; 0
    4290:	53 95       	inc	r21
    4292:	c9 f7       	brne	.-14     	; 0x4286 <__addsf3x+0x4e>
    4294:	7e f4       	brtc	.+30     	; 0x42b4 <__addsf3x+0x7c>
    4296:	1f 16       	cp	r1, r31
    4298:	ba 0b       	sbc	r27, r26
    429a:	62 0b       	sbc	r22, r18
    429c:	73 0b       	sbc	r23, r19
    429e:	84 0b       	sbc	r24, r20
    42a0:	ba f0       	brmi	.+46     	; 0x42d0 <__addsf3x+0x98>
    42a2:	91 50       	subi	r25, 0x01	; 1
    42a4:	a1 f0       	breq	.+40     	; 0x42ce <__addsf3x+0x96>
    42a6:	ff 0f       	add	r31, r31
    42a8:	bb 1f       	adc	r27, r27
    42aa:	66 1f       	adc	r22, r22
    42ac:	77 1f       	adc	r23, r23
    42ae:	88 1f       	adc	r24, r24
    42b0:	c2 f7       	brpl	.-16     	; 0x42a2 <__addsf3x+0x6a>
    42b2:	0e c0       	rjmp	.+28     	; 0x42d0 <__addsf3x+0x98>
    42b4:	ba 0f       	add	r27, r26
    42b6:	62 1f       	adc	r22, r18
    42b8:	73 1f       	adc	r23, r19
    42ba:	84 1f       	adc	r24, r20
    42bc:	48 f4       	brcc	.+18     	; 0x42d0 <__addsf3x+0x98>
    42be:	87 95       	ror	r24
    42c0:	77 95       	ror	r23
    42c2:	67 95       	ror	r22
    42c4:	b7 95       	ror	r27
    42c6:	f7 95       	ror	r31
    42c8:	9e 3f       	cpi	r25, 0xFE	; 254
    42ca:	08 f0       	brcs	.+2      	; 0x42ce <__addsf3x+0x96>
    42cc:	b3 cf       	rjmp	.-154    	; 0x4234 <__addsf3+0x1e>
    42ce:	93 95       	inc	r25
    42d0:	88 0f       	add	r24, r24
    42d2:	08 f0       	brcs	.+2      	; 0x42d6 <__addsf3x+0x9e>
    42d4:	99 27       	eor	r25, r25
    42d6:	ee 0f       	add	r30, r30
    42d8:	97 95       	ror	r25
    42da:	87 95       	ror	r24
    42dc:	08 95       	ret

000042de <__cmpsf2>:
    42de:	51 d1       	rcall	.+674    	; 0x4582 <__fp_cmp>
    42e0:	08 f4       	brcc	.+2      	; 0x42e4 <__cmpsf2+0x6>
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	08 95       	ret

000042e6 <__divsf3>:
    42e6:	0c d0       	rcall	.+24     	; 0x4300 <__divsf3x>
    42e8:	97 c1       	rjmp	.+814    	; 0x4618 <__fp_round>
    42ea:	8f d1       	rcall	.+798    	; 0x460a <__fp_pscB>
    42ec:	40 f0       	brcs	.+16     	; 0x42fe <__divsf3+0x18>
    42ee:	86 d1       	rcall	.+780    	; 0x45fc <__fp_pscA>
    42f0:	30 f0       	brcs	.+12     	; 0x42fe <__divsf3+0x18>
    42f2:	21 f4       	brne	.+8      	; 0x42fc <__divsf3+0x16>
    42f4:	5f 3f       	cpi	r21, 0xFF	; 255
    42f6:	19 f0       	breq	.+6      	; 0x42fe <__divsf3+0x18>
    42f8:	68 c1       	rjmp	.+720    	; 0x45ca <__fp_inf>
    42fa:	51 11       	cpse	r21, r1
    42fc:	c1 c1       	rjmp	.+898    	; 0x4680 <__fp_szero>
    42fe:	6b c1       	rjmp	.+726    	; 0x45d6 <__fp_nan>

00004300 <__divsf3x>:
    4300:	9c d1       	rcall	.+824    	; 0x463a <__fp_split3>
    4302:	98 f3       	brcs	.-26     	; 0x42ea <__divsf3+0x4>

00004304 <__divsf3_pse>:
    4304:	99 23       	and	r25, r25
    4306:	c9 f3       	breq	.-14     	; 0x42fa <__divsf3+0x14>
    4308:	55 23       	and	r21, r21
    430a:	b1 f3       	breq	.-20     	; 0x42f8 <__divsf3+0x12>
    430c:	95 1b       	sub	r25, r21
    430e:	55 0b       	sbc	r21, r21
    4310:	bb 27       	eor	r27, r27
    4312:	aa 27       	eor	r26, r26
    4314:	62 17       	cp	r22, r18
    4316:	73 07       	cpc	r23, r19
    4318:	84 07       	cpc	r24, r20
    431a:	38 f0       	brcs	.+14     	; 0x432a <__divsf3_pse+0x26>
    431c:	9f 5f       	subi	r25, 0xFF	; 255
    431e:	5f 4f       	sbci	r21, 0xFF	; 255
    4320:	22 0f       	add	r18, r18
    4322:	33 1f       	adc	r19, r19
    4324:	44 1f       	adc	r20, r20
    4326:	aa 1f       	adc	r26, r26
    4328:	a9 f3       	breq	.-22     	; 0x4314 <__divsf3_pse+0x10>
    432a:	33 d0       	rcall	.+102    	; 0x4392 <__divsf3_pse+0x8e>
    432c:	0e 2e       	mov	r0, r30
    432e:	3a f0       	brmi	.+14     	; 0x433e <__divsf3_pse+0x3a>
    4330:	e0 e8       	ldi	r30, 0x80	; 128
    4332:	30 d0       	rcall	.+96     	; 0x4394 <__divsf3_pse+0x90>
    4334:	91 50       	subi	r25, 0x01	; 1
    4336:	50 40       	sbci	r21, 0x00	; 0
    4338:	e6 95       	lsr	r30
    433a:	00 1c       	adc	r0, r0
    433c:	ca f7       	brpl	.-14     	; 0x4330 <__divsf3_pse+0x2c>
    433e:	29 d0       	rcall	.+82     	; 0x4392 <__divsf3_pse+0x8e>
    4340:	fe 2f       	mov	r31, r30
    4342:	27 d0       	rcall	.+78     	; 0x4392 <__divsf3_pse+0x8e>
    4344:	66 0f       	add	r22, r22
    4346:	77 1f       	adc	r23, r23
    4348:	88 1f       	adc	r24, r24
    434a:	bb 1f       	adc	r27, r27
    434c:	26 17       	cp	r18, r22
    434e:	37 07       	cpc	r19, r23
    4350:	48 07       	cpc	r20, r24
    4352:	ab 07       	cpc	r26, r27
    4354:	b0 e8       	ldi	r27, 0x80	; 128
    4356:	09 f0       	breq	.+2      	; 0x435a <__divsf3_pse+0x56>
    4358:	bb 0b       	sbc	r27, r27
    435a:	80 2d       	mov	r24, r0
    435c:	bf 01       	movw	r22, r30
    435e:	ff 27       	eor	r31, r31
    4360:	93 58       	subi	r25, 0x83	; 131
    4362:	5f 4f       	sbci	r21, 0xFF	; 255
    4364:	2a f0       	brmi	.+10     	; 0x4370 <__divsf3_pse+0x6c>
    4366:	9e 3f       	cpi	r25, 0xFE	; 254
    4368:	51 05       	cpc	r21, r1
    436a:	68 f0       	brcs	.+26     	; 0x4386 <__divsf3_pse+0x82>
    436c:	2e c1       	rjmp	.+604    	; 0x45ca <__fp_inf>
    436e:	88 c1       	rjmp	.+784    	; 0x4680 <__fp_szero>
    4370:	5f 3f       	cpi	r21, 0xFF	; 255
    4372:	ec f3       	brlt	.-6      	; 0x436e <__divsf3_pse+0x6a>
    4374:	98 3e       	cpi	r25, 0xE8	; 232
    4376:	dc f3       	brlt	.-10     	; 0x436e <__divsf3_pse+0x6a>
    4378:	86 95       	lsr	r24
    437a:	77 95       	ror	r23
    437c:	67 95       	ror	r22
    437e:	b7 95       	ror	r27
    4380:	f7 95       	ror	r31
    4382:	9f 5f       	subi	r25, 0xFF	; 255
    4384:	c9 f7       	brne	.-14     	; 0x4378 <__divsf3_pse+0x74>
    4386:	88 0f       	add	r24, r24
    4388:	91 1d       	adc	r25, r1
    438a:	96 95       	lsr	r25
    438c:	87 95       	ror	r24
    438e:	97 f9       	bld	r25, 7
    4390:	08 95       	ret
    4392:	e1 e0       	ldi	r30, 0x01	; 1
    4394:	66 0f       	add	r22, r22
    4396:	77 1f       	adc	r23, r23
    4398:	88 1f       	adc	r24, r24
    439a:	bb 1f       	adc	r27, r27
    439c:	62 17       	cp	r22, r18
    439e:	73 07       	cpc	r23, r19
    43a0:	84 07       	cpc	r24, r20
    43a2:	ba 07       	cpc	r27, r26
    43a4:	20 f0       	brcs	.+8      	; 0x43ae <__divsf3_pse+0xaa>
    43a6:	62 1b       	sub	r22, r18
    43a8:	73 0b       	sbc	r23, r19
    43aa:	84 0b       	sbc	r24, r20
    43ac:	ba 0b       	sbc	r27, r26
    43ae:	ee 1f       	adc	r30, r30
    43b0:	88 f7       	brcc	.-30     	; 0x4394 <__divsf3_pse+0x90>
    43b2:	e0 95       	com	r30
    43b4:	08 95       	ret

000043b6 <__fixsfdi>:
    43b6:	be e3       	ldi	r27, 0x3E	; 62
    43b8:	04 d0       	rcall	.+8      	; 0x43c2 <__fixunssfdi+0x2>
    43ba:	08 f4       	brcc	.+2      	; 0x43be <__fixsfdi+0x8>
    43bc:	90 e8       	ldi	r25, 0x80	; 128
    43be:	08 95       	ret

000043c0 <__fixunssfdi>:
    43c0:	bf e3       	ldi	r27, 0x3F	; 63
    43c2:	22 27       	eor	r18, r18
    43c4:	33 27       	eor	r19, r19
    43c6:	a9 01       	movw	r20, r18
    43c8:	40 d1       	rcall	.+640    	; 0x464a <__fp_splitA>
    43ca:	58 f1       	brcs	.+86     	; 0x4422 <__fixunssfdi+0x62>
    43cc:	9f 57       	subi	r25, 0x7F	; 127
    43ce:	40 f1       	brcs	.+80     	; 0x4420 <__fixunssfdi+0x60>
    43d0:	b9 17       	cp	r27, r25
    43d2:	38 f1       	brcs	.+78     	; 0x4422 <__fixunssfdi+0x62>
    43d4:	bf e3       	ldi	r27, 0x3F	; 63
    43d6:	b9 1b       	sub	r27, r25
    43d8:	99 27       	eor	r25, r25
    43da:	b8 50       	subi	r27, 0x08	; 8
    43dc:	3a f4       	brpl	.+14     	; 0x43ec <__fixunssfdi+0x2c>
    43de:	66 0f       	add	r22, r22
    43e0:	77 1f       	adc	r23, r23
    43e2:	88 1f       	adc	r24, r24
    43e4:	99 1f       	adc	r25, r25
    43e6:	b3 95       	inc	r27
    43e8:	d2 f3       	brmi	.-12     	; 0x43de <__fixunssfdi+0x1e>
    43ea:	16 c0       	rjmp	.+44     	; 0x4418 <__fixunssfdi+0x58>
    43ec:	b8 50       	subi	r27, 0x08	; 8
    43ee:	4a f0       	brmi	.+18     	; 0x4402 <__fixunssfdi+0x42>
    43f0:	23 2f       	mov	r18, r19
    43f2:	34 2f       	mov	r19, r20
    43f4:	45 2f       	mov	r20, r21
    43f6:	56 2f       	mov	r21, r22
    43f8:	67 2f       	mov	r22, r23
    43fa:	78 2f       	mov	r23, r24
    43fc:	88 27       	eor	r24, r24
    43fe:	b8 50       	subi	r27, 0x08	; 8
    4400:	ba f7       	brpl	.-18     	; 0x43f0 <__fixunssfdi+0x30>
    4402:	b8 5f       	subi	r27, 0xF8	; 248
    4404:	49 f0       	breq	.+18     	; 0x4418 <__fixunssfdi+0x58>
    4406:	86 95       	lsr	r24
    4408:	77 95       	ror	r23
    440a:	67 95       	ror	r22
    440c:	57 95       	ror	r21
    440e:	47 95       	ror	r20
    4410:	37 95       	ror	r19
    4412:	27 95       	ror	r18
    4414:	ba 95       	dec	r27
    4416:	b9 f7       	brne	.-18     	; 0x4406 <__fixunssfdi+0x46>
    4418:	0e f4       	brtc	.+2      	; 0x441c <__fixunssfdi+0x5c>
    441a:	e0 d0       	rcall	.+448    	; 0x45dc <__fp_negdi>
    441c:	88 94       	clc
    441e:	08 95       	ret
    4420:	88 94       	clc
    4422:	60 e0       	ldi	r22, 0x00	; 0
    4424:	70 e0       	ldi	r23, 0x00	; 0
    4426:	cb 01       	movw	r24, r22
    4428:	08 95       	ret

0000442a <__fixsfsi>:
    442a:	04 d0       	rcall	.+8      	; 0x4434 <__fixunssfsi>
    442c:	68 94       	set
    442e:	b1 11       	cpse	r27, r1
    4430:	27 c1       	rjmp	.+590    	; 0x4680 <__fp_szero>
    4432:	08 95       	ret

00004434 <__fixunssfsi>:
    4434:	0a d1       	rcall	.+532    	; 0x464a <__fp_splitA>
    4436:	88 f0       	brcs	.+34     	; 0x445a <__fixunssfsi+0x26>
    4438:	9f 57       	subi	r25, 0x7F	; 127
    443a:	90 f0       	brcs	.+36     	; 0x4460 <__fixunssfsi+0x2c>
    443c:	b9 2f       	mov	r27, r25
    443e:	99 27       	eor	r25, r25
    4440:	b7 51       	subi	r27, 0x17	; 23
    4442:	a0 f0       	brcs	.+40     	; 0x446c <__fixunssfsi+0x38>
    4444:	d1 f0       	breq	.+52     	; 0x447a <__fixunssfsi+0x46>
    4446:	66 0f       	add	r22, r22
    4448:	77 1f       	adc	r23, r23
    444a:	88 1f       	adc	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	1a f0       	brmi	.+6      	; 0x4456 <__fixunssfsi+0x22>
    4450:	ba 95       	dec	r27
    4452:	c9 f7       	brne	.-14     	; 0x4446 <__fixunssfsi+0x12>
    4454:	12 c0       	rjmp	.+36     	; 0x447a <__fixunssfsi+0x46>
    4456:	b1 30       	cpi	r27, 0x01	; 1
    4458:	81 f0       	breq	.+32     	; 0x447a <__fixunssfsi+0x46>
    445a:	11 d1       	rcall	.+546    	; 0x467e <__fp_zero>
    445c:	b1 e0       	ldi	r27, 0x01	; 1
    445e:	08 95       	ret
    4460:	0e c1       	rjmp	.+540    	; 0x467e <__fp_zero>
    4462:	67 2f       	mov	r22, r23
    4464:	78 2f       	mov	r23, r24
    4466:	88 27       	eor	r24, r24
    4468:	b8 5f       	subi	r27, 0xF8	; 248
    446a:	39 f0       	breq	.+14     	; 0x447a <__fixunssfsi+0x46>
    446c:	b9 3f       	cpi	r27, 0xF9	; 249
    446e:	cc f3       	brlt	.-14     	; 0x4462 <__fixunssfsi+0x2e>
    4470:	86 95       	lsr	r24
    4472:	77 95       	ror	r23
    4474:	67 95       	ror	r22
    4476:	b3 95       	inc	r27
    4478:	d9 f7       	brne	.-10     	; 0x4470 <__fixunssfsi+0x3c>
    447a:	3e f4       	brtc	.+14     	; 0x448a <__fixunssfsi+0x56>
    447c:	90 95       	com	r25
    447e:	80 95       	com	r24
    4480:	70 95       	com	r23
    4482:	61 95       	neg	r22
    4484:	7f 4f       	sbci	r23, 0xFF	; 255
    4486:	8f 4f       	sbci	r24, 0xFF	; 255
    4488:	9f 4f       	sbci	r25, 0xFF	; 255
    448a:	08 95       	ret

0000448c <__floatunsisf>:
    448c:	e8 94       	clt
    448e:	09 c0       	rjmp	.+18     	; 0x44a2 <__floatsisf+0x12>

00004490 <__floatsisf>:
    4490:	97 fb       	bst	r25, 7
    4492:	3e f4       	brtc	.+14     	; 0x44a2 <__floatsisf+0x12>
    4494:	90 95       	com	r25
    4496:	80 95       	com	r24
    4498:	70 95       	com	r23
    449a:	61 95       	neg	r22
    449c:	7f 4f       	sbci	r23, 0xFF	; 255
    449e:	8f 4f       	sbci	r24, 0xFF	; 255
    44a0:	9f 4f       	sbci	r25, 0xFF	; 255
    44a2:	99 23       	and	r25, r25
    44a4:	a9 f0       	breq	.+42     	; 0x44d0 <__floatsisf+0x40>
    44a6:	f9 2f       	mov	r31, r25
    44a8:	96 e9       	ldi	r25, 0x96	; 150
    44aa:	bb 27       	eor	r27, r27
    44ac:	93 95       	inc	r25
    44ae:	f6 95       	lsr	r31
    44b0:	87 95       	ror	r24
    44b2:	77 95       	ror	r23
    44b4:	67 95       	ror	r22
    44b6:	b7 95       	ror	r27
    44b8:	f1 11       	cpse	r31, r1
    44ba:	f8 cf       	rjmp	.-16     	; 0x44ac <__floatsisf+0x1c>
    44bc:	fa f4       	brpl	.+62     	; 0x44fc <__floatsisf+0x6c>
    44be:	bb 0f       	add	r27, r27
    44c0:	11 f4       	brne	.+4      	; 0x44c6 <__floatsisf+0x36>
    44c2:	60 ff       	sbrs	r22, 0
    44c4:	1b c0       	rjmp	.+54     	; 0x44fc <__floatsisf+0x6c>
    44c6:	6f 5f       	subi	r22, 0xFF	; 255
    44c8:	7f 4f       	sbci	r23, 0xFF	; 255
    44ca:	8f 4f       	sbci	r24, 0xFF	; 255
    44cc:	9f 4f       	sbci	r25, 0xFF	; 255
    44ce:	16 c0       	rjmp	.+44     	; 0x44fc <__floatsisf+0x6c>
    44d0:	88 23       	and	r24, r24
    44d2:	11 f0       	breq	.+4      	; 0x44d8 <__floatsisf+0x48>
    44d4:	96 e9       	ldi	r25, 0x96	; 150
    44d6:	11 c0       	rjmp	.+34     	; 0x44fa <__floatsisf+0x6a>
    44d8:	77 23       	and	r23, r23
    44da:	21 f0       	breq	.+8      	; 0x44e4 <__floatsisf+0x54>
    44dc:	9e e8       	ldi	r25, 0x8E	; 142
    44de:	87 2f       	mov	r24, r23
    44e0:	76 2f       	mov	r23, r22
    44e2:	05 c0       	rjmp	.+10     	; 0x44ee <__floatsisf+0x5e>
    44e4:	66 23       	and	r22, r22
    44e6:	71 f0       	breq	.+28     	; 0x4504 <__floatsisf+0x74>
    44e8:	96 e8       	ldi	r25, 0x86	; 134
    44ea:	86 2f       	mov	r24, r22
    44ec:	70 e0       	ldi	r23, 0x00	; 0
    44ee:	60 e0       	ldi	r22, 0x00	; 0
    44f0:	2a f0       	brmi	.+10     	; 0x44fc <__floatsisf+0x6c>
    44f2:	9a 95       	dec	r25
    44f4:	66 0f       	add	r22, r22
    44f6:	77 1f       	adc	r23, r23
    44f8:	88 1f       	adc	r24, r24
    44fa:	da f7       	brpl	.-10     	; 0x44f2 <__floatsisf+0x62>
    44fc:	88 0f       	add	r24, r24
    44fe:	96 95       	lsr	r25
    4500:	87 95       	ror	r24
    4502:	97 f9       	bld	r25, 7
    4504:	08 95       	ret

00004506 <__floatundisf>:
    4506:	e8 94       	clt

00004508 <__fp_di2sf>:
    4508:	f9 2f       	mov	r31, r25
    450a:	96 eb       	ldi	r25, 0xB6	; 182
    450c:	ff 23       	and	r31, r31
    450e:	81 f0       	breq	.+32     	; 0x4530 <__fp_di2sf+0x28>
    4510:	12 16       	cp	r1, r18
    4512:	13 06       	cpc	r1, r19
    4514:	14 06       	cpc	r1, r20
    4516:	44 0b       	sbc	r20, r20
    4518:	93 95       	inc	r25
    451a:	f6 95       	lsr	r31
    451c:	87 95       	ror	r24
    451e:	77 95       	ror	r23
    4520:	67 95       	ror	r22
    4522:	57 95       	ror	r21
    4524:	40 40       	sbci	r20, 0x00	; 0
    4526:	ff 23       	and	r31, r31
    4528:	b9 f7       	brne	.-18     	; 0x4518 <__fp_di2sf+0x10>
    452a:	1b c0       	rjmp	.+54     	; 0x4562 <__fp_di2sf+0x5a>
    452c:	99 27       	eor	r25, r25
    452e:	08 95       	ret
    4530:	88 23       	and	r24, r24
    4532:	51 f4       	brne	.+20     	; 0x4548 <__fp_di2sf+0x40>
    4534:	98 50       	subi	r25, 0x08	; 8
    4536:	d2 f7       	brpl	.-12     	; 0x452c <__fp_di2sf+0x24>
    4538:	87 2b       	or	r24, r23
    453a:	76 2f       	mov	r23, r22
    453c:	65 2f       	mov	r22, r21
    453e:	54 2f       	mov	r21, r20
    4540:	43 2f       	mov	r20, r19
    4542:	32 2f       	mov	r19, r18
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	b1 f3       	breq	.-20     	; 0x4534 <__fp_di2sf+0x2c>
    4548:	12 16       	cp	r1, r18
    454a:	13 06       	cpc	r1, r19
    454c:	14 06       	cpc	r1, r20
    454e:	44 0b       	sbc	r20, r20
    4550:	88 23       	and	r24, r24
    4552:	3a f0       	brmi	.+14     	; 0x4562 <__fp_di2sf+0x5a>
    4554:	9a 95       	dec	r25
    4556:	44 0f       	add	r20, r20
    4558:	55 1f       	adc	r21, r21
    455a:	66 1f       	adc	r22, r22
    455c:	77 1f       	adc	r23, r23
    455e:	88 1f       	adc	r24, r24
    4560:	ca f7       	brpl	.-14     	; 0x4554 <__fp_di2sf+0x4c>
    4562:	55 23       	and	r21, r21
    4564:	4a f4       	brpl	.+18     	; 0x4578 <__fp_di2sf+0x70>
    4566:	44 0f       	add	r20, r20
    4568:	55 1f       	adc	r21, r21
    456a:	11 f4       	brne	.+4      	; 0x4570 <__fp_di2sf+0x68>
    456c:	60 ff       	sbrs	r22, 0
    456e:	04 c0       	rjmp	.+8      	; 0x4578 <__fp_di2sf+0x70>
    4570:	6f 5f       	subi	r22, 0xFF	; 255
    4572:	7f 4f       	sbci	r23, 0xFF	; 255
    4574:	8f 4f       	sbci	r24, 0xFF	; 255
    4576:	9f 4f       	sbci	r25, 0xFF	; 255
    4578:	88 0f       	add	r24, r24
    457a:	96 95       	lsr	r25
    457c:	87 95       	ror	r24
    457e:	97 f9       	bld	r25, 7
    4580:	08 95       	ret

00004582 <__fp_cmp>:
    4582:	99 0f       	add	r25, r25
    4584:	00 08       	sbc	r0, r0
    4586:	55 0f       	add	r21, r21
    4588:	aa 0b       	sbc	r26, r26
    458a:	e0 e8       	ldi	r30, 0x80	; 128
    458c:	fe ef       	ldi	r31, 0xFE	; 254
    458e:	16 16       	cp	r1, r22
    4590:	17 06       	cpc	r1, r23
    4592:	e8 07       	cpc	r30, r24
    4594:	f9 07       	cpc	r31, r25
    4596:	c0 f0       	brcs	.+48     	; 0x45c8 <__fp_cmp+0x46>
    4598:	12 16       	cp	r1, r18
    459a:	13 06       	cpc	r1, r19
    459c:	e4 07       	cpc	r30, r20
    459e:	f5 07       	cpc	r31, r21
    45a0:	98 f0       	brcs	.+38     	; 0x45c8 <__fp_cmp+0x46>
    45a2:	62 1b       	sub	r22, r18
    45a4:	73 0b       	sbc	r23, r19
    45a6:	84 0b       	sbc	r24, r20
    45a8:	95 0b       	sbc	r25, r21
    45aa:	39 f4       	brne	.+14     	; 0x45ba <__fp_cmp+0x38>
    45ac:	0a 26       	eor	r0, r26
    45ae:	61 f0       	breq	.+24     	; 0x45c8 <__fp_cmp+0x46>
    45b0:	23 2b       	or	r18, r19
    45b2:	24 2b       	or	r18, r20
    45b4:	25 2b       	or	r18, r21
    45b6:	21 f4       	brne	.+8      	; 0x45c0 <__fp_cmp+0x3e>
    45b8:	08 95       	ret
    45ba:	0a 26       	eor	r0, r26
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <__fp_cmp+0x3e>
    45be:	a1 40       	sbci	r26, 0x01	; 1
    45c0:	a6 95       	lsr	r26
    45c2:	8f ef       	ldi	r24, 0xFF	; 255
    45c4:	81 1d       	adc	r24, r1
    45c6:	81 1d       	adc	r24, r1
    45c8:	08 95       	ret

000045ca <__fp_inf>:
    45ca:	97 f9       	bld	r25, 7
    45cc:	9f 67       	ori	r25, 0x7F	; 127
    45ce:	80 e8       	ldi	r24, 0x80	; 128
    45d0:	70 e0       	ldi	r23, 0x00	; 0
    45d2:	60 e0       	ldi	r22, 0x00	; 0
    45d4:	08 95       	ret

000045d6 <__fp_nan>:
    45d6:	9f ef       	ldi	r25, 0xFF	; 255
    45d8:	80 ec       	ldi	r24, 0xC0	; 192
    45da:	08 95       	ret

000045dc <__fp_negdi>:
    45dc:	90 95       	com	r25
    45de:	80 95       	com	r24
    45e0:	70 95       	com	r23
    45e2:	60 95       	com	r22
    45e4:	50 95       	com	r21
    45e6:	40 95       	com	r20
    45e8:	30 95       	com	r19
    45ea:	21 95       	neg	r18
    45ec:	3f 4f       	sbci	r19, 0xFF	; 255
    45ee:	4f 4f       	sbci	r20, 0xFF	; 255
    45f0:	5f 4f       	sbci	r21, 0xFF	; 255
    45f2:	6f 4f       	sbci	r22, 0xFF	; 255
    45f4:	7f 4f       	sbci	r23, 0xFF	; 255
    45f6:	8f 4f       	sbci	r24, 0xFF	; 255
    45f8:	9f 4f       	sbci	r25, 0xFF	; 255
    45fa:	08 95       	ret

000045fc <__fp_pscA>:
    45fc:	00 24       	eor	r0, r0
    45fe:	0a 94       	dec	r0
    4600:	16 16       	cp	r1, r22
    4602:	17 06       	cpc	r1, r23
    4604:	18 06       	cpc	r1, r24
    4606:	09 06       	cpc	r0, r25
    4608:	08 95       	ret

0000460a <__fp_pscB>:
    460a:	00 24       	eor	r0, r0
    460c:	0a 94       	dec	r0
    460e:	12 16       	cp	r1, r18
    4610:	13 06       	cpc	r1, r19
    4612:	14 06       	cpc	r1, r20
    4614:	05 06       	cpc	r0, r21
    4616:	08 95       	ret

00004618 <__fp_round>:
    4618:	09 2e       	mov	r0, r25
    461a:	03 94       	inc	r0
    461c:	00 0c       	add	r0, r0
    461e:	11 f4       	brne	.+4      	; 0x4624 <__fp_round+0xc>
    4620:	88 23       	and	r24, r24
    4622:	52 f0       	brmi	.+20     	; 0x4638 <__fp_round+0x20>
    4624:	bb 0f       	add	r27, r27
    4626:	40 f4       	brcc	.+16     	; 0x4638 <__fp_round+0x20>
    4628:	bf 2b       	or	r27, r31
    462a:	11 f4       	brne	.+4      	; 0x4630 <__fp_round+0x18>
    462c:	60 ff       	sbrs	r22, 0
    462e:	04 c0       	rjmp	.+8      	; 0x4638 <__fp_round+0x20>
    4630:	6f 5f       	subi	r22, 0xFF	; 255
    4632:	7f 4f       	sbci	r23, 0xFF	; 255
    4634:	8f 4f       	sbci	r24, 0xFF	; 255
    4636:	9f 4f       	sbci	r25, 0xFF	; 255
    4638:	08 95       	ret

0000463a <__fp_split3>:
    463a:	57 fd       	sbrc	r21, 7
    463c:	90 58       	subi	r25, 0x80	; 128
    463e:	44 0f       	add	r20, r20
    4640:	55 1f       	adc	r21, r21
    4642:	59 f0       	breq	.+22     	; 0x465a <__fp_splitA+0x10>
    4644:	5f 3f       	cpi	r21, 0xFF	; 255
    4646:	71 f0       	breq	.+28     	; 0x4664 <__fp_splitA+0x1a>
    4648:	47 95       	ror	r20

0000464a <__fp_splitA>:
    464a:	88 0f       	add	r24, r24
    464c:	97 fb       	bst	r25, 7
    464e:	99 1f       	adc	r25, r25
    4650:	61 f0       	breq	.+24     	; 0x466a <__fp_splitA+0x20>
    4652:	9f 3f       	cpi	r25, 0xFF	; 255
    4654:	79 f0       	breq	.+30     	; 0x4674 <__fp_splitA+0x2a>
    4656:	87 95       	ror	r24
    4658:	08 95       	ret
    465a:	12 16       	cp	r1, r18
    465c:	13 06       	cpc	r1, r19
    465e:	14 06       	cpc	r1, r20
    4660:	55 1f       	adc	r21, r21
    4662:	f2 cf       	rjmp	.-28     	; 0x4648 <__fp_split3+0xe>
    4664:	46 95       	lsr	r20
    4666:	f1 df       	rcall	.-30     	; 0x464a <__fp_splitA>
    4668:	08 c0       	rjmp	.+16     	; 0x467a <__fp_splitA+0x30>
    466a:	16 16       	cp	r1, r22
    466c:	17 06       	cpc	r1, r23
    466e:	18 06       	cpc	r1, r24
    4670:	99 1f       	adc	r25, r25
    4672:	f1 cf       	rjmp	.-30     	; 0x4656 <__fp_splitA+0xc>
    4674:	86 95       	lsr	r24
    4676:	71 05       	cpc	r23, r1
    4678:	61 05       	cpc	r22, r1
    467a:	08 94       	sec
    467c:	08 95       	ret

0000467e <__fp_zero>:
    467e:	e8 94       	clt

00004680 <__fp_szero>:
    4680:	bb 27       	eor	r27, r27
    4682:	66 27       	eor	r22, r22
    4684:	77 27       	eor	r23, r23
    4686:	cb 01       	movw	r24, r22
    4688:	97 f9       	bld	r25, 7
    468a:	08 95       	ret

0000468c <__gesf2>:
    468c:	7a df       	rcall	.-268    	; 0x4582 <__fp_cmp>
    468e:	08 f4       	brcc	.+2      	; 0x4692 <__gesf2+0x6>
    4690:	8f ef       	ldi	r24, 0xFF	; 255
    4692:	08 95       	ret

00004694 <__mulsf3>:
    4694:	0b d0       	rcall	.+22     	; 0x46ac <__mulsf3x>
    4696:	c0 cf       	rjmp	.-128    	; 0x4618 <__fp_round>
    4698:	b1 df       	rcall	.-158    	; 0x45fc <__fp_pscA>
    469a:	28 f0       	brcs	.+10     	; 0x46a6 <__mulsf3+0x12>
    469c:	b6 df       	rcall	.-148    	; 0x460a <__fp_pscB>
    469e:	18 f0       	brcs	.+6      	; 0x46a6 <__mulsf3+0x12>
    46a0:	95 23       	and	r25, r21
    46a2:	09 f0       	breq	.+2      	; 0x46a6 <__mulsf3+0x12>
    46a4:	92 cf       	rjmp	.-220    	; 0x45ca <__fp_inf>
    46a6:	97 cf       	rjmp	.-210    	; 0x45d6 <__fp_nan>
    46a8:	11 24       	eor	r1, r1
    46aa:	ea cf       	rjmp	.-44     	; 0x4680 <__fp_szero>

000046ac <__mulsf3x>:
    46ac:	c6 df       	rcall	.-116    	; 0x463a <__fp_split3>
    46ae:	a0 f3       	brcs	.-24     	; 0x4698 <__mulsf3+0x4>

000046b0 <__mulsf3_pse>:
    46b0:	95 9f       	mul	r25, r21
    46b2:	d1 f3       	breq	.-12     	; 0x46a8 <__mulsf3+0x14>
    46b4:	95 0f       	add	r25, r21
    46b6:	50 e0       	ldi	r21, 0x00	; 0
    46b8:	55 1f       	adc	r21, r21
    46ba:	62 9f       	mul	r22, r18
    46bc:	f0 01       	movw	r30, r0
    46be:	72 9f       	mul	r23, r18
    46c0:	bb 27       	eor	r27, r27
    46c2:	f0 0d       	add	r31, r0
    46c4:	b1 1d       	adc	r27, r1
    46c6:	63 9f       	mul	r22, r19
    46c8:	aa 27       	eor	r26, r26
    46ca:	f0 0d       	add	r31, r0
    46cc:	b1 1d       	adc	r27, r1
    46ce:	aa 1f       	adc	r26, r26
    46d0:	64 9f       	mul	r22, r20
    46d2:	66 27       	eor	r22, r22
    46d4:	b0 0d       	add	r27, r0
    46d6:	a1 1d       	adc	r26, r1
    46d8:	66 1f       	adc	r22, r22
    46da:	82 9f       	mul	r24, r18
    46dc:	22 27       	eor	r18, r18
    46de:	b0 0d       	add	r27, r0
    46e0:	a1 1d       	adc	r26, r1
    46e2:	62 1f       	adc	r22, r18
    46e4:	73 9f       	mul	r23, r19
    46e6:	b0 0d       	add	r27, r0
    46e8:	a1 1d       	adc	r26, r1
    46ea:	62 1f       	adc	r22, r18
    46ec:	83 9f       	mul	r24, r19
    46ee:	a0 0d       	add	r26, r0
    46f0:	61 1d       	adc	r22, r1
    46f2:	22 1f       	adc	r18, r18
    46f4:	74 9f       	mul	r23, r20
    46f6:	33 27       	eor	r19, r19
    46f8:	a0 0d       	add	r26, r0
    46fa:	61 1d       	adc	r22, r1
    46fc:	23 1f       	adc	r18, r19
    46fe:	84 9f       	mul	r24, r20
    4700:	60 0d       	add	r22, r0
    4702:	21 1d       	adc	r18, r1
    4704:	82 2f       	mov	r24, r18
    4706:	76 2f       	mov	r23, r22
    4708:	6a 2f       	mov	r22, r26
    470a:	11 24       	eor	r1, r1
    470c:	9f 57       	subi	r25, 0x7F	; 127
    470e:	50 40       	sbci	r21, 0x00	; 0
    4710:	8a f0       	brmi	.+34     	; 0x4734 <__mulsf3_pse+0x84>
    4712:	e1 f0       	breq	.+56     	; 0x474c <__mulsf3_pse+0x9c>
    4714:	88 23       	and	r24, r24
    4716:	4a f0       	brmi	.+18     	; 0x472a <__mulsf3_pse+0x7a>
    4718:	ee 0f       	add	r30, r30
    471a:	ff 1f       	adc	r31, r31
    471c:	bb 1f       	adc	r27, r27
    471e:	66 1f       	adc	r22, r22
    4720:	77 1f       	adc	r23, r23
    4722:	88 1f       	adc	r24, r24
    4724:	91 50       	subi	r25, 0x01	; 1
    4726:	50 40       	sbci	r21, 0x00	; 0
    4728:	a9 f7       	brne	.-22     	; 0x4714 <__mulsf3_pse+0x64>
    472a:	9e 3f       	cpi	r25, 0xFE	; 254
    472c:	51 05       	cpc	r21, r1
    472e:	70 f0       	brcs	.+28     	; 0x474c <__mulsf3_pse+0x9c>
    4730:	4c cf       	rjmp	.-360    	; 0x45ca <__fp_inf>
    4732:	a6 cf       	rjmp	.-180    	; 0x4680 <__fp_szero>
    4734:	5f 3f       	cpi	r21, 0xFF	; 255
    4736:	ec f3       	brlt	.-6      	; 0x4732 <__mulsf3_pse+0x82>
    4738:	98 3e       	cpi	r25, 0xE8	; 232
    473a:	dc f3       	brlt	.-10     	; 0x4732 <__mulsf3_pse+0x82>
    473c:	86 95       	lsr	r24
    473e:	77 95       	ror	r23
    4740:	67 95       	ror	r22
    4742:	b7 95       	ror	r27
    4744:	f7 95       	ror	r31
    4746:	e7 95       	ror	r30
    4748:	9f 5f       	subi	r25, 0xFF	; 255
    474a:	c1 f7       	brne	.-16     	; 0x473c <__mulsf3_pse+0x8c>
    474c:	fe 2b       	or	r31, r30
    474e:	88 0f       	add	r24, r24
    4750:	91 1d       	adc	r25, r1
    4752:	96 95       	lsr	r25
    4754:	87 95       	ror	r24
    4756:	97 f9       	bld	r25, 7
    4758:	08 95       	ret

0000475a <__udivmodhi4>:
    475a:	aa 1b       	sub	r26, r26
    475c:	bb 1b       	sub	r27, r27
    475e:	51 e1       	ldi	r21, 0x11	; 17
    4760:	07 c0       	rjmp	.+14     	; 0x4770 <__udivmodhi4_ep>

00004762 <__udivmodhi4_loop>:
    4762:	aa 1f       	adc	r26, r26
    4764:	bb 1f       	adc	r27, r27
    4766:	a6 17       	cp	r26, r22
    4768:	b7 07       	cpc	r27, r23
    476a:	10 f0       	brcs	.+4      	; 0x4770 <__udivmodhi4_ep>
    476c:	a6 1b       	sub	r26, r22
    476e:	b7 0b       	sbc	r27, r23

00004770 <__udivmodhi4_ep>:
    4770:	88 1f       	adc	r24, r24
    4772:	99 1f       	adc	r25, r25
    4774:	5a 95       	dec	r21
    4776:	a9 f7       	brne	.-22     	; 0x4762 <__udivmodhi4_loop>
    4778:	80 95       	com	r24
    477a:	90 95       	com	r25
    477c:	bc 01       	movw	r22, r24
    477e:	cd 01       	movw	r24, r26
    4780:	08 95       	ret

00004782 <__divmodhi4>:
    4782:	97 fb       	bst	r25, 7
    4784:	07 2e       	mov	r0, r23
    4786:	16 f4       	brtc	.+4      	; 0x478c <__divmodhi4+0xa>
    4788:	00 94       	com	r0
    478a:	06 d0       	rcall	.+12     	; 0x4798 <__divmodhi4_neg1>
    478c:	77 fd       	sbrc	r23, 7
    478e:	08 d0       	rcall	.+16     	; 0x47a0 <__divmodhi4_neg2>
    4790:	e4 df       	rcall	.-56     	; 0x475a <__udivmodhi4>
    4792:	07 fc       	sbrc	r0, 7
    4794:	05 d0       	rcall	.+10     	; 0x47a0 <__divmodhi4_neg2>
    4796:	3e f4       	brtc	.+14     	; 0x47a6 <__divmodhi4_exit>

00004798 <__divmodhi4_neg1>:
    4798:	90 95       	com	r25
    479a:	81 95       	neg	r24
    479c:	9f 4f       	sbci	r25, 0xFF	; 255
    479e:	08 95       	ret

000047a0 <__divmodhi4_neg2>:
    47a0:	70 95       	com	r23
    47a2:	61 95       	neg	r22
    47a4:	7f 4f       	sbci	r23, 0xFF	; 255

000047a6 <__divmodhi4_exit>:
    47a6:	08 95       	ret

000047a8 <__udivmodsi4>:
    47a8:	a1 e2       	ldi	r26, 0x21	; 33
    47aa:	1a 2e       	mov	r1, r26
    47ac:	aa 1b       	sub	r26, r26
    47ae:	bb 1b       	sub	r27, r27
    47b0:	fd 01       	movw	r30, r26
    47b2:	0d c0       	rjmp	.+26     	; 0x47ce <__udivmodsi4_ep>

000047b4 <__udivmodsi4_loop>:
    47b4:	aa 1f       	adc	r26, r26
    47b6:	bb 1f       	adc	r27, r27
    47b8:	ee 1f       	adc	r30, r30
    47ba:	ff 1f       	adc	r31, r31
    47bc:	a2 17       	cp	r26, r18
    47be:	b3 07       	cpc	r27, r19
    47c0:	e4 07       	cpc	r30, r20
    47c2:	f5 07       	cpc	r31, r21
    47c4:	20 f0       	brcs	.+8      	; 0x47ce <__udivmodsi4_ep>
    47c6:	a2 1b       	sub	r26, r18
    47c8:	b3 0b       	sbc	r27, r19
    47ca:	e4 0b       	sbc	r30, r20
    47cc:	f5 0b       	sbc	r31, r21

000047ce <__udivmodsi4_ep>:
    47ce:	66 1f       	adc	r22, r22
    47d0:	77 1f       	adc	r23, r23
    47d2:	88 1f       	adc	r24, r24
    47d4:	99 1f       	adc	r25, r25
    47d6:	1a 94       	dec	r1
    47d8:	69 f7       	brne	.-38     	; 0x47b4 <__udivmodsi4_loop>
    47da:	60 95       	com	r22
    47dc:	70 95       	com	r23
    47de:	80 95       	com	r24
    47e0:	90 95       	com	r25
    47e2:	9b 01       	movw	r18, r22
    47e4:	ac 01       	movw	r20, r24
    47e6:	bd 01       	movw	r22, r26
    47e8:	cf 01       	movw	r24, r30
    47ea:	08 95       	ret

000047ec <__divmodsi4>:
    47ec:	05 2e       	mov	r0, r21
    47ee:	97 fb       	bst	r25, 7
    47f0:	16 f4       	brtc	.+4      	; 0x47f6 <__divmodsi4+0xa>
    47f2:	00 94       	com	r0
    47f4:	0f d0       	rcall	.+30     	; 0x4814 <__negsi2>
    47f6:	57 fd       	sbrc	r21, 7
    47f8:	05 d0       	rcall	.+10     	; 0x4804 <__divmodsi4_neg2>
    47fa:	d6 df       	rcall	.-84     	; 0x47a8 <__udivmodsi4>
    47fc:	07 fc       	sbrc	r0, 7
    47fe:	02 d0       	rcall	.+4      	; 0x4804 <__divmodsi4_neg2>
    4800:	46 f4       	brtc	.+16     	; 0x4812 <__divmodsi4_exit>
    4802:	08 c0       	rjmp	.+16     	; 0x4814 <__negsi2>

00004804 <__divmodsi4_neg2>:
    4804:	50 95       	com	r21
    4806:	40 95       	com	r20
    4808:	30 95       	com	r19
    480a:	21 95       	neg	r18
    480c:	3f 4f       	sbci	r19, 0xFF	; 255
    480e:	4f 4f       	sbci	r20, 0xFF	; 255
    4810:	5f 4f       	sbci	r21, 0xFF	; 255

00004812 <__divmodsi4_exit>:
    4812:	08 95       	ret

00004814 <__negsi2>:
    4814:	90 95       	com	r25
    4816:	80 95       	com	r24
    4818:	70 95       	com	r23
    481a:	61 95       	neg	r22
    481c:	7f 4f       	sbci	r23, 0xFF	; 255
    481e:	8f 4f       	sbci	r24, 0xFF	; 255
    4820:	9f 4f       	sbci	r25, 0xFF	; 255
    4822:	08 95       	ret

00004824 <__tablejump2__>:
    4824:	ee 0f       	add	r30, r30
    4826:	ff 1f       	adc	r31, r31

00004828 <__tablejump__>:
    4828:	05 90       	lpm	r0, Z+
    482a:	f4 91       	lpm	r31, Z
    482c:	e0 2d       	mov	r30, r0
    482e:	09 94       	ijmp

00004830 <__umulhisi3>:
    4830:	a2 9f       	mul	r26, r18
    4832:	b0 01       	movw	r22, r0
    4834:	b3 9f       	mul	r27, r19
    4836:	c0 01       	movw	r24, r0
    4838:	a3 9f       	mul	r26, r19
    483a:	70 0d       	add	r23, r0
    483c:	81 1d       	adc	r24, r1
    483e:	11 24       	eor	r1, r1
    4840:	91 1d       	adc	r25, r1
    4842:	b2 9f       	mul	r27, r18
    4844:	70 0d       	add	r23, r0
    4846:	81 1d       	adc	r24, r1
    4848:	11 24       	eor	r1, r1
    484a:	91 1d       	adc	r25, r1
    484c:	08 95       	ret

0000484e <__muldi3>:
    484e:	df 93       	push	r29
    4850:	cf 93       	push	r28
    4852:	1f 93       	push	r17
    4854:	0f 93       	push	r16
    4856:	9a 9d       	mul	r25, r10
    4858:	f0 2d       	mov	r31, r0
    485a:	21 9f       	mul	r18, r17
    485c:	f0 0d       	add	r31, r0
    485e:	8b 9d       	mul	r24, r11
    4860:	f0 0d       	add	r31, r0
    4862:	8a 9d       	mul	r24, r10
    4864:	e0 2d       	mov	r30, r0
    4866:	f1 0d       	add	r31, r1
    4868:	03 9f       	mul	r16, r19
    486a:	f0 0d       	add	r31, r0
    486c:	02 9f       	mul	r16, r18
    486e:	e0 0d       	add	r30, r0
    4870:	f1 1d       	adc	r31, r1
    4872:	4e 9d       	mul	r20, r14
    4874:	e0 0d       	add	r30, r0
    4876:	f1 1d       	adc	r31, r1
    4878:	5e 9d       	mul	r21, r14
    487a:	f0 0d       	add	r31, r0
    487c:	4f 9d       	mul	r20, r15
    487e:	f0 0d       	add	r31, r0
    4880:	7f 93       	push	r23
    4882:	6f 93       	push	r22
    4884:	bf 92       	push	r11
    4886:	af 92       	push	r10
    4888:	5f 93       	push	r21
    488a:	4f 93       	push	r20
    488c:	d5 01       	movw	r26, r10
    488e:	d0 df       	rcall	.-96     	; 0x4830 <__umulhisi3>
    4890:	8b 01       	movw	r16, r22
    4892:	ac 01       	movw	r20, r24
    4894:	d7 01       	movw	r26, r14
    4896:	cc df       	rcall	.-104    	; 0x4830 <__umulhisi3>
    4898:	eb 01       	movw	r28, r22
    489a:	e8 0f       	add	r30, r24
    489c:	f9 1f       	adc	r31, r25
    489e:	d6 01       	movw	r26, r12
    48a0:	1f d0       	rcall	.+62     	; 0x48e0 <__muldi3_6>
    48a2:	2f 91       	pop	r18
    48a4:	3f 91       	pop	r19
    48a6:	d6 01       	movw	r26, r12
    48a8:	c3 df       	rcall	.-122    	; 0x4830 <__umulhisi3>
    48aa:	c6 0f       	add	r28, r22
    48ac:	d7 1f       	adc	r29, r23
    48ae:	e8 1f       	adc	r30, r24
    48b0:	f9 1f       	adc	r31, r25
    48b2:	af 91       	pop	r26
    48b4:	bf 91       	pop	r27
    48b6:	14 d0       	rcall	.+40     	; 0x48e0 <__muldi3_6>
    48b8:	2f 91       	pop	r18
    48ba:	3f 91       	pop	r19
    48bc:	b9 df       	rcall	.-142    	; 0x4830 <__umulhisi3>
    48be:	c6 0f       	add	r28, r22
    48c0:	d7 1f       	adc	r29, r23
    48c2:	e8 1f       	adc	r30, r24
    48c4:	f9 1f       	adc	r31, r25
    48c6:	d6 01       	movw	r26, r12
    48c8:	b3 df       	rcall	.-154    	; 0x4830 <__umulhisi3>
    48ca:	e6 0f       	add	r30, r22
    48cc:	f7 1f       	adc	r31, r23
    48ce:	98 01       	movw	r18, r16
    48d0:	be 01       	movw	r22, r28
    48d2:	cf 01       	movw	r24, r30
    48d4:	11 24       	eor	r1, r1
    48d6:	0f 91       	pop	r16
    48d8:	1f 91       	pop	r17
    48da:	cf 91       	pop	r28
    48dc:	df 91       	pop	r29
    48de:	08 95       	ret

000048e0 <__muldi3_6>:
    48e0:	a7 df       	rcall	.-178    	; 0x4830 <__umulhisi3>
    48e2:	46 0f       	add	r20, r22
    48e4:	57 1f       	adc	r21, r23
    48e6:	c8 1f       	adc	r28, r24
    48e8:	d9 1f       	adc	r29, r25
    48ea:	08 f4       	brcc	.+2      	; 0x48ee <__muldi3_6+0xe>
    48ec:	31 96       	adiw	r30, 0x01	; 1
    48ee:	08 95       	ret

000048f0 <memcpy>:
    48f0:	fb 01       	movw	r30, r22
    48f2:	dc 01       	movw	r26, r24
    48f4:	02 c0       	rjmp	.+4      	; 0x48fa <memcpy+0xa>
    48f6:	01 90       	ld	r0, Z+
    48f8:	0d 92       	st	X+, r0
    48fa:	41 50       	subi	r20, 0x01	; 1
    48fc:	50 40       	sbci	r21, 0x00	; 0
    48fe:	d8 f7       	brcc	.-10     	; 0x48f6 <memcpy+0x6>
    4900:	08 95       	ret

00004902 <printf>:
    4902:	a0 e0       	ldi	r26, 0x00	; 0
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	e6 e8       	ldi	r30, 0x86	; 134
    4908:	f4 e2       	ldi	r31, 0x24	; 36
    490a:	b2 c2       	rjmp	.+1380   	; 0x4e70 <__prologue_saves__+0x20>
    490c:	fe 01       	movw	r30, r28
    490e:	35 96       	adiw	r30, 0x05	; 5
    4910:	61 91       	ld	r22, Z+
    4912:	71 91       	ld	r23, Z+
    4914:	af 01       	movw	r20, r30
    4916:	80 91 3b 2e 	lds	r24, 0x2E3B
    491a:	90 91 3c 2e 	lds	r25, 0x2E3C
    491e:	2f d0       	rcall	.+94     	; 0x497e <vfprintf>
    4920:	e2 e0       	ldi	r30, 0x02	; 2
    4922:	bf c2       	rjmp	.+1406   	; 0x4ea2 <__epilogue_restores__+0x20>

00004924 <puts>:
    4924:	0f 93       	push	r16
    4926:	1f 93       	push	r17
    4928:	cf 93       	push	r28
    492a:	df 93       	push	r29
    492c:	e0 91 3b 2e 	lds	r30, 0x2E3B
    4930:	f0 91 3c 2e 	lds	r31, 0x2E3C
    4934:	23 81       	ldd	r18, Z+3	; 0x03
    4936:	21 ff       	sbrs	r18, 1
    4938:	1b c0       	rjmp	.+54     	; 0x4970 <puts+0x4c>
    493a:	ec 01       	movw	r28, r24
    493c:	00 e0       	ldi	r16, 0x00	; 0
    493e:	10 e0       	ldi	r17, 0x00	; 0
    4940:	89 91       	ld	r24, Y+
    4942:	60 91 3b 2e 	lds	r22, 0x2E3B
    4946:	70 91 3c 2e 	lds	r23, 0x2E3C
    494a:	db 01       	movw	r26, r22
    494c:	18 96       	adiw	r26, 0x08	; 8
    494e:	ed 91       	ld	r30, X+
    4950:	fc 91       	ld	r31, X
    4952:	19 97       	sbiw	r26, 0x09	; 9
    4954:	88 23       	and	r24, r24
    4956:	31 f0       	breq	.+12     	; 0x4964 <puts+0x40>
    4958:	09 95       	icall
    495a:	89 2b       	or	r24, r25
    495c:	89 f3       	breq	.-30     	; 0x4940 <puts+0x1c>
    495e:	0f ef       	ldi	r16, 0xFF	; 255
    4960:	1f ef       	ldi	r17, 0xFF	; 255
    4962:	ee cf       	rjmp	.-36     	; 0x4940 <puts+0x1c>
    4964:	8a e0       	ldi	r24, 0x0A	; 10
    4966:	09 95       	icall
    4968:	89 2b       	or	r24, r25
    496a:	11 f4       	brne	.+4      	; 0x4970 <puts+0x4c>
    496c:	c8 01       	movw	r24, r16
    496e:	02 c0       	rjmp	.+4      	; 0x4974 <puts+0x50>
    4970:	8f ef       	ldi	r24, 0xFF	; 255
    4972:	9f ef       	ldi	r25, 0xFF	; 255
    4974:	df 91       	pop	r29
    4976:	cf 91       	pop	r28
    4978:	1f 91       	pop	r17
    497a:	0f 91       	pop	r16
    497c:	08 95       	ret

0000497e <vfprintf>:
    497e:	ac e0       	ldi	r26, 0x0C	; 12
    4980:	b0 e0       	ldi	r27, 0x00	; 0
    4982:	e4 ec       	ldi	r30, 0xC4	; 196
    4984:	f4 e2       	ldi	r31, 0x24	; 36
    4986:	64 c2       	rjmp	.+1224   	; 0x4e50 <__prologue_saves__>
    4988:	7c 01       	movw	r14, r24
    498a:	6b 01       	movw	r12, r22
    498c:	8a 01       	movw	r16, r20
    498e:	fc 01       	movw	r30, r24
    4990:	16 82       	std	Z+6, r1	; 0x06
    4992:	17 82       	std	Z+7, r1	; 0x07
    4994:	83 81       	ldd	r24, Z+3	; 0x03
    4996:	81 ff       	sbrs	r24, 1
    4998:	b0 c1       	rjmp	.+864    	; 0x4cfa <vfprintf+0x37c>
    499a:	ce 01       	movw	r24, r28
    499c:	01 96       	adiw	r24, 0x01	; 1
    499e:	4c 01       	movw	r8, r24
    49a0:	f7 01       	movw	r30, r14
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	f6 01       	movw	r30, r12
    49a6:	93 fd       	sbrc	r25, 3
    49a8:	85 91       	lpm	r24, Z+
    49aa:	93 ff       	sbrs	r25, 3
    49ac:	81 91       	ld	r24, Z+
    49ae:	6f 01       	movw	r12, r30
    49b0:	88 23       	and	r24, r24
    49b2:	09 f4       	brne	.+2      	; 0x49b6 <vfprintf+0x38>
    49b4:	9e c1       	rjmp	.+828    	; 0x4cf2 <vfprintf+0x374>
    49b6:	85 32       	cpi	r24, 0x25	; 37
    49b8:	39 f4       	brne	.+14     	; 0x49c8 <vfprintf+0x4a>
    49ba:	93 fd       	sbrc	r25, 3
    49bc:	85 91       	lpm	r24, Z+
    49be:	93 ff       	sbrs	r25, 3
    49c0:	81 91       	ld	r24, Z+
    49c2:	6f 01       	movw	r12, r30
    49c4:	85 32       	cpi	r24, 0x25	; 37
    49c6:	21 f4       	brne	.+8      	; 0x49d0 <vfprintf+0x52>
    49c8:	b7 01       	movw	r22, r14
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	b1 d1       	rcall	.+866    	; 0x4d30 <fputc>
    49ce:	e8 cf       	rjmp	.-48     	; 0x49a0 <vfprintf+0x22>
    49d0:	51 2c       	mov	r5, r1
    49d2:	31 2c       	mov	r3, r1
    49d4:	20 e0       	ldi	r18, 0x00	; 0
    49d6:	20 32       	cpi	r18, 0x20	; 32
    49d8:	a0 f4       	brcc	.+40     	; 0x4a02 <vfprintf+0x84>
    49da:	8b 32       	cpi	r24, 0x2B	; 43
    49dc:	69 f0       	breq	.+26     	; 0x49f8 <vfprintf+0x7a>
    49de:	30 f4       	brcc	.+12     	; 0x49ec <vfprintf+0x6e>
    49e0:	80 32       	cpi	r24, 0x20	; 32
    49e2:	59 f0       	breq	.+22     	; 0x49fa <vfprintf+0x7c>
    49e4:	83 32       	cpi	r24, 0x23	; 35
    49e6:	69 f4       	brne	.+26     	; 0x4a02 <vfprintf+0x84>
    49e8:	20 61       	ori	r18, 0x10	; 16
    49ea:	2c c0       	rjmp	.+88     	; 0x4a44 <vfprintf+0xc6>
    49ec:	8d 32       	cpi	r24, 0x2D	; 45
    49ee:	39 f0       	breq	.+14     	; 0x49fe <vfprintf+0x80>
    49f0:	80 33       	cpi	r24, 0x30	; 48
    49f2:	39 f4       	brne	.+14     	; 0x4a02 <vfprintf+0x84>
    49f4:	21 60       	ori	r18, 0x01	; 1
    49f6:	26 c0       	rjmp	.+76     	; 0x4a44 <vfprintf+0xc6>
    49f8:	22 60       	ori	r18, 0x02	; 2
    49fa:	24 60       	ori	r18, 0x04	; 4
    49fc:	23 c0       	rjmp	.+70     	; 0x4a44 <vfprintf+0xc6>
    49fe:	28 60       	ori	r18, 0x08	; 8
    4a00:	21 c0       	rjmp	.+66     	; 0x4a44 <vfprintf+0xc6>
    4a02:	27 fd       	sbrc	r18, 7
    4a04:	27 c0       	rjmp	.+78     	; 0x4a54 <vfprintf+0xd6>
    4a06:	30 ed       	ldi	r19, 0xD0	; 208
    4a08:	38 0f       	add	r19, r24
    4a0a:	3a 30       	cpi	r19, 0x0A	; 10
    4a0c:	78 f4       	brcc	.+30     	; 0x4a2c <vfprintf+0xae>
    4a0e:	26 ff       	sbrs	r18, 6
    4a10:	06 c0       	rjmp	.+12     	; 0x4a1e <vfprintf+0xa0>
    4a12:	fa e0       	ldi	r31, 0x0A	; 10
    4a14:	5f 9e       	mul	r5, r31
    4a16:	30 0d       	add	r19, r0
    4a18:	11 24       	eor	r1, r1
    4a1a:	53 2e       	mov	r5, r19
    4a1c:	13 c0       	rjmp	.+38     	; 0x4a44 <vfprintf+0xc6>
    4a1e:	8a e0       	ldi	r24, 0x0A	; 10
    4a20:	38 9e       	mul	r3, r24
    4a22:	30 0d       	add	r19, r0
    4a24:	11 24       	eor	r1, r1
    4a26:	33 2e       	mov	r3, r19
    4a28:	20 62       	ori	r18, 0x20	; 32
    4a2a:	0c c0       	rjmp	.+24     	; 0x4a44 <vfprintf+0xc6>
    4a2c:	8e 32       	cpi	r24, 0x2E	; 46
    4a2e:	21 f4       	brne	.+8      	; 0x4a38 <vfprintf+0xba>
    4a30:	26 fd       	sbrc	r18, 6
    4a32:	5f c1       	rjmp	.+702    	; 0x4cf2 <vfprintf+0x374>
    4a34:	20 64       	ori	r18, 0x40	; 64
    4a36:	06 c0       	rjmp	.+12     	; 0x4a44 <vfprintf+0xc6>
    4a38:	8c 36       	cpi	r24, 0x6C	; 108
    4a3a:	11 f4       	brne	.+4      	; 0x4a40 <vfprintf+0xc2>
    4a3c:	20 68       	ori	r18, 0x80	; 128
    4a3e:	02 c0       	rjmp	.+4      	; 0x4a44 <vfprintf+0xc6>
    4a40:	88 36       	cpi	r24, 0x68	; 104
    4a42:	41 f4       	brne	.+16     	; 0x4a54 <vfprintf+0xd6>
    4a44:	f6 01       	movw	r30, r12
    4a46:	93 fd       	sbrc	r25, 3
    4a48:	85 91       	lpm	r24, Z+
    4a4a:	93 ff       	sbrs	r25, 3
    4a4c:	81 91       	ld	r24, Z+
    4a4e:	6f 01       	movw	r12, r30
    4a50:	81 11       	cpse	r24, r1
    4a52:	c1 cf       	rjmp	.-126    	; 0x49d6 <vfprintf+0x58>
    4a54:	98 2f       	mov	r25, r24
    4a56:	9f 7d       	andi	r25, 0xDF	; 223
    4a58:	95 54       	subi	r25, 0x45	; 69
    4a5a:	93 30       	cpi	r25, 0x03	; 3
    4a5c:	28 f4       	brcc	.+10     	; 0x4a68 <vfprintf+0xea>
    4a5e:	0c 5f       	subi	r16, 0xFC	; 252
    4a60:	1f 4f       	sbci	r17, 0xFF	; 255
    4a62:	ff e3       	ldi	r31, 0x3F	; 63
    4a64:	f9 83       	std	Y+1, r31	; 0x01
    4a66:	0d c0       	rjmp	.+26     	; 0x4a82 <vfprintf+0x104>
    4a68:	83 36       	cpi	r24, 0x63	; 99
    4a6a:	31 f0       	breq	.+12     	; 0x4a78 <vfprintf+0xfa>
    4a6c:	83 37       	cpi	r24, 0x73	; 115
    4a6e:	71 f0       	breq	.+28     	; 0x4a8c <vfprintf+0x10e>
    4a70:	83 35       	cpi	r24, 0x53	; 83
    4a72:	09 f0       	breq	.+2      	; 0x4a76 <vfprintf+0xf8>
    4a74:	57 c0       	rjmp	.+174    	; 0x4b24 <vfprintf+0x1a6>
    4a76:	21 c0       	rjmp	.+66     	; 0x4aba <vfprintf+0x13c>
    4a78:	f8 01       	movw	r30, r16
    4a7a:	80 81       	ld	r24, Z
    4a7c:	89 83       	std	Y+1, r24	; 0x01
    4a7e:	0e 5f       	subi	r16, 0xFE	; 254
    4a80:	1f 4f       	sbci	r17, 0xFF	; 255
    4a82:	44 24       	eor	r4, r4
    4a84:	43 94       	inc	r4
    4a86:	51 2c       	mov	r5, r1
    4a88:	54 01       	movw	r10, r8
    4a8a:	14 c0       	rjmp	.+40     	; 0x4ab4 <vfprintf+0x136>
    4a8c:	38 01       	movw	r6, r16
    4a8e:	f2 e0       	ldi	r31, 0x02	; 2
    4a90:	6f 0e       	add	r6, r31
    4a92:	71 1c       	adc	r7, r1
    4a94:	f8 01       	movw	r30, r16
    4a96:	a0 80       	ld	r10, Z
    4a98:	b1 80       	ldd	r11, Z+1	; 0x01
    4a9a:	26 ff       	sbrs	r18, 6
    4a9c:	03 c0       	rjmp	.+6      	; 0x4aa4 <vfprintf+0x126>
    4a9e:	65 2d       	mov	r22, r5
    4aa0:	70 e0       	ldi	r23, 0x00	; 0
    4aa2:	02 c0       	rjmp	.+4      	; 0x4aa8 <vfprintf+0x12a>
    4aa4:	6f ef       	ldi	r22, 0xFF	; 255
    4aa6:	7f ef       	ldi	r23, 0xFF	; 255
    4aa8:	c5 01       	movw	r24, r10
    4aaa:	2c 87       	std	Y+12, r18	; 0x0c
    4aac:	36 d1       	rcall	.+620    	; 0x4d1a <strnlen>
    4aae:	2c 01       	movw	r4, r24
    4ab0:	83 01       	movw	r16, r6
    4ab2:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ab4:	2f 77       	andi	r18, 0x7F	; 127
    4ab6:	22 2e       	mov	r2, r18
    4ab8:	16 c0       	rjmp	.+44     	; 0x4ae6 <vfprintf+0x168>
    4aba:	38 01       	movw	r6, r16
    4abc:	f2 e0       	ldi	r31, 0x02	; 2
    4abe:	6f 0e       	add	r6, r31
    4ac0:	71 1c       	adc	r7, r1
    4ac2:	f8 01       	movw	r30, r16
    4ac4:	a0 80       	ld	r10, Z
    4ac6:	b1 80       	ldd	r11, Z+1	; 0x01
    4ac8:	26 ff       	sbrs	r18, 6
    4aca:	03 c0       	rjmp	.+6      	; 0x4ad2 <vfprintf+0x154>
    4acc:	65 2d       	mov	r22, r5
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	02 c0       	rjmp	.+4      	; 0x4ad6 <vfprintf+0x158>
    4ad2:	6f ef       	ldi	r22, 0xFF	; 255
    4ad4:	7f ef       	ldi	r23, 0xFF	; 255
    4ad6:	c5 01       	movw	r24, r10
    4ad8:	2c 87       	std	Y+12, r18	; 0x0c
    4ada:	14 d1       	rcall	.+552    	; 0x4d04 <strnlen_P>
    4adc:	2c 01       	movw	r4, r24
    4ade:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ae0:	20 68       	ori	r18, 0x80	; 128
    4ae2:	22 2e       	mov	r2, r18
    4ae4:	83 01       	movw	r16, r6
    4ae6:	23 fc       	sbrc	r2, 3
    4ae8:	19 c0       	rjmp	.+50     	; 0x4b1c <vfprintf+0x19e>
    4aea:	83 2d       	mov	r24, r3
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	48 16       	cp	r4, r24
    4af0:	59 06       	cpc	r5, r25
    4af2:	a0 f4       	brcc	.+40     	; 0x4b1c <vfprintf+0x19e>
    4af4:	b7 01       	movw	r22, r14
    4af6:	80 e2       	ldi	r24, 0x20	; 32
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	1a d1       	rcall	.+564    	; 0x4d30 <fputc>
    4afc:	3a 94       	dec	r3
    4afe:	f5 cf       	rjmp	.-22     	; 0x4aea <vfprintf+0x16c>
    4b00:	f5 01       	movw	r30, r10
    4b02:	27 fc       	sbrc	r2, 7
    4b04:	85 91       	lpm	r24, Z+
    4b06:	27 fe       	sbrs	r2, 7
    4b08:	81 91       	ld	r24, Z+
    4b0a:	5f 01       	movw	r10, r30
    4b0c:	b7 01       	movw	r22, r14
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	0f d1       	rcall	.+542    	; 0x4d30 <fputc>
    4b12:	31 10       	cpse	r3, r1
    4b14:	3a 94       	dec	r3
    4b16:	f1 e0       	ldi	r31, 0x01	; 1
    4b18:	4f 1a       	sub	r4, r31
    4b1a:	51 08       	sbc	r5, r1
    4b1c:	41 14       	cp	r4, r1
    4b1e:	51 04       	cpc	r5, r1
    4b20:	79 f7       	brne	.-34     	; 0x4b00 <vfprintf+0x182>
    4b22:	de c0       	rjmp	.+444    	; 0x4ce0 <vfprintf+0x362>
    4b24:	84 36       	cpi	r24, 0x64	; 100
    4b26:	11 f0       	breq	.+4      	; 0x4b2c <vfprintf+0x1ae>
    4b28:	89 36       	cpi	r24, 0x69	; 105
    4b2a:	31 f5       	brne	.+76     	; 0x4b78 <vfprintf+0x1fa>
    4b2c:	f8 01       	movw	r30, r16
    4b2e:	27 ff       	sbrs	r18, 7
    4b30:	07 c0       	rjmp	.+14     	; 0x4b40 <vfprintf+0x1c2>
    4b32:	60 81       	ld	r22, Z
    4b34:	71 81       	ldd	r23, Z+1	; 0x01
    4b36:	82 81       	ldd	r24, Z+2	; 0x02
    4b38:	93 81       	ldd	r25, Z+3	; 0x03
    4b3a:	0c 5f       	subi	r16, 0xFC	; 252
    4b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b3e:	08 c0       	rjmp	.+16     	; 0x4b50 <vfprintf+0x1d2>
    4b40:	60 81       	ld	r22, Z
    4b42:	71 81       	ldd	r23, Z+1	; 0x01
    4b44:	88 27       	eor	r24, r24
    4b46:	77 fd       	sbrc	r23, 7
    4b48:	80 95       	com	r24
    4b4a:	98 2f       	mov	r25, r24
    4b4c:	0e 5f       	subi	r16, 0xFE	; 254
    4b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b50:	2f 76       	andi	r18, 0x6F	; 111
    4b52:	b2 2e       	mov	r11, r18
    4b54:	97 ff       	sbrs	r25, 7
    4b56:	09 c0       	rjmp	.+18     	; 0x4b6a <vfprintf+0x1ec>
    4b58:	90 95       	com	r25
    4b5a:	80 95       	com	r24
    4b5c:	70 95       	com	r23
    4b5e:	61 95       	neg	r22
    4b60:	7f 4f       	sbci	r23, 0xFF	; 255
    4b62:	8f 4f       	sbci	r24, 0xFF	; 255
    4b64:	9f 4f       	sbci	r25, 0xFF	; 255
    4b66:	20 68       	ori	r18, 0x80	; 128
    4b68:	b2 2e       	mov	r11, r18
    4b6a:	2a e0       	ldi	r18, 0x0A	; 10
    4b6c:	30 e0       	ldi	r19, 0x00	; 0
    4b6e:	a4 01       	movw	r20, r8
    4b70:	11 d1       	rcall	.+546    	; 0x4d94 <__ultoa_invert>
    4b72:	a8 2e       	mov	r10, r24
    4b74:	a8 18       	sub	r10, r8
    4b76:	43 c0       	rjmp	.+134    	; 0x4bfe <vfprintf+0x280>
    4b78:	85 37       	cpi	r24, 0x75	; 117
    4b7a:	29 f4       	brne	.+10     	; 0x4b86 <vfprintf+0x208>
    4b7c:	2f 7e       	andi	r18, 0xEF	; 239
    4b7e:	b2 2e       	mov	r11, r18
    4b80:	2a e0       	ldi	r18, 0x0A	; 10
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	25 c0       	rjmp	.+74     	; 0x4bd0 <vfprintf+0x252>
    4b86:	f2 2f       	mov	r31, r18
    4b88:	f9 7f       	andi	r31, 0xF9	; 249
    4b8a:	bf 2e       	mov	r11, r31
    4b8c:	8f 36       	cpi	r24, 0x6F	; 111
    4b8e:	c1 f0       	breq	.+48     	; 0x4bc0 <vfprintf+0x242>
    4b90:	18 f4       	brcc	.+6      	; 0x4b98 <vfprintf+0x21a>
    4b92:	88 35       	cpi	r24, 0x58	; 88
    4b94:	79 f0       	breq	.+30     	; 0x4bb4 <vfprintf+0x236>
    4b96:	ad c0       	rjmp	.+346    	; 0x4cf2 <vfprintf+0x374>
    4b98:	80 37       	cpi	r24, 0x70	; 112
    4b9a:	19 f0       	breq	.+6      	; 0x4ba2 <vfprintf+0x224>
    4b9c:	88 37       	cpi	r24, 0x78	; 120
    4b9e:	21 f0       	breq	.+8      	; 0x4ba8 <vfprintf+0x22a>
    4ba0:	a8 c0       	rjmp	.+336    	; 0x4cf2 <vfprintf+0x374>
    4ba2:	2f 2f       	mov	r18, r31
    4ba4:	20 61       	ori	r18, 0x10	; 16
    4ba6:	b2 2e       	mov	r11, r18
    4ba8:	b4 fe       	sbrs	r11, 4
    4baa:	0d c0       	rjmp	.+26     	; 0x4bc6 <vfprintf+0x248>
    4bac:	8b 2d       	mov	r24, r11
    4bae:	84 60       	ori	r24, 0x04	; 4
    4bb0:	b8 2e       	mov	r11, r24
    4bb2:	09 c0       	rjmp	.+18     	; 0x4bc6 <vfprintf+0x248>
    4bb4:	24 ff       	sbrs	r18, 4
    4bb6:	0a c0       	rjmp	.+20     	; 0x4bcc <vfprintf+0x24e>
    4bb8:	9f 2f       	mov	r25, r31
    4bba:	96 60       	ori	r25, 0x06	; 6
    4bbc:	b9 2e       	mov	r11, r25
    4bbe:	06 c0       	rjmp	.+12     	; 0x4bcc <vfprintf+0x24e>
    4bc0:	28 e0       	ldi	r18, 0x08	; 8
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	05 c0       	rjmp	.+10     	; 0x4bd0 <vfprintf+0x252>
    4bc6:	20 e1       	ldi	r18, 0x10	; 16
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	02 c0       	rjmp	.+4      	; 0x4bd0 <vfprintf+0x252>
    4bcc:	20 e1       	ldi	r18, 0x10	; 16
    4bce:	32 e0       	ldi	r19, 0x02	; 2
    4bd0:	f8 01       	movw	r30, r16
    4bd2:	b7 fe       	sbrs	r11, 7
    4bd4:	07 c0       	rjmp	.+14     	; 0x4be4 <vfprintf+0x266>
    4bd6:	60 81       	ld	r22, Z
    4bd8:	71 81       	ldd	r23, Z+1	; 0x01
    4bda:	82 81       	ldd	r24, Z+2	; 0x02
    4bdc:	93 81       	ldd	r25, Z+3	; 0x03
    4bde:	0c 5f       	subi	r16, 0xFC	; 252
    4be0:	1f 4f       	sbci	r17, 0xFF	; 255
    4be2:	06 c0       	rjmp	.+12     	; 0x4bf0 <vfprintf+0x272>
    4be4:	60 81       	ld	r22, Z
    4be6:	71 81       	ldd	r23, Z+1	; 0x01
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	0e 5f       	subi	r16, 0xFE	; 254
    4bee:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf0:	a4 01       	movw	r20, r8
    4bf2:	d0 d0       	rcall	.+416    	; 0x4d94 <__ultoa_invert>
    4bf4:	a8 2e       	mov	r10, r24
    4bf6:	a8 18       	sub	r10, r8
    4bf8:	fb 2d       	mov	r31, r11
    4bfa:	ff 77       	andi	r31, 0x7F	; 127
    4bfc:	bf 2e       	mov	r11, r31
    4bfe:	b6 fe       	sbrs	r11, 6
    4c00:	0b c0       	rjmp	.+22     	; 0x4c18 <vfprintf+0x29a>
    4c02:	2b 2d       	mov	r18, r11
    4c04:	2e 7f       	andi	r18, 0xFE	; 254
    4c06:	a5 14       	cp	r10, r5
    4c08:	50 f4       	brcc	.+20     	; 0x4c1e <vfprintf+0x2a0>
    4c0a:	b4 fe       	sbrs	r11, 4
    4c0c:	0a c0       	rjmp	.+20     	; 0x4c22 <vfprintf+0x2a4>
    4c0e:	b2 fc       	sbrc	r11, 2
    4c10:	08 c0       	rjmp	.+16     	; 0x4c22 <vfprintf+0x2a4>
    4c12:	2b 2d       	mov	r18, r11
    4c14:	2e 7e       	andi	r18, 0xEE	; 238
    4c16:	05 c0       	rjmp	.+10     	; 0x4c22 <vfprintf+0x2a4>
    4c18:	7a 2c       	mov	r7, r10
    4c1a:	2b 2d       	mov	r18, r11
    4c1c:	03 c0       	rjmp	.+6      	; 0x4c24 <vfprintf+0x2a6>
    4c1e:	7a 2c       	mov	r7, r10
    4c20:	01 c0       	rjmp	.+2      	; 0x4c24 <vfprintf+0x2a6>
    4c22:	75 2c       	mov	r7, r5
    4c24:	24 ff       	sbrs	r18, 4
    4c26:	0d c0       	rjmp	.+26     	; 0x4c42 <vfprintf+0x2c4>
    4c28:	fe 01       	movw	r30, r28
    4c2a:	ea 0d       	add	r30, r10
    4c2c:	f1 1d       	adc	r31, r1
    4c2e:	80 81       	ld	r24, Z
    4c30:	80 33       	cpi	r24, 0x30	; 48
    4c32:	11 f4       	brne	.+4      	; 0x4c38 <vfprintf+0x2ba>
    4c34:	29 7e       	andi	r18, 0xE9	; 233
    4c36:	09 c0       	rjmp	.+18     	; 0x4c4a <vfprintf+0x2cc>
    4c38:	22 ff       	sbrs	r18, 2
    4c3a:	06 c0       	rjmp	.+12     	; 0x4c48 <vfprintf+0x2ca>
    4c3c:	73 94       	inc	r7
    4c3e:	73 94       	inc	r7
    4c40:	04 c0       	rjmp	.+8      	; 0x4c4a <vfprintf+0x2cc>
    4c42:	82 2f       	mov	r24, r18
    4c44:	86 78       	andi	r24, 0x86	; 134
    4c46:	09 f0       	breq	.+2      	; 0x4c4a <vfprintf+0x2cc>
    4c48:	73 94       	inc	r7
    4c4a:	23 fd       	sbrc	r18, 3
    4c4c:	12 c0       	rjmp	.+36     	; 0x4c72 <vfprintf+0x2f4>
    4c4e:	20 ff       	sbrs	r18, 0
    4c50:	06 c0       	rjmp	.+12     	; 0x4c5e <vfprintf+0x2e0>
    4c52:	5a 2c       	mov	r5, r10
    4c54:	73 14       	cp	r7, r3
    4c56:	18 f4       	brcc	.+6      	; 0x4c5e <vfprintf+0x2e0>
    4c58:	53 0c       	add	r5, r3
    4c5a:	57 18       	sub	r5, r7
    4c5c:	73 2c       	mov	r7, r3
    4c5e:	73 14       	cp	r7, r3
    4c60:	60 f4       	brcc	.+24     	; 0x4c7a <vfprintf+0x2fc>
    4c62:	b7 01       	movw	r22, r14
    4c64:	80 e2       	ldi	r24, 0x20	; 32
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	2c 87       	std	Y+12, r18	; 0x0c
    4c6a:	62 d0       	rcall	.+196    	; 0x4d30 <fputc>
    4c6c:	73 94       	inc	r7
    4c6e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c70:	f6 cf       	rjmp	.-20     	; 0x4c5e <vfprintf+0x2e0>
    4c72:	73 14       	cp	r7, r3
    4c74:	10 f4       	brcc	.+4      	; 0x4c7a <vfprintf+0x2fc>
    4c76:	37 18       	sub	r3, r7
    4c78:	01 c0       	rjmp	.+2      	; 0x4c7c <vfprintf+0x2fe>
    4c7a:	31 2c       	mov	r3, r1
    4c7c:	24 ff       	sbrs	r18, 4
    4c7e:	11 c0       	rjmp	.+34     	; 0x4ca2 <vfprintf+0x324>
    4c80:	b7 01       	movw	r22, r14
    4c82:	80 e3       	ldi	r24, 0x30	; 48
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	2c 87       	std	Y+12, r18	; 0x0c
    4c88:	53 d0       	rcall	.+166    	; 0x4d30 <fputc>
    4c8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c8c:	22 ff       	sbrs	r18, 2
    4c8e:	16 c0       	rjmp	.+44     	; 0x4cbc <vfprintf+0x33e>
    4c90:	21 ff       	sbrs	r18, 1
    4c92:	03 c0       	rjmp	.+6      	; 0x4c9a <vfprintf+0x31c>
    4c94:	88 e5       	ldi	r24, 0x58	; 88
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	02 c0       	rjmp	.+4      	; 0x4c9e <vfprintf+0x320>
    4c9a:	88 e7       	ldi	r24, 0x78	; 120
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	b7 01       	movw	r22, r14
    4ca0:	0c c0       	rjmp	.+24     	; 0x4cba <vfprintf+0x33c>
    4ca2:	82 2f       	mov	r24, r18
    4ca4:	86 78       	andi	r24, 0x86	; 134
    4ca6:	51 f0       	breq	.+20     	; 0x4cbc <vfprintf+0x33e>
    4ca8:	21 fd       	sbrc	r18, 1
    4caa:	02 c0       	rjmp	.+4      	; 0x4cb0 <vfprintf+0x332>
    4cac:	80 e2       	ldi	r24, 0x20	; 32
    4cae:	01 c0       	rjmp	.+2      	; 0x4cb2 <vfprintf+0x334>
    4cb0:	8b e2       	ldi	r24, 0x2B	; 43
    4cb2:	27 fd       	sbrc	r18, 7
    4cb4:	8d e2       	ldi	r24, 0x2D	; 45
    4cb6:	b7 01       	movw	r22, r14
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	3a d0       	rcall	.+116    	; 0x4d30 <fputc>
    4cbc:	a5 14       	cp	r10, r5
    4cbe:	30 f4       	brcc	.+12     	; 0x4ccc <vfprintf+0x34e>
    4cc0:	b7 01       	movw	r22, r14
    4cc2:	80 e3       	ldi	r24, 0x30	; 48
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	34 d0       	rcall	.+104    	; 0x4d30 <fputc>
    4cc8:	5a 94       	dec	r5
    4cca:	f8 cf       	rjmp	.-16     	; 0x4cbc <vfprintf+0x33e>
    4ccc:	aa 94       	dec	r10
    4cce:	f4 01       	movw	r30, r8
    4cd0:	ea 0d       	add	r30, r10
    4cd2:	f1 1d       	adc	r31, r1
    4cd4:	80 81       	ld	r24, Z
    4cd6:	b7 01       	movw	r22, r14
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	2a d0       	rcall	.+84     	; 0x4d30 <fputc>
    4cdc:	a1 10       	cpse	r10, r1
    4cde:	f6 cf       	rjmp	.-20     	; 0x4ccc <vfprintf+0x34e>
    4ce0:	33 20       	and	r3, r3
    4ce2:	09 f4       	brne	.+2      	; 0x4ce6 <vfprintf+0x368>
    4ce4:	5d ce       	rjmp	.-838    	; 0x49a0 <vfprintf+0x22>
    4ce6:	b7 01       	movw	r22, r14
    4ce8:	80 e2       	ldi	r24, 0x20	; 32
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	21 d0       	rcall	.+66     	; 0x4d30 <fputc>
    4cee:	3a 94       	dec	r3
    4cf0:	f7 cf       	rjmp	.-18     	; 0x4ce0 <vfprintf+0x362>
    4cf2:	f7 01       	movw	r30, r14
    4cf4:	86 81       	ldd	r24, Z+6	; 0x06
    4cf6:	97 81       	ldd	r25, Z+7	; 0x07
    4cf8:	02 c0       	rjmp	.+4      	; 0x4cfe <vfprintf+0x380>
    4cfa:	8f ef       	ldi	r24, 0xFF	; 255
    4cfc:	9f ef       	ldi	r25, 0xFF	; 255
    4cfe:	2c 96       	adiw	r28, 0x0c	; 12
    4d00:	e2 e1       	ldi	r30, 0x12	; 18
    4d02:	bf c0       	rjmp	.+382    	; 0x4e82 <__epilogue_restores__>

00004d04 <strnlen_P>:
    4d04:	fc 01       	movw	r30, r24
    4d06:	05 90       	lpm	r0, Z+
    4d08:	61 50       	subi	r22, 0x01	; 1
    4d0a:	70 40       	sbci	r23, 0x00	; 0
    4d0c:	01 10       	cpse	r0, r1
    4d0e:	d8 f7       	brcc	.-10     	; 0x4d06 <strnlen_P+0x2>
    4d10:	80 95       	com	r24
    4d12:	90 95       	com	r25
    4d14:	8e 0f       	add	r24, r30
    4d16:	9f 1f       	adc	r25, r31
    4d18:	08 95       	ret

00004d1a <strnlen>:
    4d1a:	fc 01       	movw	r30, r24
    4d1c:	61 50       	subi	r22, 0x01	; 1
    4d1e:	70 40       	sbci	r23, 0x00	; 0
    4d20:	01 90       	ld	r0, Z+
    4d22:	01 10       	cpse	r0, r1
    4d24:	d8 f7       	brcc	.-10     	; 0x4d1c <strnlen+0x2>
    4d26:	80 95       	com	r24
    4d28:	90 95       	com	r25
    4d2a:	8e 0f       	add	r24, r30
    4d2c:	9f 1f       	adc	r25, r31
    4d2e:	08 95       	ret

00004d30 <fputc>:
    4d30:	0f 93       	push	r16
    4d32:	1f 93       	push	r17
    4d34:	cf 93       	push	r28
    4d36:	df 93       	push	r29
    4d38:	18 2f       	mov	r17, r24
    4d3a:	09 2f       	mov	r16, r25
    4d3c:	eb 01       	movw	r28, r22
    4d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d40:	81 fd       	sbrc	r24, 1
    4d42:	03 c0       	rjmp	.+6      	; 0x4d4a <fputc+0x1a>
    4d44:	8f ef       	ldi	r24, 0xFF	; 255
    4d46:	9f ef       	ldi	r25, 0xFF	; 255
    4d48:	20 c0       	rjmp	.+64     	; 0x4d8a <fputc+0x5a>
    4d4a:	82 ff       	sbrs	r24, 2
    4d4c:	10 c0       	rjmp	.+32     	; 0x4d6e <fputc+0x3e>
    4d4e:	4e 81       	ldd	r20, Y+6	; 0x06
    4d50:	5f 81       	ldd	r21, Y+7	; 0x07
    4d52:	2c 81       	ldd	r18, Y+4	; 0x04
    4d54:	3d 81       	ldd	r19, Y+5	; 0x05
    4d56:	42 17       	cp	r20, r18
    4d58:	53 07       	cpc	r21, r19
    4d5a:	7c f4       	brge	.+30     	; 0x4d7a <fputc+0x4a>
    4d5c:	e8 81       	ld	r30, Y
    4d5e:	f9 81       	ldd	r31, Y+1	; 0x01
    4d60:	9f 01       	movw	r18, r30
    4d62:	2f 5f       	subi	r18, 0xFF	; 255
    4d64:	3f 4f       	sbci	r19, 0xFF	; 255
    4d66:	28 83       	st	Y, r18
    4d68:	39 83       	std	Y+1, r19	; 0x01
    4d6a:	10 83       	st	Z, r17
    4d6c:	06 c0       	rjmp	.+12     	; 0x4d7a <fputc+0x4a>
    4d6e:	e8 85       	ldd	r30, Y+8	; 0x08
    4d70:	f9 85       	ldd	r31, Y+9	; 0x09
    4d72:	81 2f       	mov	r24, r17
    4d74:	09 95       	icall
    4d76:	89 2b       	or	r24, r25
    4d78:	29 f7       	brne	.-54     	; 0x4d44 <fputc+0x14>
    4d7a:	2e 81       	ldd	r18, Y+6	; 0x06
    4d7c:	3f 81       	ldd	r19, Y+7	; 0x07
    4d7e:	2f 5f       	subi	r18, 0xFF	; 255
    4d80:	3f 4f       	sbci	r19, 0xFF	; 255
    4d82:	2e 83       	std	Y+6, r18	; 0x06
    4d84:	3f 83       	std	Y+7, r19	; 0x07
    4d86:	81 2f       	mov	r24, r17
    4d88:	90 2f       	mov	r25, r16
    4d8a:	df 91       	pop	r29
    4d8c:	cf 91       	pop	r28
    4d8e:	1f 91       	pop	r17
    4d90:	0f 91       	pop	r16
    4d92:	08 95       	ret

00004d94 <__ultoa_invert>:
    4d94:	fa 01       	movw	r30, r20
    4d96:	aa 27       	eor	r26, r26
    4d98:	28 30       	cpi	r18, 0x08	; 8
    4d9a:	51 f1       	breq	.+84     	; 0x4df0 <__ultoa_invert+0x5c>
    4d9c:	20 31       	cpi	r18, 0x10	; 16
    4d9e:	81 f1       	breq	.+96     	; 0x4e00 <__ultoa_invert+0x6c>
    4da0:	e8 94       	clt
    4da2:	6f 93       	push	r22
    4da4:	6e 7f       	andi	r22, 0xFE	; 254
    4da6:	6e 5f       	subi	r22, 0xFE	; 254
    4da8:	7f 4f       	sbci	r23, 0xFF	; 255
    4daa:	8f 4f       	sbci	r24, 0xFF	; 255
    4dac:	9f 4f       	sbci	r25, 0xFF	; 255
    4dae:	af 4f       	sbci	r26, 0xFF	; 255
    4db0:	b1 e0       	ldi	r27, 0x01	; 1
    4db2:	3e d0       	rcall	.+124    	; 0x4e30 <__ultoa_invert+0x9c>
    4db4:	b4 e0       	ldi	r27, 0x04	; 4
    4db6:	3c d0       	rcall	.+120    	; 0x4e30 <__ultoa_invert+0x9c>
    4db8:	67 0f       	add	r22, r23
    4dba:	78 1f       	adc	r23, r24
    4dbc:	89 1f       	adc	r24, r25
    4dbe:	9a 1f       	adc	r25, r26
    4dc0:	a1 1d       	adc	r26, r1
    4dc2:	68 0f       	add	r22, r24
    4dc4:	79 1f       	adc	r23, r25
    4dc6:	8a 1f       	adc	r24, r26
    4dc8:	91 1d       	adc	r25, r1
    4dca:	a1 1d       	adc	r26, r1
    4dcc:	6a 0f       	add	r22, r26
    4dce:	71 1d       	adc	r23, r1
    4dd0:	81 1d       	adc	r24, r1
    4dd2:	91 1d       	adc	r25, r1
    4dd4:	a1 1d       	adc	r26, r1
    4dd6:	20 d0       	rcall	.+64     	; 0x4e18 <__ultoa_invert+0x84>
    4dd8:	09 f4       	brne	.+2      	; 0x4ddc <__ultoa_invert+0x48>
    4dda:	68 94       	set
    4ddc:	3f 91       	pop	r19
    4dde:	2a e0       	ldi	r18, 0x0A	; 10
    4de0:	26 9f       	mul	r18, r22
    4de2:	11 24       	eor	r1, r1
    4de4:	30 19       	sub	r19, r0
    4de6:	30 5d       	subi	r19, 0xD0	; 208
    4de8:	31 93       	st	Z+, r19
    4dea:	de f6       	brtc	.-74     	; 0x4da2 <__ultoa_invert+0xe>
    4dec:	cf 01       	movw	r24, r30
    4dee:	08 95       	ret
    4df0:	46 2f       	mov	r20, r22
    4df2:	47 70       	andi	r20, 0x07	; 7
    4df4:	40 5d       	subi	r20, 0xD0	; 208
    4df6:	41 93       	st	Z+, r20
    4df8:	b3 e0       	ldi	r27, 0x03	; 3
    4dfa:	0f d0       	rcall	.+30     	; 0x4e1a <__ultoa_invert+0x86>
    4dfc:	c9 f7       	brne	.-14     	; 0x4df0 <__ultoa_invert+0x5c>
    4dfe:	f6 cf       	rjmp	.-20     	; 0x4dec <__ultoa_invert+0x58>
    4e00:	46 2f       	mov	r20, r22
    4e02:	4f 70       	andi	r20, 0x0F	; 15
    4e04:	40 5d       	subi	r20, 0xD0	; 208
    4e06:	4a 33       	cpi	r20, 0x3A	; 58
    4e08:	18 f0       	brcs	.+6      	; 0x4e10 <__ultoa_invert+0x7c>
    4e0a:	49 5d       	subi	r20, 0xD9	; 217
    4e0c:	31 fd       	sbrc	r19, 1
    4e0e:	40 52       	subi	r20, 0x20	; 32
    4e10:	41 93       	st	Z+, r20
    4e12:	02 d0       	rcall	.+4      	; 0x4e18 <__ultoa_invert+0x84>
    4e14:	a9 f7       	brne	.-22     	; 0x4e00 <__ultoa_invert+0x6c>
    4e16:	ea cf       	rjmp	.-44     	; 0x4dec <__ultoa_invert+0x58>
    4e18:	b4 e0       	ldi	r27, 0x04	; 4
    4e1a:	a6 95       	lsr	r26
    4e1c:	97 95       	ror	r25
    4e1e:	87 95       	ror	r24
    4e20:	77 95       	ror	r23
    4e22:	67 95       	ror	r22
    4e24:	ba 95       	dec	r27
    4e26:	c9 f7       	brne	.-14     	; 0x4e1a <__ultoa_invert+0x86>
    4e28:	00 97       	sbiw	r24, 0x00	; 0
    4e2a:	61 05       	cpc	r22, r1
    4e2c:	71 05       	cpc	r23, r1
    4e2e:	08 95       	ret
    4e30:	9b 01       	movw	r18, r22
    4e32:	ac 01       	movw	r20, r24
    4e34:	0a 2e       	mov	r0, r26
    4e36:	06 94       	lsr	r0
    4e38:	57 95       	ror	r21
    4e3a:	47 95       	ror	r20
    4e3c:	37 95       	ror	r19
    4e3e:	27 95       	ror	r18
    4e40:	ba 95       	dec	r27
    4e42:	c9 f7       	brne	.-14     	; 0x4e36 <__ultoa_invert+0xa2>
    4e44:	62 0f       	add	r22, r18
    4e46:	73 1f       	adc	r23, r19
    4e48:	84 1f       	adc	r24, r20
    4e4a:	95 1f       	adc	r25, r21
    4e4c:	a0 1d       	adc	r26, r0
    4e4e:	08 95       	ret

00004e50 <__prologue_saves__>:
    4e50:	2f 92       	push	r2
    4e52:	3f 92       	push	r3
    4e54:	4f 92       	push	r4
    4e56:	5f 92       	push	r5
    4e58:	6f 92       	push	r6
    4e5a:	7f 92       	push	r7
    4e5c:	8f 92       	push	r8
    4e5e:	9f 92       	push	r9
    4e60:	af 92       	push	r10
    4e62:	bf 92       	push	r11
    4e64:	cf 92       	push	r12
    4e66:	df 92       	push	r13
    4e68:	ef 92       	push	r14
    4e6a:	ff 92       	push	r15
    4e6c:	0f 93       	push	r16
    4e6e:	1f 93       	push	r17
    4e70:	cf 93       	push	r28
    4e72:	df 93       	push	r29
    4e74:	cd b7       	in	r28, 0x3d	; 61
    4e76:	de b7       	in	r29, 0x3e	; 62
    4e78:	ca 1b       	sub	r28, r26
    4e7a:	db 0b       	sbc	r29, r27
    4e7c:	cd bf       	out	0x3d, r28	; 61
    4e7e:	de bf       	out	0x3e, r29	; 62
    4e80:	09 94       	ijmp

00004e82 <__epilogue_restores__>:
    4e82:	2a 88       	ldd	r2, Y+18	; 0x12
    4e84:	39 88       	ldd	r3, Y+17	; 0x11
    4e86:	48 88       	ldd	r4, Y+16	; 0x10
    4e88:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e90:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e92:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e94:	b9 84       	ldd	r11, Y+9	; 0x09
    4e96:	c8 84       	ldd	r12, Y+8	; 0x08
    4e98:	df 80       	ldd	r13, Y+7	; 0x07
    4e9a:	ee 80       	ldd	r14, Y+6	; 0x06
    4e9c:	fd 80       	ldd	r15, Y+5	; 0x05
    4e9e:	0c 81       	ldd	r16, Y+4	; 0x04
    4ea0:	1b 81       	ldd	r17, Y+3	; 0x03
    4ea2:	aa 81       	ldd	r26, Y+2	; 0x02
    4ea4:	b9 81       	ldd	r27, Y+1	; 0x01
    4ea6:	ce 0f       	add	r28, r30
    4ea8:	d1 1d       	adc	r29, r1
    4eaa:	cd bf       	out	0x3d, r28	; 61
    4eac:	de bf       	out	0x3e, r29	; 62
    4eae:	ed 01       	movw	r28, r26
    4eb0:	08 95       	ret

00004eb2 <_exit>:
    4eb2:	f8 94       	cli

00004eb4 <__stop_program>:
    4eb4:	ff cf       	rjmp	.-2      	; 0x4eb4 <__stop_program>
