
RoboticaMovil.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004fea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00802000  00004fea  0000507e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000620  00802148  00802148  000051c8  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000051c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000a38  00000000  00000000  000051f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00015b8a  00000000  00000000  00005c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003364  00000000  00000000  0001b7ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000eaad  00000000  00000000  0001eb1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000240c  00000000  00000000  0002d5cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0003176c  00000000  00000000  0002f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008911  00000000  00000000  00061144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000928  00000000  00000000  00069a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000d586  00000000  00000000  0006a380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_13>
      38:	dd c7       	rjmp	.+4026   	; 0xff4 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_15>
      40:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_16>
      44:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_17>
      48:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_18>
      4c:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__vector_19>
      50:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_20>
      54:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__vector_21>
      58:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_22>
      5c:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__vector_23>
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0c 94 86 20 	jmp	0x410c	; 0x410c <__vector_43>
      b0:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__vector_44>
      b4:	0c 94 19 23 	jmp	0x4632	; 0x4632 <__vector_45>
      b8:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__vector_46>
      bc:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__vector_47>
      c0:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_48>
      c4:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__vector_49>
      c8:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_50>
      cc:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_51>
      d0:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__vector_52>
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_77>
     138:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__vector_78>
     13c:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_79>
     140:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__vector_80>
     144:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_81>
     148:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_82>
     14c:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_83>
     150:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__vector_84>
     154:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__vector_85>
     158:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_86>
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__vector_125>
     1f8:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__vector_126>
     1fc:	99 0f       	add	r25, r25
     1fe:	87 0f       	add	r24, r23
     200:	8a 0f       	add	r24, r26
     202:	8d 0f       	add	r24, r29
     204:	90 0f       	add	r25, r16
     206:	93 0f       	add	r25, r19
     208:	96 0f       	add	r25, r22

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	11 e2       	ldi	r17, 0x21	; 33
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	ea ee       	ldi	r30, 0xEA	; 234
     21e:	ff e4       	ldi	r31, 0x4F	; 79
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a8 34       	cpi	r26, 0x48	; 72
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	27 e2       	ldi	r18, 0x27	; 39
     22e:	a8 e4       	ldi	r26, 0x48	; 72
     230:	b1 e2       	ldi	r27, 0x21	; 33
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a8 36       	cpi	r26, 0x68	; 104
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 61 23 	call	0x46c2	; 0x46c2 <main>
     240:	0c 94 f3 27 	jmp	0x4fe6	; 0x4fe6 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <udi_cdc_comm_enable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     246:	10 92 5e 22 	sts	0x225E, r1
     24a:	10 92 6a 22 	sts	0x226A, r1
     24e:	10 92 6b 22 	sts	0x226B, r1
     252:	81 ea       	ldi	r24, 0xA1	; 161
     254:	80 93 60 22 	sts	0x2260, r24
     258:	80 e2       	ldi	r24, 0x20	; 32
     25a:	80 93 61 22 	sts	0x2261, r24
     25e:	10 92 62 22 	sts	0x2262, r1
     262:	10 92 63 22 	sts	0x2263, r1
     266:	10 92 64 22 	sts	0x2264, r1
     26a:	10 92 65 22 	sts	0x2265, r1
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	80 93 66 22 	sts	0x2266, r24
     276:	90 93 67 22 	sts	0x2267, r25
     27a:	10 92 68 22 	sts	0x2268, r1
     27e:	10 92 69 22 	sts	0x2269, r1
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	92 ec       	ldi	r25, 0xC2	; 194
     286:	a1 e0       	ldi	r26, 0x01	; 1
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	80 93 6c 22 	sts	0x226C, r24
     28e:	90 93 6d 22 	sts	0x226D, r25
     292:	a0 93 6e 22 	sts	0x226E, r26
     296:	b0 93 6f 22 	sts	0x226F, r27
     29a:	10 92 70 22 	sts	0x2270, r1
     29e:	10 92 71 22 	sts	0x2271, r1
     2a2:	88 e0       	ldi	r24, 0x08	; 8
     2a4:	80 93 72 22 	sts	0x2272, r24
     2a8:	80 91 5e 22 	lds	r24, 0x225E
     2ac:	8f 5f       	subi	r24, 0xFF	; 255
     2ae:	80 93 5e 22 	sts	0x225E, r24
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	08 95       	ret

000002b6 <udi_cdc_comm_disable>:
     2b6:	80 91 5e 22 	lds	r24, 0x225E
     2ba:	81 50       	subi	r24, 0x01	; 1
     2bc:	80 93 5e 22 	sts	0x225E, r24
     2c0:	08 95       	ret

000002c2 <udi_cdc_data_disable>:
     2c2:	80 91 5d 22 	lds	r24, 0x225D
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	80 93 5d 22 	sts	0x225D, r24
     2cc:	80 91 5d 22 	lds	r24, 0x225D
     2d0:	10 92 5c 22 	sts	0x225C, r1
     2d4:	08 95       	ret

000002d6 <udi_cdc_data_setup>:
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	08 95       	ret

000002da <udi_cdc_getsetting>:
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	08 95       	ret

000002de <udi_cdc_comm_setup>:
     2de:	80 91 21 24 	lds	r24, 0x2421
     2e2:	88 23       	and	r24, r24
     2e4:	dc f4       	brge	.+54     	; 0x31c <udi_cdc_comm_setup+0x3e>
     2e6:	80 76       	andi	r24, 0x60	; 96
     2e8:	80 32       	cpi	r24, 0x20	; 32
     2ea:	e9 f5       	brne	.+122    	; 0x366 <udi_cdc_comm_setup+0x88>
     2ec:	80 91 22 24 	lds	r24, 0x2422
     2f0:	81 32       	cpi	r24, 0x21	; 33
     2f2:	d9 f5       	brne	.+118    	; 0x36a <udi_cdc_comm_setup+0x8c>
     2f4:	80 91 27 24 	lds	r24, 0x2427
     2f8:	90 91 28 24 	lds	r25, 0x2428
     2fc:	07 97       	sbiw	r24, 0x07	; 7
     2fe:	b9 f5       	brne	.+110    	; 0x36e <udi_cdc_comm_setup+0x90>
     300:	8c e6       	ldi	r24, 0x6C	; 108
     302:	92 e2       	ldi	r25, 0x22	; 34
     304:	80 93 29 24 	sts	0x2429, r24
     308:	90 93 2a 24 	sts	0x242A, r25
     30c:	87 e0       	ldi	r24, 0x07	; 7
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	80 93 2b 24 	sts	0x242B, r24
     314:	90 93 2c 24 	sts	0x242C, r25
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	08 95       	ret
     31c:	80 76       	andi	r24, 0x60	; 96
     31e:	80 32       	cpi	r24, 0x20	; 32
     320:	41 f5       	brne	.+80     	; 0x372 <udi_cdc_comm_setup+0x94>
     322:	80 91 22 24 	lds	r24, 0x2422
     326:	80 32       	cpi	r24, 0x20	; 32
     328:	21 f0       	breq	.+8      	; 0x332 <udi_cdc_comm_setup+0x54>
     32a:	82 32       	cpi	r24, 0x22	; 34
     32c:	21 f5       	brne	.+72     	; 0x376 <udi_cdc_comm_setup+0x98>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	08 95       	ret
     332:	80 91 27 24 	lds	r24, 0x2427
     336:	90 91 28 24 	lds	r25, 0x2428
     33a:	07 97       	sbiw	r24, 0x07	; 7
     33c:	f1 f4       	brne	.+60     	; 0x37a <udi_cdc_comm_setup+0x9c>
     33e:	8f eb       	ldi	r24, 0xBF	; 191
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	80 93 2d 24 	sts	0x242D, r24
     346:	90 93 2e 24 	sts	0x242E, r25
     34a:	8c e6       	ldi	r24, 0x6C	; 108
     34c:	92 e2       	ldi	r25, 0x22	; 34
     34e:	80 93 29 24 	sts	0x2429, r24
     352:	90 93 2a 24 	sts	0x242A, r25
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	80 93 2b 24 	sts	0x242B, r24
     35e:	90 93 2c 24 	sts	0x242C, r25
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	08 95       	ret
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	08 95       	ret
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	08 95       	ret
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	08 95       	ret
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	08 95       	ret
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	08 95       	ret
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	08 95       	ret

0000037e <udi_cdc_line_coding_received>:
     37e:	08 95       	ret

00000380 <udi_cdc_tx_send>:
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	80 91 4b 21 	lds	r24, 0x214B
     38e:	81 11       	cpse	r24, r1
     390:	9c c0       	rjmp	.+312    	; 0x4ca <udi_cdc_tx_send+0x14a>
     392:	0e 94 cf 11 	call	0x239e	; 0x239e <udd_is_high_speed>
     396:	88 23       	and	r24, r24
     398:	51 f0       	breq	.+20     	; 0x3ae <udi_cdc_tx_send+0x2e>
     39a:	c0 91 4c 21 	lds	r28, 0x214C
     39e:	d0 91 4d 21 	lds	r29, 0x214D
     3a2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <udd_get_micro_frame_number>
     3a6:	c8 17       	cp	r28, r24
     3a8:	d9 07       	cpc	r29, r25
     3aa:	59 f4       	brne	.+22     	; 0x3c2 <udi_cdc_tx_send+0x42>
     3ac:	8e c0       	rjmp	.+284    	; 0x4ca <udi_cdc_tx_send+0x14a>
     3ae:	c0 91 4c 21 	lds	r28, 0x214C
     3b2:	d0 91 4d 21 	lds	r29, 0x214D
     3b6:	0e 94 d7 11 	call	0x23ae	; 0x23ae <udd_get_frame_number>
     3ba:	c8 17       	cp	r28, r24
     3bc:	d9 07       	cpc	r29, r25
     3be:	09 f4       	brne	.+2      	; 0x3c2 <udi_cdc_tx_send+0x42>
     3c0:	84 c0       	rjmp	.+264    	; 0x4ca <udi_cdc_tx_send+0x14a>
     3c2:	df b7       	in	r29, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	c0 91 4e 21 	lds	r28, 0x214E
     3ca:	ec 2f       	mov	r30, r28
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e1 5b       	subi	r30, 0xB1	; 177
     3d4:	fe 4d       	sbci	r31, 0xDE	; 222
     3d6:	80 81       	ld	r24, Z
     3d8:	91 81       	ldd	r25, Z+1	; 0x01
     3da:	89 2b       	or	r24, r25
     3dc:	09 f5       	brne	.+66     	; 0x420 <udi_cdc_tx_send+0xa0>
     3de:	80 91 48 21 	lds	r24, 0x2148
     3e2:	90 91 49 21 	lds	r25, 0x2149
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	80 93 48 21 	sts	0x2148, r24
     3ec:	90 93 49 21 	sts	0x2149, r25
     3f0:	0e 94 cf 11 	call	0x239e	; 0x239e <udd_is_high_speed>
     3f4:	81 11       	cpse	r24, r1
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <udi_cdc_tx_send+0x86>
     3f8:	80 91 48 21 	lds	r24, 0x2148
     3fc:	90 91 49 21 	lds	r25, 0x2149
     400:	84 36       	cpi	r24, 0x64	; 100
     402:	91 05       	cpc	r25, r1
     404:	58 f0       	brcs	.+22     	; 0x41c <udi_cdc_tx_send+0x9c>
     406:	0e 94 cf 11 	call	0x239e	; 0x239e <udd_is_high_speed>
     40a:	88 23       	and	r24, r24
     40c:	49 f0       	breq	.+18     	; 0x420 <udi_cdc_tx_send+0xa0>
     40e:	80 91 48 21 	lds	r24, 0x2148
     412:	90 91 49 21 	lds	r25, 0x2149
     416:	80 32       	cpi	r24, 0x20	; 32
     418:	93 40       	sbci	r25, 0x03	; 3
     41a:	10 f4       	brcc	.+4      	; 0x420 <udi_cdc_tx_send+0xa0>
     41c:	df bf       	out	0x3f, r29	; 63
     41e:	55 c0       	rjmp	.+170    	; 0x4ca <udi_cdc_tx_send+0x14a>
     420:	10 92 48 21 	sts	0x2148, r1
     424:	10 92 49 21 	sts	0x2149, r1
     428:	80 91 4a 21 	lds	r24, 0x214A
     42c:	81 11       	cpse	r24, r1
     42e:	06 c0       	rjmp	.+12     	; 0x43c <udi_cdc_tx_send+0xbc>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	c1 11       	cpse	r28, r1
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	80 93 4e 21 	sts	0x214E, r24
     43a:	04 c0       	rjmp	.+8      	; 0x444 <udi_cdc_tx_send+0xc4>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	c1 11       	cpse	r28, r1
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	c8 2f       	mov	r28, r24
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 4b 21 	sts	0x214B, r24
     44a:	df bf       	out	0x3f, r29	; 63
     44c:	d0 e0       	ldi	r29, 0x00	; 0
     44e:	fe 01       	movw	r30, r28
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	e1 5b       	subi	r30, 0xB1	; 177
     456:	fe 4d       	sbci	r31, 0xDE	; 222
     458:	ff 24       	eor	r15, r15
     45a:	f3 94       	inc	r15
     45c:	80 81       	ld	r24, Z
     45e:	91 81       	ldd	r25, Z+1	; 0x01
     460:	80 34       	cpi	r24, 0x40	; 64
     462:	91 05       	cpc	r25, r1
     464:	09 f4       	brne	.+2      	; 0x468 <udi_cdc_tx_send+0xe8>
     466:	f1 2c       	mov	r15, r1
     468:	ff 20       	and	r15, r15
     46a:	91 f0       	breq	.+36     	; 0x490 <udi_cdc_tx_send+0x110>
     46c:	0e 94 cf 11 	call	0x239e	; 0x239e <udd_is_high_speed>
     470:	88 23       	and	r24, r24
     472:	39 f0       	breq	.+14     	; 0x482 <udi_cdc_tx_send+0x102>
     474:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <udd_get_micro_frame_number>
     478:	80 93 4c 21 	sts	0x214C, r24
     47c:	90 93 4d 21 	sts	0x214D, r25
     480:	0b c0       	rjmp	.+22     	; 0x498 <udi_cdc_tx_send+0x118>
     482:	0e 94 d7 11 	call	0x23ae	; 0x23ae <udd_get_frame_number>
     486:	80 93 4c 21 	sts	0x214C, r24
     48a:	90 93 4d 21 	sts	0x214D, r25
     48e:	04 c0       	rjmp	.+8      	; 0x498 <udi_cdc_tx_send+0x118>
     490:	10 92 4c 21 	sts	0x214C, r1
     494:	10 92 4d 21 	sts	0x214D, r1
     498:	fe 01       	movw	r30, r28
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	e1 5b       	subi	r30, 0xB1	; 177
     4a0:	fe 4d       	sbci	r31, 0xDE	; 222
     4a2:	20 81       	ld	r18, Z
     4a4:	31 81       	ldd	r19, Z+1	; 0x01
     4a6:	ae 01       	movw	r20, r28
     4a8:	00 24       	eor	r0, r0
     4aa:	56 95       	lsr	r21
     4ac:	47 95       	ror	r20
     4ae:	07 94       	ror	r0
     4b0:	56 95       	lsr	r21
     4b2:	47 95       	ror	r20
     4b4:	07 94       	ror	r0
     4b6:	54 2f       	mov	r21, r20
     4b8:	40 2d       	mov	r20, r0
     4ba:	4c 5a       	subi	r20, 0xAC	; 172
     4bc:	5e 4d       	sbci	r21, 0xDE	; 222
     4be:	0b e6       	ldi	r16, 0x6B	; 107
     4c0:	12 e0       	ldi	r17, 0x02	; 2
     4c2:	6f 2d       	mov	r22, r15
     4c4:	81 e8       	ldi	r24, 0x81	; 129
     4c6:	0e 94 8e 12 	call	0x251c	; 0x251c <udd_ep_run>
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	08 95       	ret

000004d6 <udi_cdc_data_sent>:
     4d6:	81 11       	cpse	r24, r1
     4d8:	15 c0       	rjmp	.+42     	; 0x504 <udi_cdc_data_sent+0x2e>
     4da:	20 91 4e 21 	lds	r18, 0x214E
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	22 23       	and	r18, r18
     4e4:	11 f0       	breq	.+4      	; 0x4ea <udi_cdc_data_sent+0x14>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e1 5b       	subi	r30, 0xB1	; 177
     4f2:	fe 4d       	sbci	r31, 0xDE	; 222
     4f4:	10 82       	st	Z, r1
     4f6:	11 82       	std	Z+1, r1	; 0x01
     4f8:	10 92 4a 21 	sts	0x214A, r1
     4fc:	10 92 4b 21 	sts	0x214B, r1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	3e cf       	rjmp	.-388    	; 0x380 <udi_cdc_tx_send>
     504:	08 95       	ret

00000506 <udi_cdc_data_sof_notify>:
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	3b cf       	rjmp	.-394    	; 0x380 <udi_cdc_tx_send>
     50a:	08 95       	ret

0000050c <udi_cdc_multi_get_nb_received_data>:
     50c:	4f b7       	in	r20, 0x3f	; 63
     50e:	f8 94       	cli
     510:	20 91 d5 21 	lds	r18, 0x21D5
     514:	30 91 d6 21 	lds	r19, 0x21D6
     518:	e0 91 d7 21 	lds	r30, 0x21D7
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	e8 52       	subi	r30, 0x28	; 40
     524:	fe 4d       	sbci	r31, 0xDE	; 222
     526:	80 81       	ld	r24, Z
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	82 1b       	sub	r24, r18
     52c:	93 0b       	sbc	r25, r19
     52e:	4f bf       	out	0x3f, r20	; 63
     530:	08 95       	ret

00000532 <udi_cdc_multi_is_rx_ready>:
     532:	ec df       	rcall	.-40     	; 0x50c <udi_cdc_multi_get_nb_received_data>
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	89 2b       	or	r24, r25
     538:	09 f4       	brne	.+2      	; 0x53c <udi_cdc_multi_is_rx_ready+0xa>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	82 2f       	mov	r24, r18
     53e:	08 95       	ret

00000540 <udi_cdc_rx_start>:
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	4f b7       	in	r20, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	50 91 d7 21 	lds	r21, 0x21D7
     550:	80 91 d4 21 	lds	r24, 0x21D4
     554:	81 11       	cpse	r24, r1
     556:	10 c0       	rjmp	.+32     	; 0x578 <udi_cdc_rx_start+0x38>
     558:	20 91 d5 21 	lds	r18, 0x21D5
     55c:	30 91 d6 21 	lds	r19, 0x21D6
     560:	c5 2f       	mov	r28, r21
     562:	d0 e0       	ldi	r29, 0x00	; 0
     564:	fe 01       	movw	r30, r28
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	e8 52       	subi	r30, 0x28	; 40
     56c:	fe 4d       	sbci	r31, 0xDE	; 222
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	28 17       	cp	r18, r24
     574:	39 07       	cpc	r19, r25
     576:	18 f4       	brcc	.+6      	; 0x57e <udi_cdc_rx_start+0x3e>
     578:	4f bf       	out	0x3f, r20	; 63
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	23 c0       	rjmp	.+70     	; 0x5c4 <udi_cdc_rx_start+0x84>
     57e:	10 92 d5 21 	sts	0x21D5, r1
     582:	10 92 d6 21 	sts	0x21D6, r1
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	51 11       	cpse	r21, r1
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	80 93 d7 21 	sts	0x21D7, r24
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	80 93 d4 21 	sts	0x21D4, r24
     596:	4f bf       	out	0x3f, r20	; 63
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	cb df       	rcall	.-106    	; 0x532 <udi_cdc_multi_is_rx_ready>
     59c:	ae 01       	movw	r20, r28
     59e:	00 24       	eor	r0, r0
     5a0:	56 95       	lsr	r21
     5a2:	47 95       	ror	r20
     5a4:	07 94       	ror	r0
     5a6:	56 95       	lsr	r21
     5a8:	47 95       	ror	r20
     5aa:	07 94       	ror	r0
     5ac:	54 2f       	mov	r21, r20
     5ae:	40 2d       	mov	r20, r0
     5b0:	44 52       	subi	r20, 0x24	; 36
     5b2:	5e 4d       	sbci	r21, 0xDE	; 222
     5b4:	09 e1       	ldi	r16, 0x19	; 25
     5b6:	13 e0       	ldi	r17, 0x03	; 3
     5b8:	20 e4       	ldi	r18, 0x40	; 64
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 8e 12 	call	0x251c	; 0x251c <udd_ep_run>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <udi_cdc_data_enable>:
     5ce:	10 92 5d 22 	sts	0x225D, r1
     5d2:	10 92 4b 21 	sts	0x214B, r1
     5d6:	10 92 4a 21 	sts	0x214A, r1
     5da:	10 92 4e 21 	sts	0x214E, r1
     5de:	10 92 4f 21 	sts	0x214F, r1
     5e2:	10 92 50 21 	sts	0x2150, r1
     5e6:	10 92 51 21 	sts	0x2151, r1
     5ea:	10 92 52 21 	sts	0x2152, r1
     5ee:	10 92 4c 21 	sts	0x214C, r1
     5f2:	10 92 4d 21 	sts	0x214D, r1
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	c3 de       	rcall	.-634    	; 0x380 <udi_cdc_tx_send>
     5fa:	10 92 d4 21 	sts	0x21D4, r1
     5fe:	10 92 d7 21 	sts	0x21D7, r1
     602:	10 92 d8 21 	sts	0x21D8, r1
     606:	10 92 d9 21 	sts	0x21D9, r1
     60a:	10 92 d5 21 	sts	0x21D5, r1
     60e:	10 92 d6 21 	sts	0x21D6, r1
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	95 df       	rcall	.-214    	; 0x540 <udi_cdc_rx_start>
     616:	88 23       	and	r24, r24
     618:	59 f0       	breq	.+22     	; 0x630 <udi_cdc_data_enable+0x62>
     61a:	90 91 5d 22 	lds	r25, 0x225D
     61e:	9f 5f       	subi	r25, 0xFF	; 255
     620:	90 93 5d 22 	sts	0x225D, r25
     624:	90 91 5d 22 	lds	r25, 0x225D
     628:	91 30       	cpi	r25, 0x01	; 1
     62a:	11 f4       	brne	.+4      	; 0x630 <udi_cdc_data_enable+0x62>
     62c:	90 93 5c 22 	sts	0x225C, r25
     630:	08 95       	ret

00000632 <udi_cdc_data_received>:
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	94 2f       	mov	r25, r20
     638:	81 11       	cpse	r24, r1
     63a:	29 c0       	rjmp	.+82     	; 0x68e <udi_cdc_data_received+0x5c>
     63c:	80 91 d7 21 	lds	r24, 0x21D7
     640:	e1 e0       	ldi	r30, 0x01	; 1
     642:	81 11       	cpse	r24, r1
     644:	e0 e0       	ldi	r30, 0x00	; 0
     646:	61 15       	cp	r22, r1
     648:	71 05       	cpc	r23, r1
     64a:	b1 f4       	brne	.+44     	; 0x678 <udi_cdc_data_received+0x46>
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	00 24       	eor	r0, r0
     650:	f6 95       	lsr	r31
     652:	e7 95       	ror	r30
     654:	07 94       	ror	r0
     656:	f6 95       	lsr	r31
     658:	e7 95       	ror	r30
     65a:	07 94       	ror	r0
     65c:	fe 2f       	mov	r31, r30
     65e:	e0 2d       	mov	r30, r0
     660:	af 01       	movw	r20, r30
     662:	44 52       	subi	r20, 0x24	; 36
     664:	5e 4d       	sbci	r21, 0xDE	; 222
     666:	09 e1       	ldi	r16, 0x19	; 25
     668:	13 e0       	ldi	r17, 0x03	; 3
     66a:	20 e4       	ldi	r18, 0x40	; 64
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	89 2f       	mov	r24, r25
     672:	0e 94 8e 12 	call	0x251c	; 0x251c <udd_ep_run>
     676:	0b c0       	rjmp	.+22     	; 0x68e <udi_cdc_data_received+0x5c>
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	e8 52       	subi	r30, 0x28	; 40
     680:	fe 4d       	sbci	r31, 0xDE	; 222
     682:	60 83       	st	Z, r22
     684:	71 83       	std	Z+1, r23	; 0x01
     686:	10 92 d4 21 	sts	0x21D4, r1
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	59 df       	rcall	.-334    	; 0x540 <udi_cdc_rx_start>
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <udi_cdc_is_rx_ready>:
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	4d cf       	rjmp	.-358    	; 0x532 <udi_cdc_multi_is_rx_ready>
     698:	08 95       	ret

0000069a <udi_cdc_multi_getc>:
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	11 e0       	ldi	r17, 0x01	; 1
     6a2:	80 91 72 22 	lds	r24, 0x2272
     6a6:	89 30       	cpi	r24, 0x09	; 9
     6a8:	09 f0       	breq	.+2      	; 0x6ac <udi_cdc_multi_getc+0x12>
     6aa:	10 e0       	ldi	r17, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	3f b7       	in	r19, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	80 91 d5 21 	lds	r24, 0x21D5
     6b8:	90 91 d6 21 	lds	r25, 0x21D6
     6bc:	20 91 d7 21 	lds	r18, 0x21D7
     6c0:	3f bf       	out	0x3f, r19	; 63
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	e8 52       	subi	r30, 0x28	; 40
     6cc:	fe 4d       	sbci	r31, 0xDE	; 222
     6ce:	40 81       	ld	r20, Z
     6d0:	51 81       	ldd	r21, Z+1	; 0x01
     6d2:	84 17       	cp	r24, r20
     6d4:	95 07       	cpc	r25, r21
     6d6:	30 f0       	brcs	.+12     	; 0x6e4 <udi_cdc_multi_getc+0x4a>
     6d8:	80 91 5c 22 	lds	r24, 0x225C
     6dc:	81 11       	cpse	r24, r1
     6de:	e8 cf       	rjmp	.-48     	; 0x6b0 <udi_cdc_multi_getc+0x16>
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	20 c0       	rjmp	.+64     	; 0x724 <udi_cdc_multi_getc+0x8a>
     6e4:	f9 01       	movw	r30, r18
     6e6:	00 24       	eor	r0, r0
     6e8:	f6 95       	lsr	r31
     6ea:	e7 95       	ror	r30
     6ec:	07 94       	ror	r0
     6ee:	f6 95       	lsr	r31
     6f0:	e7 95       	ror	r30
     6f2:	07 94       	ror	r0
     6f4:	fe 2f       	mov	r31, r30
     6f6:	e0 2d       	mov	r30, r0
     6f8:	e8 0f       	add	r30, r24
     6fa:	f9 1f       	adc	r31, r25
     6fc:	e4 52       	subi	r30, 0x24	; 36
     6fe:	fe 4d       	sbci	r31, 0xDE	; 222
     700:	20 81       	ld	r18, Z
     702:	eb 01       	movw	r28, r22
     704:	c2 2b       	or	r28, r18
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	80 93 d5 21 	sts	0x21D5, r24
     70c:	90 93 d6 21 	sts	0x21D6, r25
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	16 df       	rcall	.-468    	; 0x540 <udi_cdc_rx_start>
     714:	11 23       	and	r17, r17
     716:	21 f0       	breq	.+8      	; 0x720 <udi_cdc_multi_getc+0x86>
     718:	7c 2f       	mov	r23, r28
     71a:	66 27       	eor	r22, r22
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	c8 cf       	rjmp	.-112    	; 0x6b0 <udi_cdc_multi_getc+0x16>
     720:	8c 2f       	mov	r24, r28
     722:	9d 2f       	mov	r25, r29
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	08 95       	ret

0000072c <udi_cdc_getc>:
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	b5 cf       	rjmp	.-150    	; 0x69a <udi_cdc_multi_getc>
     730:	08 95       	ret

00000732 <udi_cdc_multi_get_free_tx_buffer>:
     732:	5f b7       	in	r21, 0x3f	; 63
     734:	f8 94       	cli
     736:	20 91 4e 21 	lds	r18, 0x214E
     73a:	e2 2f       	mov	r30, r18
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	e1 5b       	subi	r30, 0xB1	; 177
     744:	fe 4d       	sbci	r31, 0xDE	; 222
     746:	80 81       	ld	r24, Z
     748:	91 81       	ldd	r25, Z+1	; 0x01
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	21 11       	cpse	r18, r1
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	e4 2f       	mov	r30, r20
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	e1 5b       	subi	r30, 0xB1	; 177
     75a:	fe 4d       	sbci	r31, 0xDE	; 222
     75c:	20 81       	ld	r18, Z
     75e:	31 81       	ldd	r19, Z+1	; 0x01
     760:	80 34       	cpi	r24, 0x40	; 64
     762:	91 05       	cpc	r25, r1
     764:	89 f4       	brne	.+34     	; 0x788 <udi_cdc_multi_get_free_tx_buffer+0x56>
     766:	60 91 4b 21 	lds	r22, 0x214B
     76a:	61 11       	cpse	r22, r1
     76c:	0d c0       	rjmp	.+26     	; 0x788 <udi_cdc_multi_get_free_tx_buffer+0x56>
     76e:	60 91 4a 21 	lds	r22, 0x214A
     772:	61 11       	cpse	r22, r1
     774:	09 c0       	rjmp	.+18     	; 0x788 <udi_cdc_multi_get_free_tx_buffer+0x56>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	80 93 4a 21 	sts	0x214A, r24
     77c:	40 93 4e 21 	sts	0x214E, r20
     780:	20 e4       	ldi	r18, 0x40	; 64
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	5f bf       	out	0x3f, r21	; 63
     78a:	28 0f       	add	r18, r24
     78c:	39 1f       	adc	r19, r25
     78e:	80 e8       	ldi	r24, 0x80	; 128
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	82 1b       	sub	r24, r18
     794:	93 0b       	sbc	r25, r19
     796:	08 95       	ret

00000798 <udi_cdc_multi_is_tx_ready>:
     798:	cc df       	rcall	.-104    	; 0x732 <udi_cdc_multi_get_free_tx_buffer>
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	89 2b       	or	r24, r25
     79e:	09 f4       	brne	.+2      	; 0x7a2 <udi_cdc_multi_is_tx_ready+0xa>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	82 2f       	mov	r24, r18
     7a4:	08 95       	ret

000007a6 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	16 2f       	mov	r17, r22
     7ae:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     7b0:	d1 e0       	ldi	r29, 0x01	; 1
     7b2:	80 91 72 22 	lds	r24, 0x2272
     7b6:	89 30       	cpi	r24, 0x09	; 9
     7b8:	09 f0       	breq	.+2      	; 0x7bc <udi_cdc_multi_putc+0x16>
     7ba:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	ec df       	rcall	.-40     	; 0x798 <udi_cdc_multi_is_tx_ready>
     7c0:	81 11       	cpse	r24, r1
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     7c4:	80 91 5c 22 	lds	r24, 0x225C
     7c8:	81 11       	cpse	r24, r1
     7ca:	f8 cf       	rjmp	.-16     	; 0x7bc <udi_cdc_multi_putc+0x16>
			return false;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	2b c0       	rjmp	.+86     	; 0x828 <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7d2:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     7d4:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     7d6:	20 91 4e 21 	lds	r18, 0x214E
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	e1 5b       	subi	r30, 0xB1	; 177
     7e4:	fe 4d       	sbci	r31, 0xDE	; 222
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
     7ea:	ac 01       	movw	r20, r24
     7ec:	4f 5f       	subi	r20, 0xFF	; 255
     7ee:	5f 4f       	sbci	r21, 0xFF	; 255
     7f0:	40 83       	st	Z, r20
     7f2:	51 83       	std	Z+1, r21	; 0x01
     7f4:	f9 01       	movw	r30, r18
     7f6:	00 24       	eor	r0, r0
     7f8:	f6 95       	lsr	r31
     7fa:	e7 95       	ror	r30
     7fc:	07 94       	ror	r0
     7fe:	f6 95       	lsr	r31
     800:	e7 95       	ror	r30
     802:	07 94       	ror	r0
     804:	fe 2f       	mov	r31, r30
     806:	e0 2d       	mov	r30, r0
     808:	8e 0f       	add	r24, r30
     80a:	9f 1f       	adc	r25, r31
     80c:	fc 01       	movw	r30, r24
     80e:	ec 5a       	subi	r30, 0xAC	; 172
     810:	fe 4d       	sbci	r31, 0xDE	; 222
     812:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     814:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     816:	dd 23       	and	r29, r29
     818:	29 f0       	breq	.+10     	; 0x824 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     81a:	1c 2f       	mov	r17, r28
     81c:	cc 0f       	add	r28, r28
     81e:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     820:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     822:	cc cf       	rjmp	.-104    	; 0x7bc <udi_cdc_multi_putc+0x16>
	}
	return true;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	08 95       	ret

00000830 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     830:	bc 01       	movw	r22, r24
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	b8 cf       	rjmp	.-144    	; 0x7a6 <udi_cdc_multi_putc>
}
     836:	08 95       	ret

00000838 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     838:	e0 91 78 22 	lds	r30, 0x2278
     83c:	f0 91 79 22 	lds	r31, 0x2279
     840:	01 90       	ld	r0, Z+
     842:	f0 81       	ld	r31, Z
     844:	e0 2d       	mov	r30, r0
     846:	22 81       	ldd	r18, Z+2	; 0x02
     848:	33 81       	ldd	r19, Z+3	; 0x03
     84a:	2e 0f       	add	r18, r30
     84c:	3f 1f       	adc	r19, r31
     84e:	fc 01       	movw	r30, r24
     850:	40 81       	ld	r20, Z
     852:	e4 0f       	add	r30, r20
     854:	f1 1d       	adc	r31, r1
     856:	e2 17       	cp	r30, r18
     858:	f3 07       	cpc	r31, r19
     85a:	a0 f4       	brcc	.+40     	; 0x884 <udc_next_desc_in_iface+0x4c>
     85c:	81 81       	ldd	r24, Z+1	; 0x01
     85e:	84 30       	cpi	r24, 0x04	; 4
     860:	a1 f0       	breq	.+40     	; 0x88a <udc_next_desc_in_iface+0x52>
     862:	86 13       	cpse	r24, r22
     864:	06 c0       	rjmp	.+12     	; 0x872 <udc_next_desc_in_iface+0x3a>
     866:	14 c0       	rjmp	.+40     	; 0x890 <udc_next_desc_in_iface+0x58>
     868:	81 81       	ldd	r24, Z+1	; 0x01
     86a:	84 30       	cpi	r24, 0x04	; 4
     86c:	a1 f0       	breq	.+40     	; 0x896 <udc_next_desc_in_iface+0x5e>
     86e:	86 17       	cp	r24, r22
     870:	a9 f0       	breq	.+42     	; 0x89c <udc_next_desc_in_iface+0x64>
     872:	80 81       	ld	r24, Z
     874:	e8 0f       	add	r30, r24
     876:	f1 1d       	adc	r31, r1
     878:	e2 17       	cp	r30, r18
     87a:	f3 07       	cpc	r31, r19
     87c:	a8 f3       	brcs	.-22     	; 0x868 <udc_next_desc_in_iface+0x30>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	08 95       	ret
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	08 95       	ret
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	08 95       	ret
     890:	8e 2f       	mov	r24, r30
     892:	9f 2f       	mov	r25, r31
     894:	08 95       	ret
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	08 95       	ret
     89c:	8e 2f       	mov	r24, r30
     89e:	9f 2f       	mov	r25, r31
     8a0:	08 95       	ret

000008a2 <udc_valid_address>:
     8a2:	80 91 23 24 	lds	r24, 0x2423
     8a6:	8f 77       	andi	r24, 0x7F	; 127
     8a8:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <udd_set_address>
     8ac:	08 95       	ret

000008ae <udc_update_iface_desc>:
     8ae:	90 91 7a 22 	lds	r25, 0x227A
     8b2:	99 23       	and	r25, r25
     8b4:	81 f1       	breq	.+96     	; 0x916 <udc_update_iface_desc+0x68>
     8b6:	e0 91 78 22 	lds	r30, 0x2278
     8ba:	f0 91 79 22 	lds	r31, 0x2279
     8be:	01 90       	ld	r0, Z+
     8c0:	f0 81       	ld	r31, Z
     8c2:	e0 2d       	mov	r30, r0
     8c4:	94 81       	ldd	r25, Z+4	; 0x04
     8c6:	89 17       	cp	r24, r25
     8c8:	40 f5       	brcc	.+80     	; 0x91a <udc_update_iface_desc+0x6c>
     8ca:	e0 93 76 22 	sts	0x2276, r30
     8ce:	f0 93 77 22 	sts	0x2277, r31
     8d2:	22 81       	ldd	r18, Z+2	; 0x02
     8d4:	33 81       	ldd	r19, Z+3	; 0x03
     8d6:	2e 0f       	add	r18, r30
     8d8:	3f 1f       	adc	r19, r31
     8da:	e2 17       	cp	r30, r18
     8dc:	f3 07       	cpc	r31, r19
     8de:	f8 f4       	brcc	.+62     	; 0x91e <udc_update_iface_desc+0x70>
     8e0:	91 81       	ldd	r25, Z+1	; 0x01
     8e2:	94 30       	cpi	r25, 0x04	; 4
     8e4:	61 f4       	brne	.+24     	; 0x8fe <udc_update_iface_desc+0x50>
     8e6:	92 81       	ldd	r25, Z+2	; 0x02
     8e8:	98 13       	cpse	r25, r24
     8ea:	09 c0       	rjmp	.+18     	; 0x8fe <udc_update_iface_desc+0x50>
     8ec:	93 81       	ldd	r25, Z+3	; 0x03
     8ee:	96 13       	cpse	r25, r22
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <udc_update_iface_desc+0x50>
     8f2:	e0 93 76 22 	sts	0x2276, r30
     8f6:	f0 93 77 22 	sts	0x2277, r31
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	08 95       	ret
     8fe:	90 81       	ld	r25, Z
     900:	e9 0f       	add	r30, r25
     902:	f1 1d       	adc	r31, r1
     904:	e2 17       	cp	r30, r18
     906:	f3 07       	cpc	r31, r19
     908:	58 f3       	brcs	.-42     	; 0x8e0 <udc_update_iface_desc+0x32>
     90a:	e0 93 76 22 	sts	0x2276, r30
     90e:	f0 93 77 22 	sts	0x2277, r31
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	08 95       	ret
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	08 95       	ret
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	08 95       	ret
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	08 95       	ret

00000922 <udc_iface_disable>:
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	c8 2f       	mov	r28, r24
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	be df       	rcall	.-132    	; 0x8ae <udc_update_iface_desc>
     932:	f8 2e       	mov	r15, r24
     934:	88 23       	and	r24, r24
     936:	81 f1       	breq	.+96     	; 0x998 <udc_iface_disable+0x76>
     938:	a0 91 78 22 	lds	r26, 0x2278
     93c:	b0 91 79 22 	lds	r27, 0x2279
     940:	ec 2f       	mov	r30, r28
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	12 96       	adiw	r26, 0x02	; 2
     94a:	2d 91       	ld	r18, X+
     94c:	3c 91       	ld	r19, X
     94e:	13 97       	sbiw	r26, 0x03	; 3
     950:	e2 0f       	add	r30, r18
     952:	f3 1f       	adc	r31, r19
     954:	00 81       	ld	r16, Z
     956:	11 81       	ldd	r17, Z+1	; 0x01
     958:	d8 01       	movw	r26, r16
     95a:	16 96       	adiw	r26, 0x06	; 6
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	17 97       	sbiw	r26, 0x07	; 7
     962:	09 95       	icall
     964:	68 2f       	mov	r22, r24
     966:	8c 2f       	mov	r24, r28
     968:	a2 df       	rcall	.-188    	; 0x8ae <udc_update_iface_desc>
     96a:	f8 2e       	mov	r15, r24
     96c:	88 23       	and	r24, r24
     96e:	a1 f0       	breq	.+40     	; 0x998 <udc_iface_disable+0x76>
     970:	c0 91 76 22 	lds	r28, 0x2276
     974:	d0 91 77 22 	lds	r29, 0x2277
     978:	65 e0       	ldi	r22, 0x05	; 5
     97a:	ce 01       	movw	r24, r28
     97c:	5d df       	rcall	.-326    	; 0x838 <udc_next_desc_in_iface>
     97e:	ec 01       	movw	r28, r24
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	21 f0       	breq	.+8      	; 0x98c <udc_iface_disable+0x6a>
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	0e 94 4f 13 	call	0x269e	; 0x269e <udd_ep_free>
     98a:	f6 cf       	rjmp	.-20     	; 0x978 <udc_iface_disable+0x56>
     98c:	d8 01       	movw	r26, r16
     98e:	12 96       	adiw	r26, 0x02	; 2
     990:	ed 91       	ld	r30, X+
     992:	fc 91       	ld	r31, X
     994:	13 97       	sbiw	r26, 0x03	; 3
     996:	09 95       	icall
     998:	8f 2d       	mov	r24, r15
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	08 95       	ret

000009a6 <udc_iface_enable>:
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	18 2f       	mov	r17, r24
     9ae:	7f df       	rcall	.-258    	; 0x8ae <udc_update_iface_desc>
     9b0:	88 23       	and	r24, r24
     9b2:	41 f1       	breq	.+80     	; 0xa04 <udc_iface_enable+0x5e>
     9b4:	c0 91 76 22 	lds	r28, 0x2276
     9b8:	d0 91 77 22 	lds	r29, 0x2277
     9bc:	65 e0       	ldi	r22, 0x05	; 5
     9be:	ce 01       	movw	r24, r28
     9c0:	3b df       	rcall	.-394    	; 0x838 <udc_next_desc_in_iface>
     9c2:	ec 01       	movw	r28, r24
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	49 f0       	breq	.+18     	; 0x9da <udc_iface_enable+0x34>
     9c8:	4c 81       	ldd	r20, Y+4	; 0x04
     9ca:	5d 81       	ldd	r21, Y+5	; 0x05
     9cc:	6b 81       	ldd	r22, Y+3	; 0x03
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <udd_ep_alloc>
     9d4:	81 11       	cpse	r24, r1
     9d6:	f2 cf       	rjmp	.-28     	; 0x9bc <udc_iface_enable+0x16>
     9d8:	15 c0       	rjmp	.+42     	; 0xa04 <udc_iface_enable+0x5e>
     9da:	a0 91 78 22 	lds	r26, 0x2278
     9de:	b0 91 79 22 	lds	r27, 0x2279
     9e2:	81 2f       	mov	r24, r17
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	12 96       	adiw	r26, 0x02	; 2
     9ec:	ed 91       	ld	r30, X+
     9ee:	fc 91       	ld	r31, X
     9f0:	13 97       	sbiw	r26, 0x03	; 3
     9f2:	e8 0f       	add	r30, r24
     9f4:	f9 1f       	adc	r31, r25
     9f6:	01 90       	ld	r0, Z+
     9f8:	f0 81       	ld	r31, Z
     9fa:	e0 2d       	mov	r30, r0
     9fc:	01 90       	ld	r0, Z+
     9fe:	f0 81       	ld	r31, Z
     a00:	e0 2d       	mov	r30, r0
     a02:	09 95       	icall
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	08 95       	ret

00000a0c <udc_start>:
     a0c:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <udd_enable>
     a10:	08 95       	ret

00000a12 <udc_reset>:
     a12:	cf 93       	push	r28
     a14:	80 91 7a 22 	lds	r24, 0x227A
     a18:	88 23       	and	r24, r24
     a1a:	c1 f0       	breq	.+48     	; 0xa4c <udc_reset+0x3a>
     a1c:	e0 91 78 22 	lds	r30, 0x2278
     a20:	f0 91 79 22 	lds	r31, 0x2279
     a24:	01 90       	ld	r0, Z+
     a26:	f0 81       	ld	r31, Z
     a28:	e0 2d       	mov	r30, r0
     a2a:	84 81       	ldd	r24, Z+4	; 0x04
     a2c:	88 23       	and	r24, r24
     a2e:	71 f0       	breq	.+28     	; 0xa4c <udc_reset+0x3a>
     a30:	c0 e0       	ldi	r28, 0x00	; 0
     a32:	8c 2f       	mov	r24, r28
     a34:	76 df       	rcall	.-276    	; 0x922 <udc_iface_disable>
     a36:	cf 5f       	subi	r28, 0xFF	; 255
     a38:	e0 91 78 22 	lds	r30, 0x2278
     a3c:	f0 91 79 22 	lds	r31, 0x2279
     a40:	01 90       	ld	r0, Z+
     a42:	f0 81       	ld	r31, Z
     a44:	e0 2d       	mov	r30, r0
     a46:	84 81       	ldd	r24, Z+4	; 0x04
     a48:	c8 17       	cp	r28, r24
     a4a:	98 f3       	brcs	.-26     	; 0xa32 <udc_reset+0x20>
     a4c:	10 92 7a 22 	sts	0x227A, r1
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	80 93 7b 22 	sts	0x227B, r24
     a58:	90 93 7c 22 	sts	0x227C, r25
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     a60:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     a62:	80 91 7a 22 	lds	r24, 0x227A
     a66:	88 23       	and	r24, r24
     a68:	41 f1       	breq	.+80     	; 0xaba <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a6a:	e0 91 78 22 	lds	r30, 0x2278
     a6e:	f0 91 79 22 	lds	r31, 0x2279
     a72:	a0 81       	ld	r26, Z
     a74:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	8c 91       	ld	r24, X
     a7a:	88 23       	and	r24, r24
     a7c:	f1 f0       	breq	.+60     	; 0xaba <udc_sof_notify+0x5a>
     a7e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     a80:	8c 2f       	mov	r24, r28
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	02 80       	ldd	r0, Z+2	; 0x02
     a8a:	f3 81       	ldd	r31, Z+3	; 0x03
     a8c:	e0 2d       	mov	r30, r0
     a8e:	e8 0f       	add	r30, r24
     a90:	f9 1f       	adc	r31, r25
     a92:	01 90       	ld	r0, Z+
     a94:	f0 81       	ld	r31, Z
     a96:	e0 2d       	mov	r30, r0
     a98:	00 84       	ldd	r0, Z+8	; 0x08
     a9a:	f1 85       	ldd	r31, Z+9	; 0x09
     a9c:	e0 2d       	mov	r30, r0
     a9e:	30 97       	sbiw	r30, 0x00	; 0
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     aa2:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     aa4:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     aa6:	e0 91 78 22 	lds	r30, 0x2278
     aaa:	f0 91 79 22 	lds	r31, 0x2279
     aae:	a0 81       	ld	r26, Z
     ab0:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ab2:	14 96       	adiw	r26, 0x04	; 4
     ab4:	8c 91       	ld	r24, X
     ab6:	c8 17       	cp	r28, r24
     ab8:	18 f3       	brcs	.-58     	; 0xa80 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     aca:	10 92 2b 24 	sts	0x242B, r1
     ace:	10 92 2c 24 	sts	0x242C, r1
	udd_g_ctrlreq.callback = NULL;
     ad2:	10 92 2d 24 	sts	0x242D, r1
     ad6:	10 92 2e 24 	sts	0x242E, r1
	udd_g_ctrlreq.over_under_run = NULL;
     ada:	10 92 2f 24 	sts	0x242F, r1
     ade:	10 92 30 24 	sts	0x2430, r1

	if (Udd_setup_is_in()) {
     ae2:	20 91 21 24 	lds	r18, 0x2421
     ae6:	22 23       	and	r18, r18
     ae8:	0c f0       	brlt	.+2      	; 0xaec <udc_process_setup+0x2e>
     aea:	72 c2       	rjmp	.+1252   	; 0xfd0 <udc_process_setup+0x512>
		if (udd_g_ctrlreq.req.wLength == 0) {
     aec:	80 91 27 24 	lds	r24, 0x2427
     af0:	90 91 28 24 	lds	r25, 0x2428
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	09 f0       	breq	.+2      	; 0xafa <udc_process_setup+0x3c>
     af8:	70 c2       	rjmp	.+1248   	; 0xfda <udc_process_setup+0x51c>
     afa:	66 c2       	rjmp	.+1228   	; 0xfc8 <udc_process_setup+0x50a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     afc:	2f 71       	andi	r18, 0x1F	; 31
     afe:	09 f0       	breq	.+2      	; 0xb02 <udc_process_setup+0x44>
     b00:	91 c0       	rjmp	.+290    	; 0xc24 <udc_process_setup+0x166>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b02:	30 91 22 24 	lds	r19, 0x2422
     b06:	36 30       	cpi	r19, 0x06	; 6
     b08:	89 f0       	breq	.+34     	; 0xb2c <udc_process_setup+0x6e>
     b0a:	38 30       	cpi	r19, 0x08	; 8
     b0c:	09 f4       	brne	.+2      	; 0xb10 <udc_process_setup+0x52>
     b0e:	7e c0       	rjmp	.+252    	; 0xc0c <udc_process_setup+0x14e>
     b10:	31 11       	cpse	r19, r1
     b12:	88 c0       	rjmp	.+272    	; 0xc24 <udc_process_setup+0x166>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     b14:	02 97       	sbiw	r24, 0x02	; 2
     b16:	41 f4       	brne	.+16     	; 0xb28 <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	8b e7       	ldi	r24, 0x7B	; 123
     b1e:	92 e2       	ldi	r25, 0x22	; 34
     b20:	0e 94 df 11 	call	0x23be	; 0x23be <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     b24:	01 e0       	ldi	r16, 0x01	; 1
     b26:	d3 c1       	rjmp	.+934    	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     b28:	00 e0       	ldi	r16, 0x00	; 0
     b2a:	d1 c1       	rjmp	.+930    	; 0xece <udc_process_setup+0x410>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     b2c:	20 91 23 24 	lds	r18, 0x2423
     b30:	30 91 24 24 	lds	r19, 0x2424

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     b34:	83 2f       	mov	r24, r19
     b36:	99 27       	eor	r25, r25
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	91 05       	cpc	r25, r1
     b3c:	a1 f0       	breq	.+40     	; 0xb66 <udc_process_setup+0xa8>
     b3e:	1c f4       	brge	.+6      	; 0xb46 <udc_process_setup+0x88>
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	39 f0       	breq	.+14     	; 0xb52 <udc_process_setup+0x94>
     b44:	59 c0       	rjmp	.+178    	; 0xbf8 <udc_process_setup+0x13a>
     b46:	83 30       	cpi	r24, 0x03	; 3
     b48:	91 05       	cpc	r25, r1
     b4a:	e9 f1       	breq	.+122    	; 0xbc6 <udc_process_setup+0x108>
     b4c:	0f 97       	sbiw	r24, 0x0f	; 15
     b4e:	69 f1       	breq	.+90     	; 0xbaa <udc_process_setup+0xec>
     b50:	53 c0       	rjmp	.+166    	; 0xbf8 <udc_process_setup+0x13a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     b52:	80 91 18 20 	lds	r24, 0x2018
     b56:	90 91 19 20 	lds	r25, 0x2019
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     b5a:	dc 01       	movw	r26, r24
     b5c:	6c 91       	ld	r22, X
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	0e 94 df 11 	call	0x23be	; 0x23be <udd_set_setup_payload>
     b64:	38 c0       	rjmp	.+112    	; 0xbd6 <udc_process_setup+0x118>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     b66:	e0 91 18 20 	lds	r30, 0x2018
     b6a:	f0 91 19 20 	lds	r31, 0x2019
     b6e:	81 89       	ldd	r24, Z+17	; 0x11
     b70:	28 17       	cp	r18, r24
     b72:	08 f0       	brcs	.+2      	; 0xb76 <udc_process_setup+0xb8>
     b74:	43 c0       	rjmp	.+134    	; 0xbfc <udc_process_setup+0x13e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     b76:	c9 01       	movw	r24, r18
     b78:	99 27       	eor	r25, r25
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	e0 91 1a 20 	lds	r30, 0x201A
     b86:	f0 91 1b 20 	lds	r31, 0x201B
     b8a:	e8 0f       	add	r30, r24
     b8c:	f9 1f       	adc	r31, r25
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     b92:	fc 01       	movw	r30, r24
     b94:	62 81       	ldd	r22, Z+2	; 0x02
     b96:	73 81       	ldd	r23, Z+3	; 0x03
     b98:	0e 94 df 11 	call	0x23be	; 0x23be <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     b9c:	e0 91 29 24 	lds	r30, 0x2429
     ba0:	f0 91 2a 24 	lds	r31, 0x242A
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	81 83       	std	Z+1, r24	; 0x01
     ba8:	16 c0       	rjmp	.+44     	; 0xbd6 <udc_process_setup+0x118>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     baa:	80 91 1c 20 	lds	r24, 0x201C
     bae:	90 91 1d 20 	lds	r25, 0x201D
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	29 f1       	breq	.+74     	; 0xc00 <udc_process_setup+0x142>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     bb6:	dc 01       	movw	r26, r24
     bb8:	12 96       	adiw	r26, 0x02	; 2
     bba:	6d 91       	ld	r22, X+
     bbc:	7c 91       	ld	r23, X
     bbe:	13 97       	sbiw	r26, 0x03	; 3
     bc0:	0e 94 df 11 	call	0x23be	; 0x23be <udd_set_setup_payload>
     bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <udc_process_setup+0x118>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     bc6:	21 11       	cpse	r18, r1
     bc8:	1d c0       	rjmp	.+58     	; 0xc04 <udc_process_setup+0x146>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     bca:	64 e0       	ldi	r22, 0x04	; 4
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	90 e2       	ldi	r25, 0x20	; 32
     bd2:	0e 94 df 11 	call	0x23be	; 0x23be <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     bd6:	80 91 27 24 	lds	r24, 0x2427
     bda:	90 91 28 24 	lds	r25, 0x2428
     bde:	20 91 2b 24 	lds	r18, 0x242B
     be2:	30 91 2c 24 	lds	r19, 0x242C
     be6:	82 17       	cp	r24, r18
     be8:	93 07       	cpc	r25, r19
     bea:	70 f4       	brcc	.+28     	; 0xc08 <udc_process_setup+0x14a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     bec:	80 93 2b 24 	sts	0x242B, r24
     bf0:	90 93 2c 24 	sts	0x242C, r25
	}
	return true;
     bf4:	01 e0       	ldi	r16, 0x01	; 1
     bf6:	6b c1       	rjmp	.+726    	; 0xece <udc_process_setup+0x410>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     bf8:	00 e0       	ldi	r16, 0x00	; 0
     bfa:	69 c1       	rjmp	.+722    	; 0xece <udc_process_setup+0x410>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	67 c1       	rjmp	.+718    	; 0xece <udc_process_setup+0x410>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     c00:	00 e0       	ldi	r16, 0x00	; 0
     c02:	65 c1       	rjmp	.+714    	; 0xece <udc_process_setup+0x410>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	63 c1       	rjmp	.+710    	; 0xece <udc_process_setup+0x410>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     c08:	01 e0       	ldi	r16, 0x01	; 1
     c0a:	61 c1       	rjmp	.+706    	; 0xece <udc_process_setup+0x410>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	41 f4       	brne	.+16     	; 0xc20 <udc_process_setup+0x162>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	8a e7       	ldi	r24, 0x7A	; 122
     c16:	92 e2       	ldi	r25, 0x22	; 34
     c18:	0e 94 df 11 	call	0x23be	; 0x23be <udd_set_setup_payload>
	return true;
     c1c:	01 e0       	ldi	r16, 0x01	; 1
     c1e:	57 c1       	rjmp	.+686    	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     c20:	00 e0       	ldi	r16, 0x00	; 0
     c22:	55 c1       	rjmp	.+682    	; 0xece <udc_process_setup+0x410>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c24:	21 30       	cpi	r18, 0x01	; 1
     c26:	09 f0       	breq	.+2      	; 0xc2a <udc_process_setup+0x16c>
     c28:	40 c0       	rjmp	.+128    	; 0xcaa <udc_process_setup+0x1ec>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c2a:	30 91 22 24 	lds	r19, 0x2422
     c2e:	3a 30       	cpi	r19, 0x0A	; 10
     c30:	e1 f5       	brne	.+120    	; 0xcaa <udc_process_setup+0x1ec>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	a1 f5       	brne	.+104    	; 0xc9e <udc_process_setup+0x1e0>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     c36:	80 91 7a 22 	lds	r24, 0x227A
     c3a:	88 23       	and	r24, r24
     c3c:	91 f1       	breq	.+100    	; 0xca2 <udc_process_setup+0x1e4>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     c3e:	c0 91 25 24 	lds	r28, 0x2425
     c42:	d0 91 26 24 	lds	r29, 0x2426
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     c46:	e0 90 78 22 	lds	r14, 0x2278
     c4a:	f0 90 79 22 	lds	r15, 0x2279
     c4e:	d7 01       	movw	r26, r14
     c50:	ed 91       	ld	r30, X+
     c52:	fc 91       	ld	r31, X
     c54:	84 81       	ldd	r24, Z+4	; 0x04
     c56:	c8 17       	cp	r28, r24
     c58:	30 f5       	brcc	.+76     	; 0xca6 <udc_process_setup+0x1e8>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	8c 2f       	mov	r24, r28
     c5e:	27 de       	rcall	.-946    	; 0x8ae <udc_update_iface_desc>
     c60:	08 2f       	mov	r16, r24
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <udc_process_setup+0x1aa>
     c66:	33 c1       	rjmp	.+614    	; 0xece <udc_process_setup+0x410>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     c68:	ce 01       	movw	r24, r28
     c6a:	99 27       	eor	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	d7 01       	movw	r26, r14
     c72:	12 96       	adiw	r26, 0x02	; 2
     c74:	ed 91       	ld	r30, X+
     c76:	fc 91       	ld	r31, X
     c78:	13 97       	sbiw	r26, 0x03	; 3
     c7a:	e8 0f       	add	r30, r24
     c7c:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     c7e:	01 90       	ld	r0, Z+
     c80:	f0 81       	ld	r31, Z
     c82:	e0 2d       	mov	r30, r0
     c84:	06 80       	ldd	r0, Z+6	; 0x06
     c86:	f7 81       	ldd	r31, Z+7	; 0x07
     c88:	e0 2d       	mov	r30, r0
     c8a:	09 95       	icall
     c8c:	80 93 75 22 	sts	0x2275, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	85 e7       	ldi	r24, 0x75	; 117
     c96:	92 e2       	ldi	r25, 0x22	; 34
     c98:	0e 94 df 11 	call	0x23be	; 0x23be <udd_set_setup_payload>
     c9c:	18 c1       	rjmp	.+560    	; 0xece <udc_process_setup+0x410>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	16 c1       	rjmp	.+556    	; 0xece <udc_process_setup+0x410>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	14 c1       	rjmp	.+552    	; 0xece <udc_process_setup+0x410>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     ca6:	00 e0       	ldi	r16, 0x00	; 0
     ca8:	12 c1       	rjmp	.+548    	; 0xece <udc_process_setup+0x410>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     caa:	22 30       	cpi	r18, 0x02	; 2
     cac:	09 f0       	breq	.+2      	; 0xcb0 <udc_process_setup+0x1f2>
     cae:	11 c1       	rjmp	.+546    	; 0xed2 <udc_process_setup+0x414>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     cb0:	20 91 22 24 	lds	r18, 0x2422
     cb4:	21 11       	cpse	r18, r1
     cb6:	06 c1       	rjmp	.+524    	; 0xec4 <udc_process_setup+0x406>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     cb8:	02 97       	sbiw	r24, 0x02	; 2
     cba:	89 f4       	brne	.+34     	; 0xcde <udc_process_setup+0x220>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     cbc:	80 91 25 24 	lds	r24, 0x2425
     cc0:	0e 94 49 12 	call	0x2492	; 0x2492 <udd_ep_is_halted>
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	80 93 73 22 	sts	0x2273, r24
     cca:	90 93 74 22 	sts	0x2274, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     cce:	62 e0       	ldi	r22, 0x02	; 2
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	83 e7       	ldi	r24, 0x73	; 115
     cd4:	92 e2       	ldi	r25, 0x22	; 34
     cd6:	0e 94 df 11 	call	0x23be	; 0x23be <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     cda:	01 e0       	ldi	r16, 0x01	; 1
     cdc:	f8 c0       	rjmp	.+496    	; 0xece <udc_process_setup+0x410>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     cde:	00 e0       	ldi	r16, 0x00	; 0
     ce0:	f6 c0       	rjmp	.+492    	; 0xece <udc_process_setup+0x410>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     ce2:	2f 71       	andi	r18, 0x1F	; 31
     ce4:	09 f0       	breq	.+2      	; 0xce8 <udc_process_setup+0x22a>
     ce6:	91 c0       	rjmp	.+290    	; 0xe0a <udc_process_setup+0x34c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     ce8:	80 91 22 24 	lds	r24, 0x2422
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	09 f4       	brne	.+2      	; 0xcf2 <udc_process_setup+0x234>
     cf0:	eb c0       	rjmp	.+470    	; 0xec8 <udc_process_setup+0x40a>
     cf2:	18 f4       	brcc	.+6      	; 0xcfa <udc_process_setup+0x23c>
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	b1 f0       	breq	.+44     	; 0xd24 <udc_process_setup+0x266>
     cf8:	88 c0       	rjmp	.+272    	; 0xe0a <udc_process_setup+0x34c>
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	19 f0       	breq	.+6      	; 0xd04 <udc_process_setup+0x246>
     cfe:	89 30       	cpi	r24, 0x09	; 9
     d00:	61 f1       	breq	.+88     	; 0xd5a <udc_process_setup+0x29c>
     d02:	83 c0       	rjmp	.+262    	; 0xe0a <udc_process_setup+0x34c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d04:	80 91 27 24 	lds	r24, 0x2427
     d08:	90 91 28 24 	lds	r25, 0x2428
     d0c:	89 2b       	or	r24, r25
     d0e:	41 f4       	brne	.+16     	; 0xd20 <udc_process_setup+0x262>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     d10:	81 e5       	ldi	r24, 0x51	; 81
     d12:	94 e0       	ldi	r25, 0x04	; 4
     d14:	80 93 2d 24 	sts	0x242D, r24
     d18:	90 93 2e 24 	sts	0x242E, r25
	return true;
     d1c:	01 e0       	ldi	r16, 0x01	; 1
     d1e:	d7 c0       	rjmp	.+430    	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d20:	00 e0       	ldi	r16, 0x00	; 0
     d22:	d5 c0       	rjmp	.+426    	; 0xece <udc_process_setup+0x410>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d24:	80 91 27 24 	lds	r24, 0x2427
     d28:	90 91 28 24 	lds	r25, 0x2428
     d2c:	89 2b       	or	r24, r25
     d2e:	89 f4       	brne	.+34     	; 0xd52 <udc_process_setup+0x294>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     d30:	80 91 23 24 	lds	r24, 0x2423
     d34:	90 91 24 24 	lds	r25, 0x2424
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	69 f4       	brne	.+26     	; 0xd56 <udc_process_setup+0x298>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     d3c:	80 91 7b 22 	lds	r24, 0x227B
     d40:	90 91 7c 22 	lds	r25, 0x227C
     d44:	8d 7f       	andi	r24, 0xFD	; 253
     d46:	80 93 7b 22 	sts	0x227B, r24
     d4a:	90 93 7c 22 	sts	0x227C, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     d4e:	01 e0       	ldi	r16, 0x01	; 1
     d50:	be c0       	rjmp	.+380    	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d52:	00 e0       	ldi	r16, 0x00	; 0
     d54:	bc c0       	rjmp	.+376    	; 0xece <udc_process_setup+0x410>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     d56:	00 e0       	ldi	r16, 0x00	; 0
     d58:	ba c0       	rjmp	.+372    	; 0xece <udc_process_setup+0x410>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     d5a:	80 91 27 24 	lds	r24, 0x2427
     d5e:	90 91 28 24 	lds	r25, 0x2428
     d62:	89 2b       	or	r24, r25
     d64:	09 f0       	breq	.+2      	; 0xd68 <udc_process_setup+0x2aa>
     d66:	47 c0       	rjmp	.+142    	; 0xdf6 <udc_process_setup+0x338>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     d68:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <udd_getaddress>
     d6c:	88 23       	and	r24, r24
     d6e:	09 f4       	brne	.+2      	; 0xd72 <udc_process_setup+0x2b4>
     d70:	44 c0       	rjmp	.+136    	; 0xdfa <udc_process_setup+0x33c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     d72:	20 91 23 24 	lds	r18, 0x2423
     d76:	30 91 24 24 	lds	r19, 0x2424
     d7a:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     d7c:	e0 91 18 20 	lds	r30, 0x2018
     d80:	f0 91 19 20 	lds	r31, 0x2019
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     d84:	81 89       	ldd	r24, Z+17	; 0x11
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	82 17       	cp	r24, r18
     d8a:	93 07       	cpc	r25, r19
     d8c:	c0 f1       	brcs	.+112    	; 0xdfe <udc_process_setup+0x340>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     d8e:	41 de       	rcall	.-894    	; 0xa12 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     d90:	80 91 23 24 	lds	r24, 0x2423
     d94:	90 91 24 24 	lds	r25, 0x2424
     d98:	80 93 7a 22 	sts	0x227A, r24
	if (udc_num_configuration == 0) {
     d9c:	88 23       	and	r24, r24
     d9e:	89 f1       	breq	.+98     	; 0xe02 <udc_process_setup+0x344>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     da0:	99 27       	eor	r25, r25
     da2:	81 50       	subi	r24, 0x01	; 1
     da4:	90 4c       	sbci	r25, 0xC0	; 192
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	e0 91 1a 20 	lds	r30, 0x201A
     db2:	f0 91 1b 20 	lds	r31, 0x201B
     db6:	e8 0f       	add	r30, r24
     db8:	f9 1f       	adc	r31, r25
     dba:	e0 93 78 22 	sts	0x2278, r30
     dbe:	f0 93 79 22 	sts	0x2279, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     dc2:	01 90       	ld	r0, Z+
     dc4:	f0 81       	ld	r31, Z
     dc6:	e0 2d       	mov	r30, r0
     dc8:	84 81       	ldd	r24, Z+4	; 0x04
     dca:	88 23       	and	r24, r24
     dcc:	e1 f0       	breq	.+56     	; 0xe06 <udc_process_setup+0x348>
     dce:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	8c 2f       	mov	r24, r28
     dd4:	e8 dd       	rcall	.-1072   	; 0x9a6 <udc_iface_enable>
     dd6:	08 2f       	mov	r16, r24
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <udc_process_setup+0x320>
     ddc:	78 c0       	rjmp	.+240    	; 0xece <udc_process_setup+0x410>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     dde:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     de0:	e0 91 78 22 	lds	r30, 0x2278
     de4:	f0 91 79 22 	lds	r31, 0x2279
     de8:	01 90       	ld	r0, Z+
     dea:	f0 81       	ld	r31, Z
     dec:	e0 2d       	mov	r30, r0
     dee:	84 81       	ldd	r24, Z+4	; 0x04
     df0:	c8 17       	cp	r28, r24
     df2:	70 f3       	brcs	.-36     	; 0xdd0 <udc_process_setup+0x312>
     df4:	6c c0       	rjmp	.+216    	; 0xece <udc_process_setup+0x410>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     df6:	00 e0       	ldi	r16, 0x00	; 0
     df8:	6a c0       	rjmp	.+212    	; 0xece <udc_process_setup+0x410>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     dfa:	00 e0       	ldi	r16, 0x00	; 0
     dfc:	68 c0       	rjmp	.+208    	; 0xece <udc_process_setup+0x410>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     dfe:	00 e0       	ldi	r16, 0x00	; 0
     e00:	66 c0       	rjmp	.+204    	; 0xece <udc_process_setup+0x410>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     e02:	01 e0       	ldi	r16, 0x01	; 1
     e04:	64 c0       	rjmp	.+200    	; 0xece <udc_process_setup+0x410>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     e06:	01 e0       	ldi	r16, 0x01	; 1
     e08:	62 c0       	rjmp	.+196    	; 0xece <udc_process_setup+0x410>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     e0a:	21 30       	cpi	r18, 0x01	; 1
     e0c:	09 f5       	brne	.+66     	; 0xe50 <udc_process_setup+0x392>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     e0e:	80 91 22 24 	lds	r24, 0x2422
     e12:	8b 30       	cpi	r24, 0x0B	; 11
     e14:	e9 f4       	brne	.+58     	; 0xe50 <udc_process_setup+0x392>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     e16:	80 91 27 24 	lds	r24, 0x2427
     e1a:	90 91 28 24 	lds	r25, 0x2428
     e1e:	89 2b       	or	r24, r25
     e20:	99 f4       	brne	.+38     	; 0xe48 <udc_process_setup+0x38a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     e22:	80 91 7a 22 	lds	r24, 0x227A
     e26:	88 23       	and	r24, r24
     e28:	89 f0       	breq	.+34     	; 0xe4c <udc_process_setup+0x38e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     e2a:	c0 91 25 24 	lds	r28, 0x2425
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     e2e:	d0 91 23 24 	lds	r29, 0x2423

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     e32:	8c 2f       	mov	r24, r28
     e34:	76 dd       	rcall	.-1300   	; 0x922 <udc_iface_disable>
     e36:	08 2f       	mov	r16, r24
     e38:	88 23       	and	r24, r24
     e3a:	09 f4       	brne	.+2      	; 0xe3e <udc_process_setup+0x380>
     e3c:	48 c0       	rjmp	.+144    	; 0xece <udc_process_setup+0x410>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     e3e:	6d 2f       	mov	r22, r29
     e40:	8c 2f       	mov	r24, r28
     e42:	b1 dd       	rcall	.-1182   	; 0x9a6 <udc_iface_enable>
     e44:	08 2f       	mov	r16, r24
     e46:	43 c0       	rjmp	.+134    	; 0xece <udc_process_setup+0x410>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	41 c0       	rjmp	.+130    	; 0xece <udc_process_setup+0x410>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e4c:	00 e0       	ldi	r16, 0x00	; 0
     e4e:	3f c0       	rjmp	.+126    	; 0xece <udc_process_setup+0x410>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e50:	22 30       	cpi	r18, 0x02	; 2
     e52:	09 f0       	breq	.+2      	; 0xe56 <udc_process_setup+0x398>
     e54:	3e c0       	rjmp	.+124    	; 0xed2 <udc_process_setup+0x414>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     e56:	80 91 22 24 	lds	r24, 0x2422
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	19 f0       	breq	.+6      	; 0xe64 <udc_process_setup+0x3a6>
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	b9 f0       	breq	.+46     	; 0xe90 <udc_process_setup+0x3d2>
     e62:	34 c0       	rjmp	.+104    	; 0xecc <udc_process_setup+0x40e>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e64:	80 91 27 24 	lds	r24, 0x2427
     e68:	90 91 28 24 	lds	r25, 0x2428
     e6c:	89 2b       	or	r24, r25
     e6e:	61 f4       	brne	.+24     	; 0xe88 <udc_process_setup+0x3ca>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     e70:	80 91 23 24 	lds	r24, 0x2423
     e74:	90 91 24 24 	lds	r25, 0x2424
     e78:	89 2b       	or	r24, r25
     e7a:	41 f4       	brne	.+16     	; 0xe8c <udc_process_setup+0x3ce>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     e7c:	80 91 25 24 	lds	r24, 0x2425
     e80:	0e 94 64 12 	call	0x24c8	; 0x24c8 <udd_ep_clear_halt>
     e84:	08 2f       	mov	r16, r24
     e86:	23 c0       	rjmp	.+70     	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	21 c0       	rjmp	.+66     	; 0xece <udc_process_setup+0x410>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     e8c:	00 e0       	ldi	r16, 0x00	; 0
     e8e:	1f c0       	rjmp	.+62     	; 0xece <udc_process_setup+0x410>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e90:	80 91 27 24 	lds	r24, 0x2427
     e94:	90 91 28 24 	lds	r25, 0x2428
     e98:	89 2b       	or	r24, r25
     e9a:	81 f4       	brne	.+32     	; 0xebc <udc_process_setup+0x3fe>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     e9c:	80 91 23 24 	lds	r24, 0x2423
     ea0:	90 91 24 24 	lds	r25, 0x2424
     ea4:	89 2b       	or	r24, r25
     ea6:	61 f4       	brne	.+24     	; 0xec0 <udc_process_setup+0x402>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     ea8:	c5 e2       	ldi	r28, 0x25	; 37
     eaa:	d4 e2       	ldi	r29, 0x24	; 36
     eac:	88 81       	ld	r24, Y
     eae:	0e 94 16 13 	call	0x262c	; 0x262c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     eb2:	88 81       	ld	r24, Y
     eb4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <udd_ep_set_halt>
     eb8:	08 2f       	mov	r16, r24
     eba:	09 c0       	rjmp	.+18     	; 0xece <udc_process_setup+0x410>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ebc:	00 e0       	ldi	r16, 0x00	; 0
     ebe:	07 c0       	rjmp	.+14     	; 0xece <udc_process_setup+0x410>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     ec0:	00 e0       	ldi	r16, 0x00	; 0
     ec2:	05 c0       	rjmp	.+10     	; 0xece <udc_process_setup+0x410>
				break;
			}
		}
#endif
	}
	return false;
     ec4:	00 e0       	ldi	r16, 0x00	; 0
     ec6:	03 c0       	rjmp	.+6      	; 0xece <udc_process_setup+0x410>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     ec8:	00 e0       	ldi	r16, 0x00	; 0
     eca:	01 c0       	rjmp	.+2      	; 0xece <udc_process_setup+0x410>
				break;
			}
		}
#endif
	}
	return false;
     ecc:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     ece:	01 11       	cpse	r16, r1
     ed0:	89 c0       	rjmp	.+274    	; 0xfe4 <udc_process_setup+0x526>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     ed2:	80 91 21 24 	lds	r24, 0x2421
     ed6:	8f 71       	andi	r24, 0x1F	; 31
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	c1 f5       	brne	.+112    	; 0xf4c <udc_process_setup+0x48e>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     edc:	80 91 7a 22 	lds	r24, 0x227A
     ee0:	88 23       	and	r24, r24
     ee2:	a1 f1       	breq	.+104    	; 0xf4c <udc_process_setup+0x48e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     ee4:	c0 91 25 24 	lds	r28, 0x2425
     ee8:	d0 91 26 24 	lds	r29, 0x2426
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     eec:	00 91 78 22 	lds	r16, 0x2278
     ef0:	10 91 79 22 	lds	r17, 0x2279
     ef4:	d8 01       	movw	r26, r16
     ef6:	ed 91       	ld	r30, X+
     ef8:	fc 91       	ld	r31, X
     efa:	84 81       	ldd	r24, Z+4	; 0x04
     efc:	c8 17       	cp	r28, r24
     efe:	30 f5       	brcc	.+76     	; 0xf4c <udc_process_setup+0x48e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	8c 2f       	mov	r24, r28
     f04:	d4 dc       	rcall	.-1624   	; 0x8ae <udc_update_iface_desc>
     f06:	88 23       	and	r24, r24
     f08:	09 f1       	breq	.+66     	; 0xf4c <udc_process_setup+0x48e>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f0a:	ce 01       	movw	r24, r28
     f0c:	99 27       	eor	r25, r25
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	d8 01       	movw	r26, r16
     f14:	12 96       	adiw	r26, 0x02	; 2
     f16:	ed 91       	ld	r30, X+
     f18:	fc 91       	ld	r31, X
     f1a:	13 97       	sbiw	r26, 0x03	; 3
     f1c:	e8 0f       	add	r30, r24
     f1e:	f9 1f       	adc	r31, r25
     f20:	00 81       	ld	r16, Z
     f22:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f24:	d8 01       	movw	r26, r16
     f26:	16 96       	adiw	r26, 0x06	; 6
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	17 97       	sbiw	r26, 0x07	; 7
     f2e:	09 95       	icall
     f30:	68 2f       	mov	r22, r24
     f32:	8c 2f       	mov	r24, r28
     f34:	bc dc       	rcall	.-1672   	; 0x8ae <udc_update_iface_desc>
     f36:	88 23       	and	r24, r24
     f38:	49 f0       	breq	.+18     	; 0xf4c <udc_process_setup+0x48e>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     f3a:	d8 01       	movw	r26, r16
     f3c:	14 96       	adiw	r26, 0x04	; 4
     f3e:	ed 91       	ld	r30, X+
     f40:	fc 91       	ld	r31, X
     f42:	15 97       	sbiw	r26, 0x05	; 5
     f44:	09 95       	icall
     f46:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     f48:	81 11       	cpse	r24, r1
     f4a:	4c c0       	rjmp	.+152    	; 0xfe4 <udc_process_setup+0x526>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     f4c:	80 91 21 24 	lds	r24, 0x2421
     f50:	8f 71       	andi	r24, 0x1F	; 31
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	d9 f5       	brne	.+118    	; 0xfcc <udc_process_setup+0x50e>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f56:	80 91 7a 22 	lds	r24, 0x227A
     f5a:	88 23       	and	r24, r24
     f5c:	89 f1       	breq	.+98     	; 0xfc0 <udc_process_setup+0x502>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f5e:	e0 91 78 22 	lds	r30, 0x2278
     f62:	f0 91 79 22 	lds	r31, 0x2279
     f66:	a0 81       	ld	r26, Z
     f68:	b1 81       	ldd	r27, Z+1	; 0x01
     f6a:	14 96       	adiw	r26, 0x04	; 4
     f6c:	8c 91       	ld	r24, X
     f6e:	88 23       	and	r24, r24
     f70:	49 f1       	breq	.+82     	; 0xfc4 <udc_process_setup+0x506>
     f72:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     f74:	21 2f       	mov	r18, r17
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	02 80       	ldd	r0, Z+2	; 0x02
     f7e:	f3 81       	ldd	r31, Z+3	; 0x03
     f80:	e0 2d       	mov	r30, r0
     f82:	e2 0f       	add	r30, r18
     f84:	f3 1f       	adc	r31, r19
     f86:	c0 81       	ld	r28, Z
     f88:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f8a:	ee 81       	ldd	r30, Y+6	; 0x06
     f8c:	ff 81       	ldd	r31, Y+7	; 0x07
     f8e:	09 95       	icall
     f90:	68 2f       	mov	r22, r24
     f92:	81 2f       	mov	r24, r17
     f94:	8c dc       	rcall	.-1768   	; 0x8ae <udc_update_iface_desc>
     f96:	08 2f       	mov	r16, r24
     f98:	88 23       	and	r24, r24
     f9a:	21 f1       	breq	.+72     	; 0xfe4 <udc_process_setup+0x526>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     f9c:	ec 81       	ldd	r30, Y+4	; 0x04
     f9e:	fd 81       	ldd	r31, Y+5	; 0x05
     fa0:	09 95       	icall
     fa2:	08 2f       	mov	r16, r24
     fa4:	81 11       	cpse	r24, r1
     fa6:	1e c0       	rjmp	.+60     	; 0xfe4 <udc_process_setup+0x526>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     fa8:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     faa:	e0 91 78 22 	lds	r30, 0x2278
     fae:	f0 91 79 22 	lds	r31, 0x2279
     fb2:	a0 81       	ld	r26, Z
     fb4:	b1 81       	ldd	r27, Z+1	; 0x01
     fb6:	14 96       	adiw	r26, 0x04	; 4
     fb8:	8c 91       	ld	r24, X
     fba:	18 17       	cp	r17, r24
     fbc:	d8 f2       	brcs	.-74     	; 0xf74 <udc_process_setup+0x4b6>
     fbe:	12 c0       	rjmp	.+36     	; 0xfe4 <udc_process_setup+0x526>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     fc0:	00 e0       	ldi	r16, 0x00	; 0
     fc2:	10 c0       	rjmp	.+32     	; 0xfe4 <udc_process_setup+0x526>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	0e c0       	rjmp	.+28     	; 0xfe4 <udc_process_setup+0x526>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     fc8:	00 e0       	ldi	r16, 0x00	; 0
     fca:	0c c0       	rjmp	.+24     	; 0xfe4 <udc_process_setup+0x526>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     fcc:	00 e0       	ldi	r16, 0x00	; 0
     fce:	0a c0       	rjmp	.+20     	; 0xfe4 <udc_process_setup+0x526>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     fd0:	82 2f       	mov	r24, r18
     fd2:	80 76       	andi	r24, 0x60	; 96
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <udc_process_setup+0x51a>
     fd6:	7d cf       	rjmp	.-262    	; 0xed2 <udc_process_setup+0x414>
     fd8:	84 ce       	rjmp	.-760    	; 0xce2 <udc_process_setup+0x224>
     fda:	32 2f       	mov	r19, r18
     fdc:	30 76       	andi	r19, 0x60	; 96
     fde:	09 f0       	breq	.+2      	; 0xfe2 <udc_process_setup+0x524>
     fe0:	78 cf       	rjmp	.-272    	; 0xed2 <udc_process_setup+0x414>
     fe2:	8c cd       	rjmp	.-1256   	; 0xafc <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     fe4:	80 2f       	mov	r24, r16
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	08 95       	ret

00000ff4 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    1016:	e0 91 af 22 	lds	r30, 0x22AF
    101a:	f0 91 b0 22 	lds	r31, 0x22B0
    101e:	30 97       	sbiw	r30, 0x00	; 0
    1020:	09 f0       	breq	.+2      	; 0x1024 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
    1022:	09 95       	icall
	}
}
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	6f 93       	push	r22
    105a:	7f 93       	push	r23
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    1068:	e0 91 ad 22 	lds	r30, 0x22AD
    106c:	f0 91 ae 22 	lds	r31, 0x22AE
    1070:	30 97       	sbiw	r30, 0x00	; 0
    1072:	09 f0       	breq	.+2      	; 0x1076 <__vector_15+0x30>
		tc_tcc0_err_callback();
    1074:	09 95       	icall
	}
}
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	bf 91       	pop	r27
    107c:	af 91       	pop	r26
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	7f 91       	pop	r23
    1084:	6f 91       	pop	r22
    1086:	5f 91       	pop	r21
    1088:	4f 91       	pop	r20
    108a:	3f 91       	pop	r19
    108c:	2f 91       	pop	r18
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    10ba:	e0 91 ab 22 	lds	r30, 0x22AB
    10be:	f0 91 ac 22 	lds	r31, 0x22AC
    10c2:	30 97       	sbiw	r30, 0x00	; 0
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_16+0x30>
		tc_tcc0_cca_callback();
    10c6:	09 95       	icall
	}
}
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    110c:	e0 91 a9 22 	lds	r30, 0x22A9
    1110:	f0 91 aa 22 	lds	r31, 0x22AA
    1114:	30 97       	sbiw	r30, 0x00	; 0
    1116:	09 f0       	breq	.+2      	; 0x111a <__vector_17+0x30>
		tc_tcc0_ccb_callback();
    1118:	09 95       	icall
	}
}
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	af 93       	push	r26
    1158:	bf 93       	push	r27
    115a:	ef 93       	push	r30
    115c:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    115e:	e0 91 a7 22 	lds	r30, 0x22A7
    1162:	f0 91 a8 22 	lds	r31, 0x22A8
    1166:	30 97       	sbiw	r30, 0x00	; 0
    1168:	09 f0       	breq	.+2      	; 0x116c <__vector_18+0x30>
		tc_tcc0_ccc_callback();
    116a:	09 95       	icall
	}
}
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    118e:	1f 92       	push	r1
    1190:	0f 92       	push	r0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	2f 93       	push	r18
    119a:	3f 93       	push	r19
    119c:	4f 93       	push	r20
    119e:	5f 93       	push	r21
    11a0:	6f 93       	push	r22
    11a2:	7f 93       	push	r23
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	af 93       	push	r26
    11aa:	bf 93       	push	r27
    11ac:	ef 93       	push	r30
    11ae:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    11b0:	e0 91 a5 22 	lds	r30, 0x22A5
    11b4:	f0 91 a6 22 	lds	r31, 0x22A6
    11b8:	30 97       	sbiw	r30, 0x00	; 0
    11ba:	09 f0       	breq	.+2      	; 0x11be <__vector_19+0x30>
		tc_tcc0_ccd_callback();
    11bc:	09 95       	icall
	}
}
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1202:	e0 91 a3 22 	lds	r30, 0x22A3
    1206:	f0 91 a4 22 	lds	r31, 0x22A4
    120a:	30 97       	sbiw	r30, 0x00	; 0
    120c:	09 f0       	breq	.+2      	; 0x1210 <__vector_20+0x30>
		tc_tcc1_ovf_callback();
    120e:	09 95       	icall
	}
}
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	0f 90       	pop	r0
    122e:	1f 90       	pop	r1
    1230:	18 95       	reti

00001232 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
    123c:	2f 93       	push	r18
    123e:	3f 93       	push	r19
    1240:	4f 93       	push	r20
    1242:	5f 93       	push	r21
    1244:	6f 93       	push	r22
    1246:	7f 93       	push	r23
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	af 93       	push	r26
    124e:	bf 93       	push	r27
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1254:	e0 91 a1 22 	lds	r30, 0x22A1
    1258:	f0 91 a2 22 	lds	r31, 0x22A2
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	09 f0       	breq	.+2      	; 0x1262 <__vector_21+0x30>
		tc_tcc1_err_callback();
    1260:	09 95       	icall
	}
}
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	bf 91       	pop	r27
    1268:	af 91       	pop	r26
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	7f 91       	pop	r23
    1270:	6f 91       	pop	r22
    1272:	5f 91       	pop	r21
    1274:	4f 91       	pop	r20
    1276:	3f 91       	pop	r19
    1278:	2f 91       	pop	r18
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    12a6:	e0 91 9f 22 	lds	r30, 0x229F
    12aa:	f0 91 a0 22 	lds	r31, 0x22A0
    12ae:	30 97       	sbiw	r30, 0x00	; 0
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <__vector_22+0x30>
		tc_tcc1_cca_callback();
    12b2:	09 95       	icall
	}
}
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    12d6:	1f 92       	push	r1
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
    12e0:	2f 93       	push	r18
    12e2:	3f 93       	push	r19
    12e4:	4f 93       	push	r20
    12e6:	5f 93       	push	r21
    12e8:	6f 93       	push	r22
    12ea:	7f 93       	push	r23
    12ec:	8f 93       	push	r24
    12ee:	9f 93       	push	r25
    12f0:	af 93       	push	r26
    12f2:	bf 93       	push	r27
    12f4:	ef 93       	push	r30
    12f6:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    12f8:	e0 91 9d 22 	lds	r30, 0x229D
    12fc:	f0 91 9e 22 	lds	r31, 0x229E
    1300:	30 97       	sbiw	r30, 0x00	; 0
    1302:	09 f0       	breq	.+2      	; 0x1306 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
    1304:	09 95       	icall
	}
}
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	bf 91       	pop	r27
    130c:	af 91       	pop	r26
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	7f 91       	pop	r23
    1314:	6f 91       	pop	r22
    1316:	5f 91       	pop	r21
    1318:	4f 91       	pop	r20
    131a:	3f 91       	pop	r19
    131c:	2f 91       	pop	r18
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    134a:	e0 91 9b 22 	lds	r30, 0x229B
    134e:	f0 91 9c 22 	lds	r31, 0x229C
    1352:	30 97       	sbiw	r30, 0x00	; 0
    1354:	09 f0       	breq	.+2      	; 0x1358 <__vector_77+0x30>
		tc_tcd0_ovf_callback();
    1356:	09 95       	icall
	}
}
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	bf 91       	pop	r27
    135e:	af 91       	pop	r26
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	7f 91       	pop	r23
    1366:	6f 91       	pop	r22
    1368:	5f 91       	pop	r21
    136a:	4f 91       	pop	r20
    136c:	3f 91       	pop	r19
    136e:	2f 91       	pop	r18
    1370:	0f 90       	pop	r0
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	0f 90       	pop	r0
    1376:	1f 90       	pop	r1
    1378:	18 95       	reti

0000137a <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    137a:	1f 92       	push	r1
    137c:	0f 92       	push	r0
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	2f 93       	push	r18
    1386:	3f 93       	push	r19
    1388:	4f 93       	push	r20
    138a:	5f 93       	push	r21
    138c:	6f 93       	push	r22
    138e:	7f 93       	push	r23
    1390:	8f 93       	push	r24
    1392:	9f 93       	push	r25
    1394:	af 93       	push	r26
    1396:	bf 93       	push	r27
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    139c:	e0 91 99 22 	lds	r30, 0x2299
    13a0:	f0 91 9a 22 	lds	r31, 0x229A
    13a4:	30 97       	sbiw	r30, 0x00	; 0
    13a6:	09 f0       	breq	.+2      	; 0x13aa <__vector_78+0x30>
		tc_tcd0_err_callback();
    13a8:	09 95       	icall
	}
}
    13aa:	ff 91       	pop	r31
    13ac:	ef 91       	pop	r30
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	7f 91       	pop	r23
    13b8:	6f 91       	pop	r22
    13ba:	5f 91       	pop	r21
    13bc:	4f 91       	pop	r20
    13be:	3f 91       	pop	r19
    13c0:	2f 91       	pop	r18
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    13cc:	1f 92       	push	r1
    13ce:	0f 92       	push	r0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	6f 93       	push	r22
    13e0:	7f 93       	push	r23
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    13ee:	e0 91 97 22 	lds	r30, 0x2297
    13f2:	f0 91 98 22 	lds	r31, 0x2298
    13f6:	30 97       	sbiw	r30, 0x00	; 0
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__vector_79+0x30>
		tc_tcd0_cca_callback();
    13fa:	09 95       	icall
	}
}
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    141e:	1f 92       	push	r1
    1420:	0f 92       	push	r0
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	0f 92       	push	r0
    1426:	11 24       	eor	r1, r1
    1428:	2f 93       	push	r18
    142a:	3f 93       	push	r19
    142c:	4f 93       	push	r20
    142e:	5f 93       	push	r21
    1430:	6f 93       	push	r22
    1432:	7f 93       	push	r23
    1434:	8f 93       	push	r24
    1436:	9f 93       	push	r25
    1438:	af 93       	push	r26
    143a:	bf 93       	push	r27
    143c:	ef 93       	push	r30
    143e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1440:	e0 91 95 22 	lds	r30, 0x2295
    1444:	f0 91 96 22 	lds	r31, 0x2296
    1448:	30 97       	sbiw	r30, 0x00	; 0
    144a:	09 f0       	breq	.+2      	; 0x144e <__vector_80+0x30>
		tc_tcd0_ccb_callback();
    144c:	09 95       	icall
	}
}
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1492:	e0 91 93 22 	lds	r30, 0x2293
    1496:	f0 91 94 22 	lds	r31, 0x2294
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__vector_81+0x30>
		tc_tcd0_ccc_callback();
    149e:	09 95       	icall
	}
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    14e4:	e0 91 91 22 	lds	r30, 0x2291
    14e8:	f0 91 92 22 	lds	r31, 0x2292
    14ec:	30 97       	sbiw	r30, 0x00	; 0
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
    14f0:	09 95       	icall
	}
}
    14f2:	ff 91       	pop	r31
    14f4:	ef 91       	pop	r30
    14f6:	bf 91       	pop	r27
    14f8:	af 91       	pop	r26
    14fa:	9f 91       	pop	r25
    14fc:	8f 91       	pop	r24
    14fe:	7f 91       	pop	r23
    1500:	6f 91       	pop	r22
    1502:	5f 91       	pop	r21
    1504:	4f 91       	pop	r20
    1506:	3f 91       	pop	r19
    1508:	2f 91       	pop	r18
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	0f 90       	pop	r0
    1510:	1f 90       	pop	r1
    1512:	18 95       	reti

00001514 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1514:	1f 92       	push	r1
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	2f 93       	push	r18
    1520:	3f 93       	push	r19
    1522:	4f 93       	push	r20
    1524:	5f 93       	push	r21
    1526:	6f 93       	push	r22
    1528:	7f 93       	push	r23
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	af 93       	push	r26
    1530:	bf 93       	push	r27
    1532:	ef 93       	push	r30
    1534:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1536:	e0 91 8f 22 	lds	r30, 0x228F
    153a:	f0 91 90 22 	lds	r31, 0x2290
    153e:	30 97       	sbiw	r30, 0x00	; 0
    1540:	09 f0       	breq	.+2      	; 0x1544 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
    1542:	09 95       	icall
	}
}
    1544:	ff 91       	pop	r31
    1546:	ef 91       	pop	r30
    1548:	bf 91       	pop	r27
    154a:	af 91       	pop	r26
    154c:	9f 91       	pop	r25
    154e:	8f 91       	pop	r24
    1550:	7f 91       	pop	r23
    1552:	6f 91       	pop	r22
    1554:	5f 91       	pop	r21
    1556:	4f 91       	pop	r20
    1558:	3f 91       	pop	r19
    155a:	2f 91       	pop	r18
    155c:	0f 90       	pop	r0
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	0f 90       	pop	r0
    1562:	1f 90       	pop	r1
    1564:	18 95       	reti

00001566 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1566:	1f 92       	push	r1
    1568:	0f 92       	push	r0
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	0f 92       	push	r0
    156e:	11 24       	eor	r1, r1
    1570:	2f 93       	push	r18
    1572:	3f 93       	push	r19
    1574:	4f 93       	push	r20
    1576:	5f 93       	push	r21
    1578:	6f 93       	push	r22
    157a:	7f 93       	push	r23
    157c:	8f 93       	push	r24
    157e:	9f 93       	push	r25
    1580:	af 93       	push	r26
    1582:	bf 93       	push	r27
    1584:	ef 93       	push	r30
    1586:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1588:	e0 91 8d 22 	lds	r30, 0x228D
    158c:	f0 91 8e 22 	lds	r31, 0x228E
    1590:	30 97       	sbiw	r30, 0x00	; 0
    1592:	09 f0       	breq	.+2      	; 0x1596 <__vector_84+0x30>
		tc_tcd1_err_callback();
    1594:	09 95       	icall
	}
}
    1596:	ff 91       	pop	r31
    1598:	ef 91       	pop	r30
    159a:	bf 91       	pop	r27
    159c:	af 91       	pop	r26
    159e:	9f 91       	pop	r25
    15a0:	8f 91       	pop	r24
    15a2:	7f 91       	pop	r23
    15a4:	6f 91       	pop	r22
    15a6:	5f 91       	pop	r21
    15a8:	4f 91       	pop	r20
    15aa:	3f 91       	pop	r19
    15ac:	2f 91       	pop	r18
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	0f 90       	pop	r0
    15b4:	1f 90       	pop	r1
    15b6:	18 95       	reti

000015b8 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    15b8:	1f 92       	push	r1
    15ba:	0f 92       	push	r0
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	0f 92       	push	r0
    15c0:	11 24       	eor	r1, r1
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    15da:	e0 91 8b 22 	lds	r30, 0x228B
    15de:	f0 91 8c 22 	lds	r31, 0x228C
    15e2:	30 97       	sbiw	r30, 0x00	; 0
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <__vector_85+0x30>
		tc_tcd1_cca_callback();
    15e6:	09 95       	icall
	}
}
    15e8:	ff 91       	pop	r31
    15ea:	ef 91       	pop	r30
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	7f 91       	pop	r23
    15f6:	6f 91       	pop	r22
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    162c:	e0 91 89 22 	lds	r30, 0x2289
    1630:	f0 91 8a 22 	lds	r31, 0x228A
    1634:	30 97       	sbiw	r30, 0x00	; 0
    1636:	09 f0       	breq	.+2      	; 0x163a <__vector_86+0x30>
		tc_tcd1_ccb_callback();
    1638:	09 95       	icall
	}
}
    163a:	ff 91       	pop	r31
    163c:	ef 91       	pop	r30
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	0f 90       	pop	r0
    1658:	1f 90       	pop	r1
    165a:	18 95       	reti

0000165c <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	2f 93       	push	r18
    1668:	3f 93       	push	r19
    166a:	4f 93       	push	r20
    166c:	5f 93       	push	r21
    166e:	6f 93       	push	r22
    1670:	7f 93       	push	r23
    1672:	8f 93       	push	r24
    1674:	9f 93       	push	r25
    1676:	af 93       	push	r26
    1678:	bf 93       	push	r27
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    167e:	e0 91 87 22 	lds	r30, 0x2287
    1682:	f0 91 88 22 	lds	r31, 0x2288
    1686:	30 97       	sbiw	r30, 0x00	; 0
    1688:	09 f0       	breq	.+2      	; 0x168c <__vector_47+0x30>
		tc_tce0_ovf_callback();
    168a:	09 95       	icall
	}
}
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	7f 91       	pop	r23
    169a:	6f 91       	pop	r22
    169c:	5f 91       	pop	r21
    169e:	4f 91       	pop	r20
    16a0:	3f 91       	pop	r19
    16a2:	2f 91       	pop	r18
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    16d0:	e0 91 85 22 	lds	r30, 0x2285
    16d4:	f0 91 86 22 	lds	r31, 0x2286
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	09 f0       	breq	.+2      	; 0x16de <__vector_48+0x30>
		tc_tce0_err_callback();
    16dc:	09 95       	icall
	}
}
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	4f 91       	pop	r20
    16f2:	3f 91       	pop	r19
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	0f 90       	pop	r0
    16fc:	1f 90       	pop	r1
    16fe:	18 95       	reti

00001700 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	2f 93       	push	r18
    170c:	3f 93       	push	r19
    170e:	4f 93       	push	r20
    1710:	5f 93       	push	r21
    1712:	6f 93       	push	r22
    1714:	7f 93       	push	r23
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	af 93       	push	r26
    171c:	bf 93       	push	r27
    171e:	ef 93       	push	r30
    1720:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1722:	e0 91 83 22 	lds	r30, 0x2283
    1726:	f0 91 84 22 	lds	r31, 0x2284
    172a:	30 97       	sbiw	r30, 0x00	; 0
    172c:	09 f0       	breq	.+2      	; 0x1730 <__vector_49+0x30>
		tc_tce0_cca_callback();
    172e:	09 95       	icall
	}
}
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	bf 91       	pop	r27
    1736:	af 91       	pop	r26
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	7f 91       	pop	r23
    173e:	6f 91       	pop	r22
    1740:	5f 91       	pop	r21
    1742:	4f 91       	pop	r20
    1744:	3f 91       	pop	r19
    1746:	2f 91       	pop	r18
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	2f 93       	push	r18
    175e:	3f 93       	push	r19
    1760:	4f 93       	push	r20
    1762:	5f 93       	push	r21
    1764:	6f 93       	push	r22
    1766:	7f 93       	push	r23
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	af 93       	push	r26
    176e:	bf 93       	push	r27
    1770:	ef 93       	push	r30
    1772:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1774:	e0 91 81 22 	lds	r30, 0x2281
    1778:	f0 91 82 22 	lds	r31, 0x2282
    177c:	30 97       	sbiw	r30, 0x00	; 0
    177e:	09 f0       	breq	.+2      	; 0x1782 <__vector_50+0x30>
		tc_tce0_ccb_callback();
    1780:	09 95       	icall
	}
}
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	2f 93       	push	r18
    17b0:	3f 93       	push	r19
    17b2:	4f 93       	push	r20
    17b4:	5f 93       	push	r21
    17b6:	6f 93       	push	r22
    17b8:	7f 93       	push	r23
    17ba:	8f 93       	push	r24
    17bc:	9f 93       	push	r25
    17be:	af 93       	push	r26
    17c0:	bf 93       	push	r27
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    17c6:	e0 91 7f 22 	lds	r30, 0x227F
    17ca:	f0 91 80 22 	lds	r31, 0x2280
    17ce:	30 97       	sbiw	r30, 0x00	; 0
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <__vector_51+0x30>
		tc_tce0_ccc_callback();
    17d2:	09 95       	icall
	}
}
    17d4:	ff 91       	pop	r31
    17d6:	ef 91       	pop	r30
    17d8:	bf 91       	pop	r27
    17da:	af 91       	pop	r26
    17dc:	9f 91       	pop	r25
    17de:	8f 91       	pop	r24
    17e0:	7f 91       	pop	r23
    17e2:	6f 91       	pop	r22
    17e4:	5f 91       	pop	r21
    17e6:	4f 91       	pop	r20
    17e8:	3f 91       	pop	r19
    17ea:	2f 91       	pop	r18
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	0f 90       	pop	r0
    17f2:	1f 90       	pop	r1
    17f4:	18 95       	reti

000017f6 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    17f6:	1f 92       	push	r1
    17f8:	0f 92       	push	r0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	2f 93       	push	r18
    1802:	3f 93       	push	r19
    1804:	4f 93       	push	r20
    1806:	5f 93       	push	r21
    1808:	6f 93       	push	r22
    180a:	7f 93       	push	r23
    180c:	8f 93       	push	r24
    180e:	9f 93       	push	r25
    1810:	af 93       	push	r26
    1812:	bf 93       	push	r27
    1814:	ef 93       	push	r30
    1816:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1818:	e0 91 7d 22 	lds	r30, 0x227D
    181c:	f0 91 7e 22 	lds	r31, 0x227E
    1820:	30 97       	sbiw	r30, 0x00	; 0
    1822:	09 f0       	breq	.+2      	; 0x1826 <__vector_52+0x30>
		tc_tce0_ccd_callback();
    1824:	09 95       	icall
	}
}
    1826:	ff 91       	pop	r31
    1828:	ef 91       	pop	r30
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	7f 91       	pop	r23
    1834:	6f 91       	pop	r22
    1836:	5f 91       	pop	r21
    1838:	4f 91       	pop	r20
    183a:	3f 91       	pop	r19
    183c:	2f 91       	pop	r18
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0
    1844:	1f 90       	pop	r1
    1846:	18 95       	reti

00001848 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1848:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    184a:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    184c:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    184e:	28 2f       	mov	r18, r24
    1850:	39 2f       	mov	r19, r25
    1852:	21 15       	cp	r18, r1
    1854:	88 e0       	ldi	r24, 0x08	; 8
    1856:	38 07       	cpc	r19, r24
    1858:	49 f4       	brne	.+18     	; 0x186c <tc_enable+0x24>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1862:	64 e0       	ldi	r22, 0x04	; 4
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
    186a:	35 c0       	rjmp	.+106    	; 0x18d6 <tc_enable+0x8e>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    186c:	20 34       	cpi	r18, 0x40	; 64
    186e:	88 e0       	ldi	r24, 0x08	; 8
    1870:	38 07       	cpc	r19, r24
    1872:	49 f4       	brne	.+18     	; 0x1886 <tc_enable+0x3e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    187c:	64 e0       	ldi	r22, 0x04	; 4
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
    1884:	28 c0       	rjmp	.+80     	; 0x18d6 <tc_enable+0x8e>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1886:	21 15       	cp	r18, r1
    1888:	89 e0       	ldi	r24, 0x09	; 9
    188a:	38 07       	cpc	r19, r24
    188c:	49 f4       	brne	.+18     	; 0x18a0 <tc_enable+0x58>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1896:	64 e0       	ldi	r22, 0x04	; 4
    1898:	84 e0       	ldi	r24, 0x04	; 4
    189a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
    189e:	1b c0       	rjmp	.+54     	; 0x18d6 <tc_enable+0x8e>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    18a0:	20 34       	cpi	r18, 0x40	; 64
    18a2:	89 e0       	ldi	r24, 0x09	; 9
    18a4:	38 07       	cpc	r19, r24
    18a6:	49 f4       	brne	.+18     	; 0x18ba <tc_enable+0x72>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    18a8:	62 e0       	ldi	r22, 0x02	; 2
    18aa:	84 e0       	ldi	r24, 0x04	; 4
    18ac:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    18b0:	64 e0       	ldi	r22, 0x04	; 4
    18b2:	84 e0       	ldi	r24, 0x04	; 4
    18b4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
    18b8:	0e c0       	rjmp	.+28     	; 0x18d6 <tc_enable+0x8e>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    18ba:	21 15       	cp	r18, r1
    18bc:	3a 40       	sbci	r19, 0x0A	; 10
    18be:	49 f4       	brne	.+18     	; 0x18d2 <tc_enable+0x8a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	85 e0       	ldi	r24, 0x05	; 5
    18c4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    18c8:	64 e0       	ldi	r22, 0x04	; 4
    18ca:	85 e0       	ldi	r24, 0x05	; 5
    18cc:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <tc_enable+0x8e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18d2:	cf bf       	out	0x3f, r28	; 63
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <tc_enable+0xa0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    18d6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    18d8:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    18da:	e2 e3       	ldi	r30, 0x32	; 50
    18dc:	f4 e2       	ldi	r31, 0x24	; 36
    18de:	90 81       	ld	r25, Z
    18e0:	9f 5f       	subi	r25, 0xFF	; 255
    18e2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18e4:	8f bf       	out	0x3f, r24	; 63
    18e6:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <twim_interrupt_handler>:
	PMIC.CTRL |= CONF_PMIC_INTLVL;

	cpu_irq_enable();

	return STATUS_OK;
}
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	e0 91 b1 22 	lds	r30, 0x22B1
    18f4:	f0 91 b2 22 	lds	r31, 0x22B2
    18f8:	84 81       	ldd	r24, Z+4	; 0x04
    18fa:	83 ff       	sbrs	r24, 3
    18fc:	08 c0       	rjmp	.+16     	; 0x190e <twim_interrupt_handler+0x22>
    18fe:	88 60       	ori	r24, 0x08	; 8
    1900:	84 83       	std	Z+4, r24	; 0x04
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	83 83       	std	Z+3, r24	; 0x03
    1906:	86 ef       	ldi	r24, 0xF6	; 246
    1908:	80 93 bb 22 	sts	0x22BB, r24
    190c:	89 c0       	rjmp	.+274    	; 0x1a20 <twim_interrupt_handler+0x134>
    190e:	98 2f       	mov	r25, r24
    1910:	94 71       	andi	r25, 0x14	; 20
    1912:	31 f0       	breq	.+12     	; 0x1920 <twim_interrupt_handler+0x34>
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	83 83       	std	Z+3, r24	; 0x03
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	80 93 bb 22 	sts	0x22BB, r24
    191e:	80 c0       	rjmp	.+256    	; 0x1a20 <twim_interrupt_handler+0x134>
    1920:	86 ff       	sbrs	r24, 6
    1922:	45 c0       	rjmp	.+138    	; 0x19ae <twim_interrupt_handler+0xc2>
    1924:	a0 91 b3 22 	lds	r26, 0x22B3
    1928:	b0 91 b4 22 	lds	r27, 0x22B4
    192c:	80 91 b5 22 	lds	r24, 0x22B5
    1930:	90 91 b6 22 	lds	r25, 0x22B6
    1934:	14 96       	adiw	r26, 0x04	; 4
    1936:	2d 91       	ld	r18, X+
    1938:	3c 91       	ld	r19, X
    193a:	15 97       	sbiw	r26, 0x05	; 5
    193c:	82 17       	cp	r24, r18
    193e:	93 07       	cpc	r25, r19
    1940:	6c f4       	brge	.+26     	; 0x195c <twim_interrupt_handler+0x70>
    1942:	9c 01       	movw	r18, r24
    1944:	2f 5f       	subi	r18, 0xFF	; 255
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	20 93 b5 22 	sts	0x22B5, r18
    194c:	30 93 b6 22 	sts	0x22B6, r19
    1950:	a8 0f       	add	r26, r24
    1952:	b9 1f       	adc	r27, r25
    1954:	11 96       	adiw	r26, 0x01	; 1
    1956:	8c 91       	ld	r24, X
    1958:	87 83       	std	Z+7, r24	; 0x07
    195a:	62 c0       	rjmp	.+196    	; 0x1a20 <twim_interrupt_handler+0x134>
    195c:	80 91 b7 22 	lds	r24, 0x22B7
    1960:	90 91 b8 22 	lds	r25, 0x22B8
    1964:	18 96       	adiw	r26, 0x08	; 8
    1966:	2d 91       	ld	r18, X+
    1968:	3c 91       	ld	r19, X
    196a:	19 97       	sbiw	r26, 0x09	; 9
    196c:	82 17       	cp	r24, r18
    196e:	93 07       	cpc	r25, r19
    1970:	c8 f4       	brcc	.+50     	; 0x19a4 <twim_interrupt_handler+0xb8>
    1972:	20 91 b9 22 	lds	r18, 0x22B9
    1976:	22 23       	and	r18, r18
    1978:	21 f0       	breq	.+8      	; 0x1982 <twim_interrupt_handler+0x96>
    197a:	86 81       	ldd	r24, Z+6	; 0x06
    197c:	81 60       	ori	r24, 0x01	; 1
    197e:	86 83       	std	Z+6, r24	; 0x06
    1980:	4f c0       	rjmp	.+158    	; 0x1a20 <twim_interrupt_handler+0x134>
    1982:	16 96       	adiw	r26, 0x06	; 6
    1984:	2d 91       	ld	r18, X+
    1986:	3c 91       	ld	r19, X
    1988:	17 97       	sbiw	r26, 0x07	; 7
    198a:	ac 01       	movw	r20, r24
    198c:	4f 5f       	subi	r20, 0xFF	; 255
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	40 93 b7 22 	sts	0x22B7, r20
    1994:	50 93 b8 22 	sts	0x22B8, r21
    1998:	d9 01       	movw	r26, r18
    199a:	a8 0f       	add	r26, r24
    199c:	b9 1f       	adc	r27, r25
    199e:	8c 91       	ld	r24, X
    19a0:	87 83       	std	Z+7, r24	; 0x07
    19a2:	3e c0       	rjmp	.+124    	; 0x1a20 <twim_interrupt_handler+0x134>
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	83 83       	std	Z+3, r24	; 0x03
    19a8:	10 92 bb 22 	sts	0x22BB, r1
    19ac:	39 c0       	rjmp	.+114    	; 0x1a20 <twim_interrupt_handler+0x134>
    19ae:	88 23       	and	r24, r24
    19b0:	a4 f5       	brge	.+104    	; 0x1a1a <twim_interrupt_handler+0x12e>
    19b2:	a0 91 b3 22 	lds	r26, 0x22B3
    19b6:	b0 91 b4 22 	lds	r27, 0x22B4
    19ba:	80 91 b7 22 	lds	r24, 0x22B7
    19be:	90 91 b8 22 	lds	r25, 0x22B8
    19c2:	18 96       	adiw	r26, 0x08	; 8
    19c4:	2d 91       	ld	r18, X+
    19c6:	3c 91       	ld	r19, X
    19c8:	19 97       	sbiw	r26, 0x09	; 9
    19ca:	82 17       	cp	r24, r18
    19cc:	93 07       	cpc	r25, r19
    19ce:	f8 f4       	brcc	.+62     	; 0x1a0e <twim_interrupt_handler+0x122>
    19d0:	16 96       	adiw	r26, 0x06	; 6
    19d2:	4d 91       	ld	r20, X+
    19d4:	5c 91       	ld	r21, X
    19d6:	17 97       	sbiw	r26, 0x07	; 7
    19d8:	9c 01       	movw	r18, r24
    19da:	2f 5f       	subi	r18, 0xFF	; 255
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	20 93 b7 22 	sts	0x22B7, r18
    19e2:	30 93 b8 22 	sts	0x22B8, r19
    19e6:	67 81       	ldd	r22, Z+7	; 0x07
    19e8:	ea 01       	movw	r28, r20
    19ea:	c8 0f       	add	r28, r24
    19ec:	d9 1f       	adc	r29, r25
    19ee:	68 83       	st	Y, r22
    19f0:	18 96       	adiw	r26, 0x08	; 8
    19f2:	8d 91       	ld	r24, X+
    19f4:	9c 91       	ld	r25, X
    19f6:	19 97       	sbiw	r26, 0x09	; 9
    19f8:	28 17       	cp	r18, r24
    19fa:	39 07       	cpc	r19, r25
    19fc:	18 f4       	brcc	.+6      	; 0x1a04 <twim_interrupt_handler+0x118>
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	83 83       	std	Z+3, r24	; 0x03
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <twim_interrupt_handler+0x134>
    1a04:	87 e0       	ldi	r24, 0x07	; 7
    1a06:	83 83       	std	Z+3, r24	; 0x03
    1a08:	10 92 bb 22 	sts	0x22BB, r1
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <twim_interrupt_handler+0x134>
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	83 83       	std	Z+3, r24	; 0x03
    1a12:	89 ef       	ldi	r24, 0xF9	; 249
    1a14:	80 93 bb 22 	sts	0x22BB, r24
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <twim_interrupt_handler+0x134>
    1a1a:	8b ef       	ldi	r24, 0xFB	; 251
    1a1c:	80 93 bb 22 	sts	0x22BB, r24
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <__vector_13>:
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	4f 93       	push	r20
    1a36:	5f 93       	push	r21
    1a38:	6f 93       	push	r22
    1a3a:	7f 93       	push	r23
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	af 93       	push	r26
    1a42:	bf 93       	push	r27
    1a44:	ef 93       	push	r30
    1a46:	ff 93       	push	r31
    1a48:	51 df       	rcall	.-350    	; 0x18ec <twim_interrupt_handler>
    1a4a:	ff 91       	pop	r31
    1a4c:	ef 91       	pop	r30
    1a4e:	bf 91       	pop	r27
    1a50:	af 91       	pop	r26
    1a52:	9f 91       	pop	r25
    1a54:	8f 91       	pop	r24
    1a56:	7f 91       	pop	r23
    1a58:	6f 91       	pop	r22
    1a5a:	5f 91       	pop	r21
    1a5c:	4f 91       	pop	r20
    1a5e:	3f 91       	pop	r19
    1a60:	2f 91       	pop	r18
    1a62:	0f 90       	pop	r0
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	0f 90       	pop	r0
    1a68:	1f 90       	pop	r1
    1a6a:	18 95       	reti

00001a6c <__vector_46>:
    1a6c:	1f 92       	push	r1
    1a6e:	0f 92       	push	r0
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	0f 92       	push	r0
    1a74:	11 24       	eor	r1, r1
    1a76:	2f 93       	push	r18
    1a78:	3f 93       	push	r19
    1a7a:	4f 93       	push	r20
    1a7c:	5f 93       	push	r21
    1a7e:	6f 93       	push	r22
    1a80:	7f 93       	push	r23
    1a82:	8f 93       	push	r24
    1a84:	9f 93       	push	r25
    1a86:	af 93       	push	r26
    1a88:	bf 93       	push	r27
    1a8a:	ef 93       	push	r30
    1a8c:	ff 93       	push	r31
    1a8e:	2e df       	rcall	.-420    	; 0x18ec <twim_interrupt_handler>
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <twi_master_transfer>:
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <twi_master_transfer+0x6>
    1ab6:	53 c0       	rjmp	.+166    	; 0x1b5e <twi_master_transfer+0xac>
    1ab8:	61 15       	cp	r22, r1
    1aba:	71 05       	cpc	r23, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <twi_master_transfer+0xe>
    1abe:	51 c0       	rjmp	.+162    	; 0x1b62 <twi_master_transfer+0xb0>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	32 85       	ldd	r19, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1ac4:	20 91 ba 22 	lds	r18, 0x22BA
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <twi_master_transfer+0x1c>

		if (no_wait) { return ERR_BUSY; }
    1aca:	31 11       	cpse	r19, r1
    1acc:	4c c0       	rjmp	.+152    	; 0x1b66 <twi_master_transfer+0xb4>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1ace:	21 11       	cpse	r18, r1
    1ad0:	fc cf       	rjmp	.-8      	; 0x1aca <twi_master_transfer+0x18>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ad2:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    1ad4:	f8 94       	cli
		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1ad6:	31 e0       	ldi	r19, 0x01	; 1
    1ad8:	30 93 ba 22 	sts	0x22BA, r19
	transfer.status = OPERATION_IN_PROGRESS;
    1adc:	30 e8       	ldi	r19, 0x80	; 128
    1ade:	30 93 bb 22 	sts	0x22BB, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ae2:	2f bf       	out	0x3f, r18	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1ae4:	80 93 b1 22 	sts	0x22B1, r24
    1ae8:	90 93 b2 22 	sts	0x22B2, r25
		transfer.pkg         = (twi_package_t *) package;
    1aec:	60 93 b3 22 	sts	0x22B3, r22
    1af0:	70 93 b4 22 	sts	0x22B4, r23
		transfer.addr_count  = 0;
    1af4:	10 92 b5 22 	sts	0x22B5, r1
    1af8:	10 92 b6 22 	sts	0x22B6, r1
		transfer.data_count  = 0;
    1afc:	10 92 b7 22 	sts	0x22B7, r1
    1b00:	10 92 b8 22 	sts	0x22B8, r1
		transfer.read        = read;
    1b04:	40 93 b9 22 	sts	0x22B9, r20

		uint8_t const chip = (package->chip) << 1;
    1b08:	fb 01       	movw	r30, r22
    1b0a:	20 81       	ld	r18, Z
    1b0c:	52 2f       	mov	r21, r18
    1b0e:	55 0f       	add	r21, r21

		if (package->addr_length || (false == read)) {
    1b10:	24 81       	ldd	r18, Z+4	; 0x04
    1b12:	35 81       	ldd	r19, Z+5	; 0x05
    1b14:	23 2b       	or	r18, r19
    1b16:	11 f4       	brne	.+4      	; 0x1b1c <twi_master_transfer+0x6a>
    1b18:	41 11       	cpse	r20, r1
    1b1a:	03 c0       	rjmp	.+6      	; 0x1b22 <twi_master_transfer+0x70>
			transfer.bus->MASTER.ADDR = chip;
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	56 83       	std	Z+6, r21	; 0x06
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <twi_master_transfer+0x76>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    1b22:	51 60       	ori	r21, 0x01	; 1
    1b24:	fc 01       	movw	r30, r24
    1b26:	56 83       	std	Z+6, r21	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    1b28:	eb eb       	ldi	r30, 0xBB	; 187
    1b2a:	f2 e2       	ldi	r31, 0x22	; 34
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 38       	cpi	r24, 0x80	; 128
    1b30:	e9 f3       	breq	.-6      	; 0x1b2c <twi_master_transfer+0x7a>

	while (! twim_idle(transfer.bus)) { barrier(); }
    1b32:	e0 91 b1 22 	lds	r30, 0x22B1
    1b36:	f0 91 b2 22 	lds	r31, 0x22B2
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1b3a:	84 81       	ldd	r24, Z+4	; 0x04
    1b3c:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	49 f0       	breq	.+18     	; 0x1b54 <twi_master_transfer+0xa2>
    1b42:	a1 eb       	ldi	r26, 0xB1	; 177
    1b44:	b2 e2       	ldi	r27, 0x22	; 34
    1b46:	ed 91       	ld	r30, X+
    1b48:	fc 91       	ld	r31, X
    1b4a:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    1b4c:	84 81       	ldd	r24, Z+4	; 0x04
    1b4e:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	c9 f7       	brne	.-14     	; 0x1b46 <twi_master_transfer+0x94>

	status_code_t const status = transfer.status;
    1b54:	80 91 bb 22 	lds	r24, 0x22BB

	transfer.locked = false;
    1b58:	10 92 ba 22 	sts	0x22BA, r1
    1b5c:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1b5e:	88 ef       	ldi	r24, 0xF8	; 248
    1b60:	08 95       	ret
    1b62:	88 ef       	ldi	r24, 0xF8	; 248
    1b64:	08 95       	ret
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1b66:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1b68:	08 95       	ret

00001b6a <TWI_SlaveInitializeDriver>:
 *  \param processDataFunction  Pointer to the function that handles incoming data.
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
    1b6a:	fc 01       	movw	r30, r24
	twi->interface = module;
    1b6c:	60 83       	st	Z, r22
    1b6e:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
    1b70:	42 83       	std	Z+2, r20	; 0x02
    1b72:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
    1b74:	14 8a       	std	Z+20, r1	; 0x14
	twi->bytesSent = 0;
    1b76:	15 8a       	std	Z+21, r1	; 0x15
	twi->status = TWIS_STATUS_READY;
    1b78:	16 8a       	std	Z+22, r1	; 0x16
	twi->result = TWIS_RESULT_UNKNOWN;
    1b7a:	17 8a       	std	Z+23, r1	; 0x17
	twi->abort = false;
    1b7c:	10 8e       	std	Z+24, r1	; 0x18
    1b7e:	08 95       	ret

00001b80 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
    1b80:	dc 01       	movw	r26, r24
    1b82:	ed 91       	ld	r30, X+
    1b84:	fc 91       	ld	r31, X
    1b86:	11 97       	sbiw	r26, 0x01	; 1
    1b88:	48 63       	ori	r20, 0x38	; 56
    1b8a:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
    1b8c:	ed 91       	ld	r30, X+
    1b8e:	fc 91       	ld	r31, X
    1b90:	66 0f       	add	r22, r22
    1b92:	63 87       	std	Z+11, r22	; 0x0b
    1b94:	08 95       	ret

00001b96 <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occurs.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
    1b96:	fc 01       	movw	r30, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
    1b98:	80 8d       	ldd	r24, Z+24	; 0x18
    1b9a:	88 23       	and	r24, r24
    1b9c:	51 f0       	breq	.+20     	; 0x1bb2 <TWI_SlaveAddressMatchHandler+0x1c>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    1b9e:	a0 81       	ld	r26, Z
    1ba0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	19 96       	adiw	r26, 0x09	; 9
    1ba6:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    1ba8:	86 e0       	ldi	r24, 0x06	; 6
    1baa:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1bac:	16 8a       	std	Z+22, r1	; 0x16
{
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
		twi->abort = false;
    1bae:	10 8e       	std	Z+24, r1	; 0x18
    1bb0:	08 95       	ret
	} else {
		twi->status = TWIS_STATUS_BUSY;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	86 8b       	std	Z+22, r24	; 0x16
		twi->result = TWIS_RESULT_UNKNOWN;
    1bb6:	17 8a       	std	Z+23, r1	; 0x17

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    1bb8:	a0 81       	ld	r26, Z
    1bba:	b1 81       	ldd	r27, Z+1	; 0x01
    1bbc:	18 96       	adiw	r26, 0x08	; 8
    1bbe:	8c 91       	ld	r24, X
    1bc0:	18 97       	sbiw	r26, 0x08	; 8
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    1bc2:	8b 7f       	andi	r24, 0xFB	; 251
    1bc4:	18 96       	adiw	r26, 0x08	; 8
    1bc6:	8c 93       	st	X, r24

		twi->bytesReceived = 0;
    1bc8:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
    1bca:	15 8a       	std	Z+21, r1	; 0x15

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    1bcc:	01 90       	ld	r0, Z+
    1bce:	f0 81       	ld	r31, Z
    1bd0:	e0 2d       	mov	r30, r0
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	81 87       	std	Z+9, r24	; 0x09
    1bd6:	08 95       	ret

00001bd8 <TWI_SlaveStopHandler>:
/*! \brief TWI stop condition interrupt handler.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
    1bd8:	fc 01       	movw	r30, r24
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    1bda:	a0 81       	ld	r26, Z
    1bdc:	b1 81       	ldd	r27, Z+1	; 0x01
    1bde:	18 96       	adiw	r26, 0x08	; 8
    1be0:	8c 91       	ld	r24, X
    1be2:	18 97       	sbiw	r26, 0x08	; 8
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    1be4:	8b 7f       	andi	r24, 0xFB	; 251
    1be6:	18 96       	adiw	r26, 0x08	; 8
    1be8:	8c 93       	st	X, r24

	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    1bea:	a0 81       	ld	r26, Z
    1bec:	b1 81       	ldd	r27, Z+1	; 0x01
    1bee:	1a 96       	adiw	r26, 0x0a	; 10
    1bf0:	8c 91       	ld	r24, X
    1bf2:	1a 97       	sbiw	r26, 0x0a	; 10
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
    1bf4:	80 64       	ori	r24, 0x40	; 64
    1bf6:	1a 96       	adiw	r26, 0x0a	; 10
    1bf8:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1bfe:	16 8a       	std	Z+22, r1	; 0x16
    1c00:	08 95       	ret

00001c02 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    1c08:	e8 81       	ld	r30, Y
    1c0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c0c:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
    1c0e:	84 60       	ori	r24, 0x04	; 4
    1c10:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
    1c12:	8c 89       	ldd	r24, Y+20	; 0x14
    1c14:	88 30       	cpi	r24, 0x08	; 8
    1c16:	f8 f4       	brcc	.+62     	; 0x1c56 <TWI_SlaveReadHandler+0x54>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
    1c18:	e8 81       	ld	r30, Y
    1c1a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c1c:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
    1c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c20:	fe 01       	movw	r30, r28
    1c22:	e9 0f       	add	r30, r25
    1c24:	f1 1d       	adc	r31, r1
    1c26:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
    1c28:	ea 81       	ldd	r30, Y+2	; 0x02
    1c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2c:	09 95       	icall

		twi->bytesReceived++;
    1c2e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c30:	8f 5f       	subi	r24, 0xFF	; 255
    1c32:	8c 8b       	std	Y+20, r24	; 0x14

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
    1c34:	88 8d       	ldd	r24, Y+24	; 0x18
    1c36:	88 23       	and	r24, r24
    1c38:	49 f0       	breq	.+18     	; 0x1c4c <TWI_SlaveReadHandler+0x4a>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    1c3a:	e8 81       	ld	r30, Y
    1c3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	81 87       	std	Z+9, r24	; 0x09
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    1c42:	86 e0       	ldi	r24, 0x06	; 6
    1c44:	8f 8b       	std	Y+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1c46:	1e 8a       	std	Y+22, r1	; 0x16
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
			twi->abort = false;
    1c48:	18 8e       	std	Y+24, r1	; 0x18
    1c4a:	0c c0       	rjmp	.+24     	; 0x1c64 <TWI_SlaveReadHandler+0x62>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    1c4c:	e8 81       	ld	r30, Y
    1c4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	81 87       	std	Z+9, r24	; 0x09
    1c54:	07 c0       	rjmp	.+14     	; 0x1c64 <TWI_SlaveReadHandler+0x62>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
    1c56:	e8 81       	ld	r30, Y
    1c58:	f9 81       	ldd	r31, Y+1	; 0x01
    1c5a:	86 e0       	ldi	r24, 0x06	; 6
    1c5c:	81 87       	std	Z+9, r24	; 0x09
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	8f 8b       	std	Y+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1c62:	1e 8a       	std	Y+22, r1	; 0x16
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
	}
}
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
    1c6a:	fc 01       	movw	r30, r24
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
    1c6c:	85 89       	ldd	r24, Z+21	; 0x15
    1c6e:	88 23       	and	r24, r24
    1c70:	71 f0       	breq	.+28     	; 0x1c8e <TWI_SlaveWriteHandler+0x24>
    1c72:	a0 81       	ld	r26, Z
    1c74:	b1 81       	ldd	r27, Z+1	; 0x01
    1c76:	1a 96       	adiw	r26, 0x0a	; 10
    1c78:	8c 91       	ld	r24, X
    1c7a:	1a 97       	sbiw	r26, 0x0a	; 10
    1c7c:	84 ff       	sbrs	r24, 4
    1c7e:	07 c0       	rjmp	.+14     	; 0x1c8e <TWI_SlaveWriteHandler+0x24>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	19 96       	adiw	r26, 0x09	; 9
    1c84:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1c8a:	16 8a       	std	Z+22, r1	; 0x16
    1c8c:	08 95       	ret
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
    1c8e:	85 89       	ldd	r24, Z+21	; 0x15
    1c90:	88 30       	cpi	r24, 0x08	; 8
    1c92:	98 f4       	brcc	.+38     	; 0x1cba <TWI_SlaveWriteHandler+0x50>
			uint8_t data = twi->sendData[twi->bytesSent];
    1c94:	85 89       	ldd	r24, Z+21	; 0x15
    1c96:	df 01       	movw	r26, r30
    1c98:	a8 0f       	add	r26, r24
    1c9a:	b1 1d       	adc	r27, r1
    1c9c:	1c 96       	adiw	r26, 0x0c	; 12
    1c9e:	8c 91       	ld	r24, X
			twi->interface->SLAVE.DATA = data;
    1ca0:	a0 81       	ld	r26, Z
    1ca2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ca4:	1c 96       	adiw	r26, 0x0c	; 12
    1ca6:	8c 93       	st	X, r24
			twi->bytesSent++;
    1ca8:	85 89       	ldd	r24, Z+21	; 0x15
    1caa:	8f 5f       	subi	r24, 0xFF	; 255
    1cac:	85 8b       	std	Z+21, r24	; 0x15

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    1cae:	01 90       	ld	r0, Z+
    1cb0:	f0 81       	ld	r31, Z
    1cb2:	e0 2d       	mov	r30, r0
    1cb4:	83 e0       	ldi	r24, 0x03	; 3
    1cb6:	81 87       	std	Z+9, r24	; 0x09
    1cb8:	08 95       	ret
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    1cba:	a0 81       	ld	r26, Z
    1cbc:	b1 81       	ldd	r27, Z+1	; 0x01
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	19 96       	adiw	r26, 0x09	; 9
    1cc2:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    1cc4:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1cc6:	16 8a       	std	Z+22, r1	; 0x16
    1cc8:	08 95       	ret

00001cca <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
    1cca:	dc 01       	movw	r26, r24
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	22 85       	ldd	r18, Z+10	; 0x0a
    1cd2:	21 ff       	sbrs	r18, 1
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <TWI_SlaveDataHandler+0x10>
		TWI_SlaveWriteHandler(twi);
    1cd6:	c9 cf       	rjmp	.-110    	; 0x1c6a <TWI_SlaveWriteHandler>
    1cd8:	08 95       	ret
	} else {
		TWI_SlaveReadHandler(twi);
    1cda:	93 cf       	rjmp	.-218    	; 0x1c02 <TWI_SlaveReadHandler>
    1cdc:	08 95       	ret

00001cde <TWI_SlaveInterruptHandler>:
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
    1cde:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    1ce0:	a0 81       	ld	r26, Z
    1ce2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ce4:	1a 96       	adiw	r26, 0x0a	; 10
    1ce6:	8c 91       	ld	r24, X

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
    1ce8:	82 ff       	sbrs	r24, 2
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <TWI_SlaveInterruptHandler+0x1a>
		twi->bytesReceived = 0;
    1cec:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
    1cee:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_BUS_ERROR;
    1cf0:	84 e0       	ldi	r24, 0x04	; 4
    1cf2:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
    1cf4:	16 8a       	std	Z+22, r1	; 0x16
    1cf6:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
    1cf8:	83 ff       	sbrs	r24, 3
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <TWI_SlaveInterruptHandler+0x2a>
		twi->bytesReceived = 0;
    1cfc:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
    1cfe:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
    1d00:	83 e0       	ldi	r24, 0x03	; 3
    1d02:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
    1d04:	16 8a       	std	Z+22, r1	; 0x16
    1d06:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
    1d08:	28 2f       	mov	r18, r24
    1d0a:	20 74       	andi	r18, 0x40	; 64
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	91 74       	andi	r25, 0x41	; 65
    1d10:	91 34       	cpi	r25, 0x41	; 65
    1d12:	19 f4       	brne	.+6      	; 0x1d1a <TWI_SlaveInterruptHandler+0x3c>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
    1d14:	cf 01       	movw	r24, r30
    1d16:	3f cf       	rjmp	.-386    	; 0x1b96 <TWI_SlaveAddressMatchHandler>
    1d18:	08 95       	ret
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
    1d1a:	22 23       	and	r18, r18
    1d1c:	19 f0       	breq	.+6      	; 0x1d24 <TWI_SlaveInterruptHandler+0x46>
		TWI_SlaveStopHandler(twi);
    1d1e:	cf 01       	movw	r24, r30
    1d20:	5b cf       	rjmp	.-330    	; 0x1bd8 <TWI_SlaveStopHandler>
    1d22:	08 95       	ret
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
    1d24:	88 23       	and	r24, r24
    1d26:	1c f4       	brge	.+6      	; 0x1d2e <TWI_SlaveInterruptHandler+0x50>
		TWI_SlaveDataHandler(twi);
    1d28:	cf 01       	movw	r24, r30
    1d2a:	cf cf       	rjmp	.-98     	; 0x1cca <TWI_SlaveDataHandler>
    1d2c:	08 95       	ret
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    1d2e:	85 e0       	ldi	r24, 0x05	; 5
    1d30:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1d32:	16 8a       	std	Z+22, r1	; 0x16
    1d34:	08 95       	ret

00001d36 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1d36:	81 11       	cpse	r24, r1
    1d38:	18 c0       	rjmp	.+48     	; 0x1d6a <udd_sleep_mode+0x34>
    1d3a:	90 91 e8 23 	lds	r25, 0x23E8
    1d3e:	99 23       	and	r25, r25
    1d40:	89 f0       	breq	.+34     	; 0x1d64 <udd_sleep_mode+0x2e>
    1d42:	9f b7       	in	r25, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	e2 e3       	ldi	r30, 0x32	; 50
    1d48:	f4 e2       	ldi	r31, 0x24	; 36
    1d4a:	20 81       	ld	r18, Z
    1d4c:	21 50       	subi	r18, 0x01	; 1
    1d4e:	20 83       	st	Z, r18
    1d50:	9f bf       	out	0x3f, r25	; 63
    1d52:	08 c0       	rjmp	.+16     	; 0x1d64 <udd_sleep_mode+0x2e>
    1d54:	9f b7       	in	r25, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	e2 e3       	ldi	r30, 0x32	; 50
    1d5a:	f4 e2       	ldi	r31, 0x24	; 36
    1d5c:	20 81       	ld	r18, Z
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	20 83       	st	Z, r18
    1d62:	9f bf       	out	0x3f, r25	; 63
    1d64:	80 93 e8 23 	sts	0x23E8, r24
    1d68:	08 95       	ret
    1d6a:	90 91 e8 23 	lds	r25, 0x23E8
    1d6e:	99 23       	and	r25, r25
    1d70:	89 f3       	breq	.-30     	; 0x1d54 <udd_sleep_mode+0x1e>
    1d72:	f8 cf       	rjmp	.-16     	; 0x1d64 <udd_sleep_mode+0x2e>

00001d74 <udd_ctrl_init>:
    1d74:	0f 93       	push	r16
    1d76:	e8 ec       	ldi	r30, 0xC8	; 200
    1d78:	f4 e0       	ldi	r31, 0x04	; 4
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 7d       	andi	r24, 0xDF	; 223
    1d7e:	80 83       	st	Z, r24
    1d80:	80 81       	ld	r24, Z
    1d82:	8f 7d       	andi	r24, 0xDF	; 223
    1d84:	80 83       	st	Z, r24
    1d86:	ec eb       	ldi	r30, 0xBC	; 188
    1d88:	f3 e2       	ldi	r31, 0x23	; 35
    1d8a:	02 e0       	ldi	r16, 0x02	; 2
    1d8c:	05 93       	las	Z, r16
    1d8e:	10 92 be 23 	sts	0x23BE, r1
    1d92:	10 92 bf 23 	sts	0x23BF, r1
    1d96:	00 e2       	ldi	r16, 0x20	; 32
    1d98:	06 93       	lac	Z, r16
    1d9a:	00 e4       	ldi	r16, 0x40	; 64
    1d9c:	06 93       	lac	Z, r16
    1d9e:	e4 eb       	ldi	r30, 0xB4	; 180
    1da0:	f3 e2       	ldi	r31, 0x23	; 35
    1da2:	00 e2       	ldi	r16, 0x20	; 32
    1da4:	06 93       	lac	Z, r16
    1da6:	00 e4       	ldi	r16, 0x40	; 64
    1da8:	06 93       	lac	Z, r16
    1daa:	10 92 2d 24 	sts	0x242D, r1
    1dae:	10 92 2e 24 	sts	0x242E, r1
    1db2:	10 92 2f 24 	sts	0x242F, r1
    1db6:	10 92 30 24 	sts	0x2430, r1
    1dba:	10 92 2b 24 	sts	0x242B, r1
    1dbe:	10 92 2c 24 	sts	0x242C, r1
    1dc2:	10 92 a5 23 	sts	0x23A5, r1
    1dc6:	0f 91       	pop	r16
    1dc8:	08 95       	ret

00001dca <udd_ctrl_stall_data>:
    1dca:	0f 93       	push	r16
    1dcc:	85 e0       	ldi	r24, 0x05	; 5
    1dce:	80 93 a5 23 	sts	0x23A5, r24
    1dd2:	ed eb       	ldi	r30, 0xBD	; 189
    1dd4:	f3 e2       	ldi	r31, 0x23	; 35
    1dd6:	04 e0       	ldi	r16, 0x04	; 4
    1dd8:	05 93       	las	Z, r16
    1dda:	e5 eb       	ldi	r30, 0xB5	; 181
    1ddc:	f3 e2       	ldi	r31, 0x23	; 35
    1dde:	04 e0       	ldi	r16, 0x04	; 4
    1de0:	05 93       	las	Z, r16
    1de2:	0f 91       	pop	r16
    1de4:	08 95       	ret

00001de6 <udd_ctrl_send_zlp_in>:
    1de6:	0f 93       	push	r16
    1de8:	83 e0       	ldi	r24, 0x03	; 3
    1dea:	80 93 a5 23 	sts	0x23A5, r24
    1dee:	10 92 be 23 	sts	0x23BE, r1
    1df2:	10 92 bf 23 	sts	0x23BF, r1
    1df6:	ec eb       	ldi	r30, 0xBC	; 188
    1df8:	f3 e2       	ldi	r31, 0x23	; 35
    1dfa:	02 e0       	ldi	r16, 0x02	; 2
    1dfc:	06 93       	lac	Z, r16
    1dfe:	0f 91       	pop	r16
    1e00:	08 95       	ret

00001e02 <udd_ctrl_endofrequest>:
    1e02:	e0 91 2d 24 	lds	r30, 0x242D
    1e06:	f0 91 2e 24 	lds	r31, 0x242E
    1e0a:	30 97       	sbiw	r30, 0x00	; 0
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <udd_ctrl_endofrequest+0xe>
    1e0e:	09 95       	icall
    1e10:	08 95       	ret

00001e12 <udd_ctrl_in_sent>:
    1e12:	0f 93       	push	r16
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	80 91 a5 23 	lds	r24, 0x23A5
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <udd_ctrl_in_sent+0x14>
    1e20:	f0 df       	rcall	.-32     	; 0x1e02 <udd_ctrl_endofrequest>
    1e22:	a8 df       	rcall	.-176    	; 0x1d74 <udd_ctrl_init>
    1e24:	60 c0       	rjmp	.+192    	; 0x1ee6 <udd_ctrl_in_sent+0xd4>
    1e26:	80 91 a1 23 	lds	r24, 0x23A1
    1e2a:	90 91 a2 23 	lds	r25, 0x23A2
    1e2e:	c0 91 2b 24 	lds	r28, 0x242B
    1e32:	d0 91 2c 24 	lds	r29, 0x242C
    1e36:	c8 1b       	sub	r28, r24
    1e38:	d9 0b       	sbc	r29, r25
    1e3a:	71 f5       	brne	.+92     	; 0x1e98 <udd_ctrl_in_sent+0x86>
    1e3c:	20 91 a3 23 	lds	r18, 0x23A3
    1e40:	30 91 a4 23 	lds	r19, 0x23A4
    1e44:	82 0f       	add	r24, r18
    1e46:	93 1f       	adc	r25, r19
    1e48:	80 93 a3 23 	sts	0x23A3, r24
    1e4c:	90 93 a4 23 	sts	0x23A4, r25
    1e50:	20 91 27 24 	lds	r18, 0x2427
    1e54:	30 91 28 24 	lds	r19, 0x2428
    1e58:	82 17       	cp	r24, r18
    1e5a:	93 07       	cpc	r25, r19
    1e5c:	21 f0       	breq	.+8      	; 0x1e66 <udd_ctrl_in_sent+0x54>
    1e5e:	80 91 bc 22 	lds	r24, 0x22BC
    1e62:	88 23       	and	r24, r24
    1e64:	41 f0       	breq	.+16     	; 0x1e76 <udd_ctrl_in_sent+0x64>
    1e66:	84 e0       	ldi	r24, 0x04	; 4
    1e68:	80 93 a5 23 	sts	0x23A5, r24
    1e6c:	e4 eb       	ldi	r30, 0xB4	; 180
    1e6e:	f3 e2       	ldi	r31, 0x23	; 35
    1e70:	02 e0       	ldi	r16, 0x02	; 2
    1e72:	06 93       	lac	Z, r16
    1e74:	38 c0       	rjmp	.+112    	; 0x1ee6 <udd_ctrl_in_sent+0xd4>
    1e76:	e0 91 2f 24 	lds	r30, 0x242F
    1e7a:	f0 91 30 24 	lds	r31, 0x2430
    1e7e:	30 97       	sbiw	r30, 0x00	; 0
    1e80:	99 f0       	breq	.+38     	; 0x1ea8 <udd_ctrl_in_sent+0x96>
    1e82:	09 95       	icall
    1e84:	88 23       	and	r24, r24
    1e86:	81 f0       	breq	.+32     	; 0x1ea8 <udd_ctrl_in_sent+0x96>
    1e88:	10 92 a1 23 	sts	0x23A1, r1
    1e8c:	10 92 a2 23 	sts	0x23A2, r1
    1e90:	c0 91 2b 24 	lds	r28, 0x242B
    1e94:	d0 91 2c 24 	lds	r29, 0x242C
    1e98:	c0 34       	cpi	r28, 0x40	; 64
    1e9a:	d1 05       	cpc	r29, r1
    1e9c:	28 f0       	brcs	.+10     	; 0x1ea8 <udd_ctrl_in_sent+0x96>
    1e9e:	10 92 bc 22 	sts	0x22BC, r1
    1ea2:	c0 e4       	ldi	r28, 0x40	; 64
    1ea4:	d0 e0       	ldi	r29, 0x00	; 0
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <udd_ctrl_in_sent+0x9c>
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	80 93 bc 22 	sts	0x22BC, r24
    1eae:	c0 93 be 23 	sts	0x23BE, r28
    1eb2:	d0 93 bf 23 	sts	0x23BF, r29
    1eb6:	80 91 a1 23 	lds	r24, 0x23A1
    1eba:	90 91 a2 23 	lds	r25, 0x23A2
    1ebe:	20 91 29 24 	lds	r18, 0x2429
    1ec2:	30 91 2a 24 	lds	r19, 0x242A
    1ec6:	28 0f       	add	r18, r24
    1ec8:	39 1f       	adc	r19, r25
    1eca:	20 93 c0 23 	sts	0x23C0, r18
    1ece:	30 93 c1 23 	sts	0x23C1, r19
    1ed2:	c8 0f       	add	r28, r24
    1ed4:	d9 1f       	adc	r29, r25
    1ed6:	c0 93 a1 23 	sts	0x23A1, r28
    1eda:	d0 93 a2 23 	sts	0x23A2, r29
    1ede:	ec eb       	ldi	r30, 0xBC	; 188
    1ee0:	f3 e2       	ldi	r31, 0x23	; 35
    1ee2:	02 e0       	ldi	r16, 0x02	; 2
    1ee4:	06 93       	lac	Z, r16
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	0f 91       	pop	r16
    1eec:	08 95       	ret

00001eee <udd_ep_get_size>:
    1eee:	fc 01       	movw	r30, r24
    1ef0:	81 81       	ldd	r24, Z+1	; 0x01
    1ef2:	87 70       	andi	r24, 0x07	; 7
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	31 97       	sbiw	r30, 0x01	; 1
    1efa:	e7 30       	cpi	r30, 0x07	; 7
    1efc:	f1 05       	cpc	r31, r1
    1efe:	20 f4       	brcc	.+8      	; 0x1f08 <udd_ep_get_size+0x1a>
    1f00:	e2 50       	subi	r30, 0x02	; 2
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	0c 94 57 27 	jmp	0x4eae	; 0x4eae <__tablejump2__>
    1f08:	88 e0       	ldi	r24, 0x08	; 8
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	08 95       	ret
    1f0e:	80 e2       	ldi	r24, 0x20	; 32
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	08 95       	ret
    1f14:	80 e4       	ldi	r24, 0x40	; 64
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	08 95       	ret
    1f1a:	80 e8       	ldi	r24, 0x80	; 128
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	08 95       	ret
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	08 95       	ret
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	92 e0       	ldi	r25, 0x02	; 2
    1f2a:	08 95       	ret
    1f2c:	8f ef       	ldi	r24, 0xFF	; 255
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	08 95       	ret
    1f32:	80 e1       	ldi	r24, 0x10	; 16
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	08 95       	ret

00001f38 <udd_ep_get_job>:
    1f38:	28 2f       	mov	r18, r24
    1f3a:	2f 70       	andi	r18, 0x0F	; 15
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	22 0f       	add	r18, r18
    1f40:	33 1f       	adc	r19, r19
    1f42:	99 27       	eor	r25, r25
    1f44:	87 fd       	sbrc	r24, 7
    1f46:	90 95       	com	r25
    1f48:	88 27       	eor	r24, r24
    1f4a:	99 0f       	add	r25, r25
    1f4c:	88 1f       	adc	r24, r24
    1f4e:	99 27       	eor	r25, r25
    1f50:	82 0f       	add	r24, r18
    1f52:	93 1f       	adc	r25, r19
    1f54:	02 97       	sbiw	r24, 0x02	; 2
    1f56:	9c 01       	movw	r18, r24
    1f58:	22 0f       	add	r18, r18
    1f5a:	33 1f       	adc	r19, r19
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	22 0f       	add	r18, r18
    1f62:	33 1f       	adc	r19, r19
    1f64:	82 0f       	add	r24, r18
    1f66:	93 1f       	adc	r25, r19
    1f68:	83 5c       	subi	r24, 0xC3	; 195
    1f6a:	9c 4d       	sbci	r25, 0xDC	; 220
    1f6c:	08 95       	ret

00001f6e <udd_ctrl_interrupt_tc_setup>:
    1f6e:	0f 93       	push	r16
    1f70:	cf 93       	push	r28
    1f72:	80 91 cc 04 	lds	r24, 0x04CC
    1f76:	80 ff       	sbrs	r24, 0
    1f78:	63 c0       	rjmp	.+198    	; 0x2040 <udd_ctrl_interrupt_tc_setup+0xd2>
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	80 93 cc 04 	sts	0x04CC, r24
    1f80:	e4 eb       	ldi	r30, 0xB4	; 180
    1f82:	f3 e2       	ldi	r31, 0x23	; 35
    1f84:	00 e8       	ldi	r16, 0x80	; 128
    1f86:	06 93       	lac	Z, r16
    1f88:	ec eb       	ldi	r30, 0xBC	; 188
    1f8a:	f3 e2       	ldi	r31, 0x23	; 35
    1f8c:	00 e8       	ldi	r16, 0x80	; 128
    1f8e:	06 93       	lac	Z, r16
    1f90:	80 93 ca 04 	sts	0x04CA, r24
    1f94:	e4 eb       	ldi	r30, 0xB4	; 180
    1f96:	f3 e2       	ldi	r31, 0x23	; 35
    1f98:	00 e1       	ldi	r16, 0x10	; 16
    1f9a:	06 93       	lac	Z, r16
    1f9c:	80 91 a5 23 	lds	r24, 0x23A5
    1fa0:	88 23       	and	r24, r24
    1fa2:	29 f0       	breq	.+10     	; 0x1fae <udd_ctrl_interrupt_tc_setup+0x40>
    1fa4:	83 50       	subi	r24, 0x03	; 3
    1fa6:	82 30       	cpi	r24, 0x02	; 2
    1fa8:	08 f4       	brcc	.+2      	; 0x1fac <udd_ctrl_interrupt_tc_setup+0x3e>
    1faa:	2b df       	rcall	.-426    	; 0x1e02 <udd_ctrl_endofrequest>
    1fac:	e3 de       	rcall	.-570    	; 0x1d74 <udd_ctrl_init>
    1fae:	80 91 b6 23 	lds	r24, 0x23B6
    1fb2:	90 91 b7 23 	lds	r25, 0x23B7
    1fb6:	08 97       	sbiw	r24, 0x08	; 8
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <udd_ctrl_interrupt_tc_setup+0x4e>
    1fba:	44 c0       	rjmp	.+136    	; 0x2044 <udd_ctrl_interrupt_tc_setup+0xd6>
    1fbc:	88 e0       	ldi	r24, 0x08	; 8
    1fbe:	e1 e6       	ldi	r30, 0x61	; 97
    1fc0:	f3 e2       	ldi	r31, 0x23	; 35
    1fc2:	a1 e2       	ldi	r26, 0x21	; 33
    1fc4:	b4 e2       	ldi	r27, 0x24	; 36
    1fc6:	01 90       	ld	r0, Z+
    1fc8:	0d 92       	st	X+, r0
    1fca:	8a 95       	dec	r24
    1fcc:	e1 f7       	brne	.-8      	; 0x1fc6 <udd_ctrl_interrupt_tc_setup+0x58>
    1fce:	e8 ec       	ldi	r30, 0xC8	; 200
    1fd0:	f4 e0       	ldi	r31, 0x04	; 4
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 62       	ori	r24, 0x20	; 32
    1fd6:	80 83       	st	Z, r24
    1fd8:	80 81       	ld	r24, Z
    1fda:	80 62       	ori	r24, 0x20	; 32
    1fdc:	80 83       	st	Z, r24
    1fde:	0e 94 5f 05 	call	0xabe	; 0xabe <udc_process_setup>
    1fe2:	c8 2f       	mov	r28, r24
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <udd_ctrl_interrupt_tc_setup+0x80>
    1fe8:	f0 de       	rcall	.-544    	; 0x1dca <udd_ctrl_stall_data>
    1fea:	c1 e0       	ldi	r28, 0x01	; 1
    1fec:	2c c0       	rjmp	.+88     	; 0x2046 <udd_ctrl_interrupt_tc_setup+0xd8>
    1fee:	80 91 21 24 	lds	r24, 0x2421
    1ff2:	88 23       	and	r24, r24
    1ff4:	6c f4       	brge	.+26     	; 0x2010 <udd_ctrl_interrupt_tc_setup+0xa2>
    1ff6:	10 92 a3 23 	sts	0x23A3, r1
    1ffa:	10 92 a4 23 	sts	0x23A4, r1
    1ffe:	10 92 a1 23 	sts	0x23A1, r1
    2002:	10 92 a2 23 	sts	0x23A2, r1
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	80 93 a5 23 	sts	0x23A5, r24
    200c:	02 df       	rcall	.-508    	; 0x1e12 <udd_ctrl_in_sent>
    200e:	1b c0       	rjmp	.+54     	; 0x2046 <udd_ctrl_interrupt_tc_setup+0xd8>
    2010:	20 91 27 24 	lds	r18, 0x2427
    2014:	30 91 28 24 	lds	r19, 0x2428
    2018:	23 2b       	or	r18, r19
    201a:	11 f4       	brne	.+4      	; 0x2020 <udd_ctrl_interrupt_tc_setup+0xb2>
    201c:	e4 de       	rcall	.-568    	; 0x1de6 <udd_ctrl_send_zlp_in>
    201e:	13 c0       	rjmp	.+38     	; 0x2046 <udd_ctrl_interrupt_tc_setup+0xd8>
    2020:	10 92 a3 23 	sts	0x23A3, r1
    2024:	10 92 a4 23 	sts	0x23A4, r1
    2028:	10 92 a1 23 	sts	0x23A1, r1
    202c:	10 92 a2 23 	sts	0x23A2, r1
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	80 93 a5 23 	sts	0x23A5, r24
    2036:	e4 eb       	ldi	r30, 0xB4	; 180
    2038:	f3 e2       	ldi	r31, 0x23	; 35
    203a:	02 e0       	ldi	r16, 0x02	; 2
    203c:	06 93       	lac	Z, r16
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <udd_ctrl_interrupt_tc_setup+0xd8>
    2040:	c0 e0       	ldi	r28, 0x00	; 0
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <udd_ctrl_interrupt_tc_setup+0xd8>
    2044:	c1 e0       	ldi	r28, 0x01	; 1
    2046:	8c 2f       	mov	r24, r28
    2048:	cf 91       	pop	r28
    204a:	0f 91       	pop	r16
    204c:	08 95       	ret

0000204e <udd_ep_trans_complet>:
    204e:	bf 92       	push	r11
    2050:	cf 92       	push	r12
    2052:	df 92       	push	r13
    2054:	ef 92       	push	r14
    2056:	ff 92       	push	r15
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	b8 2e       	mov	r11, r24
    2062:	6a df       	rcall	.-300    	; 0x1f38 <udd_ep_get_job>
    2064:	ec 01       	movw	r28, r24
    2066:	1b 2d       	mov	r17, r11
    2068:	11 1f       	adc	r17, r17
    206a:	11 27       	eor	r17, r17
    206c:	11 1f       	adc	r17, r17
    206e:	8b 2d       	mov	r24, r11
    2070:	8f 70       	andi	r24, 0x0F	; 15
    2072:	e8 2e       	mov	r14, r24
    2074:	f1 2c       	mov	r15, r1
    2076:	ee 0c       	add	r14, r14
    2078:	ff 1c       	adc	r15, r15
    207a:	e1 0e       	add	r14, r17
    207c:	f1 1c       	adc	r15, r1
    207e:	c7 01       	movw	r24, r14
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	9c 01       	movw	r18, r24
    208e:	2c 54       	subi	r18, 0x4C	; 76
    2090:	3c 4d       	sbci	r19, 0xDC	; 220
    2092:	79 01       	movw	r14, r18
    2094:	c9 01       	movw	r24, r18
    2096:	2b df       	rcall	.-426    	; 0x1eee <udd_ep_get_size>
    2098:	6c 01       	movw	r12, r24
    209a:	11 23       	and	r17, r17
    209c:	09 f4       	brne	.+2      	; 0x20a0 <udd_ep_trans_complet+0x52>
    209e:	5b c0       	rjmp	.+182    	; 0x2156 <udd_ep_trans_complet+0x108>
    20a0:	d7 01       	movw	r26, r14
    20a2:	16 96       	adiw	r26, 0x06	; 6
    20a4:	2d 91       	ld	r18, X+
    20a6:	3c 91       	ld	r19, X
    20a8:	17 97       	sbiw	r26, 0x07	; 7
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	28 0f       	add	r18, r24
    20b0:	39 1f       	adc	r19, r25
    20b2:	2d 83       	std	Y+5, r18	; 0x05
    20b4:	3e 83       	std	Y+6, r19	; 0x06
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	28 17       	cp	r18, r24
    20bc:	39 07       	cpc	r19, r25
    20be:	c9 f1       	breq	.+114    	; 0x2132 <udd_ep_trans_complet+0xe4>
    20c0:	fc 01       	movw	r30, r24
    20c2:	e2 1b       	sub	r30, r18
    20c4:	f3 0b       	sbc	r31, r19
    20c6:	9f 01       	movw	r18, r30
    20c8:	21 15       	cp	r18, r1
    20ca:	f4 e0       	ldi	r31, 0x04	; 4
    20cc:	3f 07       	cpc	r19, r31
    20ce:	40 f0       	brcs	.+16     	; 0x20e0 <udd_ep_trans_complet+0x92>
    20d0:	2f ef       	ldi	r18, 0xFF	; 255
    20d2:	33 e0       	ldi	r19, 0x03	; 3
    20d4:	c9 01       	movw	r24, r18
    20d6:	b6 01       	movw	r22, r12
    20d8:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__udivmodhi4>
    20dc:	28 1b       	sub	r18, r24
    20de:	39 0b       	sbc	r19, r25
    20e0:	88 81       	ld	r24, Y
    20e2:	81 ff       	sbrs	r24, 1
    20e4:	0a c0       	rjmp	.+20     	; 0x20fa <udd_ep_trans_complet+0xac>
    20e6:	c9 01       	movw	r24, r18
    20e8:	b6 01       	movw	r22, r12
    20ea:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__udivmodhi4>
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	89 2b       	or	r24, r25
    20f2:	09 f0       	breq	.+2      	; 0x20f6 <udd_ep_trans_complet+0xa8>
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	94 2f       	mov	r25, r20
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <udd_ep_trans_complet+0xae>
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	88 81       	ld	r24, Y
    20fe:	90 fb       	bst	r25, 0
    2100:	81 f9       	bld	r24, 1
    2102:	88 83       	st	Y, r24
    2104:	d7 01       	movw	r26, r14
    2106:	16 96       	adiw	r26, 0x06	; 6
    2108:	1d 92       	st	X+, r1
    210a:	1c 92       	st	X, r1
    210c:	17 97       	sbiw	r26, 0x07	; 7
    210e:	12 96       	adiw	r26, 0x02	; 2
    2110:	2d 93       	st	X+, r18
    2112:	3c 93       	st	X, r19
    2114:	13 97       	sbiw	r26, 0x03	; 3
    2116:	29 81       	ldd	r18, Y+1	; 0x01
    2118:	3a 81       	ldd	r19, Y+2	; 0x02
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	82 0f       	add	r24, r18
    2120:	93 1f       	adc	r25, r19
    2122:	14 96       	adiw	r26, 0x04	; 4
    2124:	8d 93       	st	X+, r24
    2126:	9c 93       	st	X, r25
    2128:	15 97       	sbiw	r26, 0x05	; 5
    212a:	f7 01       	movw	r30, r14
    212c:	02 e0       	ldi	r16, 0x02	; 2
    212e:	06 93       	lac	Z, r16
    2130:	98 c0       	rjmp	.+304    	; 0x2262 <udd_ep_trans_complet+0x214>
    2132:	88 81       	ld	r24, Y
    2134:	81 ff       	sbrs	r24, 1
    2136:	87 c0       	rjmp	.+270    	; 0x2246 <udd_ep_trans_complet+0x1f8>
    2138:	8d 7f       	andi	r24, 0xFD	; 253
    213a:	88 83       	st	Y, r24
    213c:	d7 01       	movw	r26, r14
    213e:	16 96       	adiw	r26, 0x06	; 6
    2140:	1d 92       	st	X+, r1
    2142:	1c 92       	st	X, r1
    2144:	17 97       	sbiw	r26, 0x07	; 7
    2146:	12 96       	adiw	r26, 0x02	; 2
    2148:	1d 92       	st	X+, r1
    214a:	1c 92       	st	X, r1
    214c:	13 97       	sbiw	r26, 0x03	; 3
    214e:	f7 01       	movw	r30, r14
    2150:	02 e0       	ldi	r16, 0x02	; 2
    2152:	06 93       	lac	Z, r16
    2154:	86 c0       	rjmp	.+268    	; 0x2262 <udd_ep_trans_complet+0x214>
    2156:	d7 01       	movw	r26, r14
    2158:	12 96       	adiw	r26, 0x02	; 2
    215a:	0d 91       	ld	r16, X+
    215c:	1c 91       	ld	r17, X
    215e:	13 97       	sbiw	r26, 0x03	; 3
    2160:	88 81       	ld	r24, Y
    2162:	82 ff       	sbrs	r24, 2
    2164:	15 c0       	rjmp	.+42     	; 0x2190 <udd_ep_trans_complet+0x142>
    2166:	e9 81       	ldd	r30, Y+1	; 0x01
    2168:	fa 81       	ldd	r31, Y+2	; 0x02
    216a:	2d 81       	ldd	r18, Y+5	; 0x05
    216c:	3e 81       	ldd	r19, Y+6	; 0x06
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	b6 01       	movw	r22, r12
    2174:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__udivmodhi4>
    2178:	b0 e4       	ldi	r27, 0x40	; 64
    217a:	bb 9e       	mul	r11, r27
    217c:	b0 01       	movw	r22, r0
    217e:	11 24       	eor	r1, r1
    2180:	63 58       	subi	r22, 0x83	; 131
    2182:	7d 4d       	sbci	r23, 0xDD	; 221
    2184:	ac 01       	movw	r20, r24
    2186:	cf 01       	movw	r24, r30
    2188:	82 0f       	add	r24, r18
    218a:	93 1f       	adc	r25, r19
    218c:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <memcpy>
    2190:	2d 81       	ldd	r18, Y+5	; 0x05
    2192:	3e 81       	ldd	r19, Y+6	; 0x06
    2194:	20 0f       	add	r18, r16
    2196:	31 1f       	adc	r19, r17
    2198:	2d 83       	std	Y+5, r18	; 0x05
    219a:	3e 83       	std	Y+6, r19	; 0x06
    219c:	eb 81       	ldd	r30, Y+3	; 0x03
    219e:	fc 81       	ldd	r31, Y+4	; 0x04
    21a0:	e2 17       	cp	r30, r18
    21a2:	f3 07       	cpc	r31, r19
    21a4:	10 f4       	brcc	.+4      	; 0x21aa <udd_ep_trans_complet+0x15c>
    21a6:	ed 83       	std	Y+5, r30	; 0x05
    21a8:	fe 83       	std	Y+6, r31	; 0x06
    21aa:	d7 01       	movw	r26, r14
    21ac:	16 96       	adiw	r26, 0x06	; 6
    21ae:	8d 91       	ld	r24, X+
    21b0:	9c 91       	ld	r25, X
    21b2:	17 97       	sbiw	r26, 0x07	; 7
    21b4:	80 17       	cp	r24, r16
    21b6:	91 07       	cpc	r25, r17
    21b8:	09 f0       	breq	.+2      	; 0x21bc <udd_ep_trans_complet+0x16e>
    21ba:	45 c0       	rjmp	.+138    	; 0x2246 <udd_ep_trans_complet+0x1f8>
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	e8 17       	cp	r30, r24
    21c2:	f9 07       	cpc	r31, r25
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <udd_ep_trans_complet+0x17a>
    21c6:	3f c0       	rjmp	.+126    	; 0x2246 <udd_ep_trans_complet+0x1f8>
    21c8:	e8 1b       	sub	r30, r24
    21ca:	f9 0b       	sbc	r31, r25
    21cc:	e1 15       	cp	r30, r1
    21ce:	b4 e0       	ldi	r27, 0x04	; 4
    21d0:	fb 07       	cpc	r31, r27
    21d2:	48 f0       	brcs	.+18     	; 0x21e6 <udd_ep_trans_complet+0x198>
    21d4:	ef ef       	ldi	r30, 0xFF	; 255
    21d6:	f3 e0       	ldi	r31, 0x03	; 3
    21d8:	cf 01       	movw	r24, r30
    21da:	b6 01       	movw	r22, r12
    21dc:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__udivmodhi4>
    21e0:	e8 1b       	sub	r30, r24
    21e2:	f9 0b       	sbc	r31, r25
    21e4:	06 c0       	rjmp	.+12     	; 0x21f2 <udd_ep_trans_complet+0x1a4>
    21e6:	cf 01       	movw	r24, r30
    21e8:	b6 01       	movw	r22, r12
    21ea:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__udivmodhi4>
    21ee:	e8 1b       	sub	r30, r24
    21f0:	f9 0b       	sbc	r31, r25
    21f2:	d7 01       	movw	r26, r14
    21f4:	12 96       	adiw	r26, 0x02	; 2
    21f6:	1d 92       	st	X+, r1
    21f8:	1c 92       	st	X, r1
    21fa:	13 97       	sbiw	r26, 0x03	; 3
    21fc:	ec 15       	cp	r30, r12
    21fe:	fd 05       	cpc	r31, r13
    2200:	78 f4       	brcc	.+30     	; 0x2220 <udd_ep_trans_complet+0x1d2>
    2202:	88 81       	ld	r24, Y
    2204:	84 60       	ori	r24, 0x04	; 4
    2206:	88 83       	st	Y, r24
    2208:	b0 e4       	ldi	r27, 0x40	; 64
    220a:	bb 9e       	mul	r11, r27
    220c:	c0 01       	movw	r24, r0
    220e:	11 24       	eor	r1, r1
    2210:	83 58       	subi	r24, 0x83	; 131
    2212:	9d 4d       	sbci	r25, 0xDD	; 221
    2214:	f7 01       	movw	r30, r14
    2216:	84 83       	std	Z+4, r24	; 0x04
    2218:	95 83       	std	Z+5, r25	; 0x05
    221a:	c6 82       	std	Z+6, r12	; 0x06
    221c:	d7 82       	std	Z+7, r13	; 0x07
    221e:	0f c0       	rjmp	.+30     	; 0x223e <udd_ep_trans_complet+0x1f0>
    2220:	29 81       	ldd	r18, Y+1	; 0x01
    2222:	3a 81       	ldd	r19, Y+2	; 0x02
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	9e 81       	ldd	r25, Y+6	; 0x06
    2228:	82 0f       	add	r24, r18
    222a:	93 1f       	adc	r25, r19
    222c:	d7 01       	movw	r26, r14
    222e:	14 96       	adiw	r26, 0x04	; 4
    2230:	8d 93       	st	X+, r24
    2232:	9c 93       	st	X, r25
    2234:	15 97       	sbiw	r26, 0x05	; 5
    2236:	16 96       	adiw	r26, 0x06	; 6
    2238:	ed 93       	st	X+, r30
    223a:	fc 93       	st	X, r31
    223c:	17 97       	sbiw	r26, 0x07	; 7
    223e:	f7 01       	movw	r30, r14
    2240:	02 e0       	ldi	r16, 0x02	; 2
    2242:	06 93       	lac	Z, r16
    2244:	0e c0       	rjmp	.+28     	; 0x2262 <udd_ep_trans_complet+0x214>
    2246:	88 81       	ld	r24, Y
    2248:	80 ff       	sbrs	r24, 0
    224a:	0b c0       	rjmp	.+22     	; 0x2262 <udd_ep_trans_complet+0x214>
    224c:	8e 7f       	andi	r24, 0xFE	; 254
    224e:	88 83       	st	Y, r24
    2250:	ef 81       	ldd	r30, Y+7	; 0x07
    2252:	f8 85       	ldd	r31, Y+8	; 0x08
    2254:	30 97       	sbiw	r30, 0x00	; 0
    2256:	29 f0       	breq	.+10     	; 0x2262 <udd_ep_trans_complet+0x214>
    2258:	6d 81       	ldd	r22, Y+5	; 0x05
    225a:	7e 81       	ldd	r23, Y+6	; 0x06
    225c:	4b 2d       	mov	r20, r11
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	09 95       	icall
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
    2270:	cf 90       	pop	r12
    2272:	bf 90       	pop	r11
    2274:	08 95       	ret

00002276 <udd_attach>:
    2276:	cf 93       	push	r28
    2278:	cf b7       	in	r28, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	5b dd       	rcall	.-1354   	; 0x1d36 <udd_sleep_mode>
    2280:	ea ec       	ldi	r30, 0xCA	; 202
    2282:	f4 e0       	ldi	r31, 0x04	; 4
    2284:	80 e4       	ldi	r24, 0x40	; 64
    2286:	80 83       	st	Z, r24
    2288:	80 e2       	ldi	r24, 0x20	; 32
    228a:	80 83       	st	Z, r24
    228c:	e1 ec       	ldi	r30, 0xC1	; 193
    228e:	f4 e0       	ldi	r31, 0x04	; 4
    2290:	80 81       	ld	r24, Z
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	80 83       	st	Z, r24
    2296:	a9 ec       	ldi	r26, 0xC9	; 201
    2298:	b4 e0       	ldi	r27, 0x04	; 4
    229a:	8c 91       	ld	r24, X
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	8c 93       	st	X, r24
    22a0:	e8 ec       	ldi	r30, 0xC8	; 200
    22a2:	f4 e0       	ldi	r31, 0x04	; 4
    22a4:	80 81       	ld	r24, Z
    22a6:	80 64       	ori	r24, 0x40	; 64
    22a8:	80 83       	st	Z, r24
    22aa:	8c 91       	ld	r24, X
    22ac:	81 60       	ori	r24, 0x01	; 1
    22ae:	8c 93       	st	X, r24
    22b0:	80 81       	ld	r24, Z
    22b2:	80 68       	ori	r24, 0x80	; 128
    22b4:	80 83       	st	Z, r24
    22b6:	cf bf       	out	0x3f, r28	; 63
    22b8:	cf 91       	pop	r28
    22ba:	08 95       	ret

000022bc <udd_enable>:
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	c0 e6       	ldi	r28, 0x60	; 96
    22c2:	d0 e0       	ldi	r29, 0x00	; 0
    22c4:	18 82       	st	Y, r1
    22c6:	80 e3       	ldi	r24, 0x30	; 48
    22c8:	3c d4       	rcall	.+2168   	; 0x2b42 <sysclk_enable_usb>
    22ca:	e0 ec       	ldi	r30, 0xC0	; 192
    22cc:	f4 e0       	ldi	r31, 0x04	; 4
    22ce:	80 81       	ld	r24, Z
    22d0:	80 64       	ori	r24, 0x40	; 64
    22d2:	80 83       	st	Z, r24
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	88 83       	st	Y, r24
    22d8:	cf b7       	in	r28, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	10 92 b5 23 	sts	0x23B5, r1
    22e0:	10 92 bd 23 	sts	0x23BD, r1
    22e4:	10 92 c5 23 	sts	0x23C5, r1
    22e8:	10 92 cd 23 	sts	0x23CD, r1
    22ec:	10 92 d5 23 	sts	0x23D5, r1
    22f0:	10 92 dd 23 	sts	0x23DD, r1
    22f4:	ed e3       	ldi	r30, 0x3D	; 61
    22f6:	f3 e2       	ldi	r31, 0x23	; 35
    22f8:	80 81       	ld	r24, Z
    22fa:	8e 7f       	andi	r24, 0xFE	; 254
    22fc:	80 83       	st	Z, r24
    22fe:	e6 e4       	ldi	r30, 0x46	; 70
    2300:	f3 e2       	ldi	r31, 0x23	; 35
    2302:	80 81       	ld	r24, Z
    2304:	8e 7f       	andi	r24, 0xFE	; 254
    2306:	80 83       	st	Z, r24
    2308:	ef e4       	ldi	r30, 0x4F	; 79
    230a:	f3 e2       	ldi	r31, 0x23	; 35
    230c:	80 81       	ld	r24, Z
    230e:	8e 7f       	andi	r24, 0xFE	; 254
    2310:	80 83       	st	Z, r24
    2312:	e8 e5       	ldi	r30, 0x58	; 88
    2314:	f3 e2       	ldi	r31, 0x23	; 35
    2316:	80 81       	ld	r24, Z
    2318:	8e 7f       	andi	r24, 0xFE	; 254
    231a:	80 83       	st	Z, r24
    231c:	6a e1       	ldi	r22, 0x1A	; 26
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	45 d4       	rcall	.+2186   	; 0x2bae <nvm_read_byte>
    2324:	8f 3f       	cpi	r24, 0xFF	; 255
    2326:	19 f0       	breq	.+6      	; 0x232e <udd_enable+0x72>
    2328:	80 93 fa 04 	sts	0x04FA, r24
    232c:	03 c0       	rjmp	.+6      	; 0x2334 <udd_enable+0x78>
    232e:	8f e1       	ldi	r24, 0x1F	; 31
    2330:	80 93 fa 04 	sts	0x04FA, r24
    2334:	6b e1       	ldi	r22, 0x1B	; 27
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	82 e0       	ldi	r24, 0x02	; 2
    233a:	39 d4       	rcall	.+2162   	; 0x2bae <nvm_read_byte>
    233c:	8f 3f       	cpi	r24, 0xFF	; 255
    233e:	19 f0       	breq	.+6      	; 0x2346 <udd_enable+0x8a>
    2340:	80 93 fb 04 	sts	0x04FB, r24
    2344:	03 c0       	rjmp	.+6      	; 0x234c <udd_enable+0x90>
    2346:	8f e1       	ldi	r24, 0x1F	; 31
    2348:	80 93 fb 04 	sts	0x04FB, r24
    234c:	e0 ec       	ldi	r30, 0xC0	; 192
    234e:	f4 e0       	ldi	r31, 0x04	; 4
    2350:	80 81       	ld	r24, Z
    2352:	82 60       	ori	r24, 0x02	; 2
    2354:	80 83       	st	Z, r24
    2356:	80 81       	ld	r24, Z
    2358:	80 68       	ori	r24, 0x80	; 128
    235a:	80 83       	st	Z, r24
    235c:	80 81       	ld	r24, Z
    235e:	80 61       	ori	r24, 0x10	; 16
    2360:	80 83       	st	Z, r24
    2362:	84 eb       	ldi	r24, 0xB4	; 180
    2364:	93 e2       	ldi	r25, 0x23	; 35
    2366:	86 83       	std	Z+6, r24	; 0x06
    2368:	97 83       	std	Z+7, r25	; 0x07
    236a:	80 81       	ld	r24, Z
    236c:	80 62       	ori	r24, 0x20	; 32
    236e:	80 83       	st	Z, r24
    2370:	8f ef       	ldi	r24, 0xFF	; 255
    2372:	80 93 c5 04 	sts	0x04C5, r24
    2376:	e8 ec       	ldi	r30, 0xC8	; 200
    2378:	f4 e0       	ldi	r31, 0x04	; 4
    237a:	80 81       	ld	r24, Z
    237c:	81 60       	ori	r24, 0x01	; 1
    237e:	80 83       	st	Z, r24
    2380:	10 92 e8 23 	sts	0x23E8, r1
    2384:	8f b7       	in	r24, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	e6 e3       	ldi	r30, 0x36	; 54
    238a:	f4 e2       	ldi	r31, 0x24	; 36
    238c:	90 81       	ld	r25, Z
    238e:	9f 5f       	subi	r25, 0xFF	; 255
    2390:	90 83       	st	Z, r25
    2392:	8f bf       	out	0x3f, r24	; 63
    2394:	70 df       	rcall	.-288    	; 0x2276 <udd_attach>
    2396:	cf bf       	out	0x3f, r28	; 63
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret

0000239e <udd_is_high_speed>:
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	08 95       	ret

000023a2 <udd_set_address>:
    23a2:	80 93 c3 04 	sts	0x04C3, r24
    23a6:	08 95       	ret

000023a8 <udd_getaddress>:
    23a8:	80 91 c3 04 	lds	r24, 0x04C3
    23ac:	08 95       	ret

000023ae <udd_get_frame_number>:
    23ae:	80 91 e4 23 	lds	r24, 0x23E4
    23b2:	90 91 e5 23 	lds	r25, 0x23E5
    23b6:	08 95       	ret

000023b8 <udd_get_micro_frame_number>:
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	08 95       	ret

000023be <udd_set_setup_payload>:
    23be:	80 93 29 24 	sts	0x2429, r24
    23c2:	90 93 2a 24 	sts	0x242A, r25
    23c6:	60 93 2b 24 	sts	0x242B, r22
    23ca:	70 93 2c 24 	sts	0x242C, r23
    23ce:	08 95       	ret

000023d0 <udd_ep_alloc>:
    23d0:	e8 2f       	mov	r30, r24
    23d2:	ef 70       	andi	r30, 0x0F	; 15
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	ee 0f       	add	r30, r30
    23d8:	ff 1f       	adc	r31, r31
    23da:	99 27       	eor	r25, r25
    23dc:	87 fd       	sbrc	r24, 7
    23de:	90 95       	com	r25
    23e0:	88 27       	eor	r24, r24
    23e2:	99 0f       	add	r25, r25
    23e4:	88 1f       	adc	r24, r24
    23e6:	99 27       	eor	r25, r25
    23e8:	e8 0f       	add	r30, r24
    23ea:	f9 1f       	adc	r31, r25
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	ee 0f       	add	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	ec 54       	subi	r30, 0x4C	; 76
    23fa:	fc 4d       	sbci	r31, 0xDC	; 220
    23fc:	81 81       	ldd	r24, Z+1	; 0x01
    23fe:	80 7c       	andi	r24, 0xC0	; 192
    2400:	09 f0       	breq	.+2      	; 0x2404 <udd_ep_alloc+0x34>
    2402:	43 c0       	rjmp	.+134    	; 0x248a <udd_ep_alloc+0xba>
    2404:	63 70       	andi	r22, 0x03	; 3
    2406:	61 30       	cpi	r22, 0x01	; 1
    2408:	29 f0       	breq	.+10     	; 0x2414 <udd_ep_alloc+0x44>
    240a:	10 f4       	brcc	.+4      	; 0x2410 <udd_ep_alloc+0x40>
    240c:	80 e4       	ldi	r24, 0x40	; 64
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <udd_ep_alloc+0x46>
    2410:	80 e8       	ldi	r24, 0x80	; 128
    2412:	01 c0       	rjmp	.+2      	; 0x2416 <udd_ep_alloc+0x46>
    2414:	80 ec       	ldi	r24, 0xC0	; 192
    2416:	40 38       	cpi	r20, 0x80	; 128
    2418:	51 05       	cpc	r21, r1
    241a:	e1 f0       	breq	.+56     	; 0x2454 <udd_ep_alloc+0x84>
    241c:	50 f4       	brcc	.+20     	; 0x2432 <udd_ep_alloc+0x62>
    241e:	40 32       	cpi	r20, 0x20	; 32
    2420:	51 05       	cpc	r21, r1
    2422:	a1 f0       	breq	.+40     	; 0x244c <udd_ep_alloc+0x7c>
    2424:	40 34       	cpi	r20, 0x40	; 64
    2426:	51 05       	cpc	r21, r1
    2428:	99 f0       	breq	.+38     	; 0x2450 <udd_ep_alloc+0x80>
    242a:	40 31       	cpi	r20, 0x10	; 16
    242c:	51 05       	cpc	r21, r1
    242e:	61 f4       	brne	.+24     	; 0x2448 <udd_ep_alloc+0x78>
    2430:	19 c0       	rjmp	.+50     	; 0x2464 <udd_ep_alloc+0x94>
    2432:	41 15       	cp	r20, r1
    2434:	92 e0       	ldi	r25, 0x02	; 2
    2436:	59 07       	cpc	r21, r25
    2438:	89 f0       	breq	.+34     	; 0x245c <udd_ep_alloc+0x8c>
    243a:	4f 3f       	cpi	r20, 0xFF	; 255
    243c:	93 e0       	ldi	r25, 0x03	; 3
    243e:	59 07       	cpc	r21, r25
    2440:	79 f0       	breq	.+30     	; 0x2460 <udd_ep_alloc+0x90>
    2442:	41 15       	cp	r20, r1
    2444:	51 40       	sbci	r21, 0x01	; 1
    2446:	41 f0       	breq	.+16     	; 0x2458 <udd_ep_alloc+0x88>
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	0d c0       	rjmp	.+26     	; 0x2466 <udd_ep_alloc+0x96>
    244c:	22 e0       	ldi	r18, 0x02	; 2
    244e:	0b c0       	rjmp	.+22     	; 0x2466 <udd_ep_alloc+0x96>
    2450:	23 e0       	ldi	r18, 0x03	; 3
    2452:	09 c0       	rjmp	.+18     	; 0x2466 <udd_ep_alloc+0x96>
    2454:	24 e0       	ldi	r18, 0x04	; 4
    2456:	07 c0       	rjmp	.+14     	; 0x2466 <udd_ep_alloc+0x96>
    2458:	25 e0       	ldi	r18, 0x05	; 5
    245a:	05 c0       	rjmp	.+10     	; 0x2466 <udd_ep_alloc+0x96>
    245c:	26 e0       	ldi	r18, 0x06	; 6
    245e:	03 c0       	rjmp	.+6      	; 0x2466 <udd_ep_alloc+0x96>
    2460:	27 e0       	ldi	r18, 0x07	; 7
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <udd_ep_alloc+0x96>
    2464:	21 e0       	ldi	r18, 0x01	; 1
    2466:	11 82       	std	Z+1, r1	; 0x01
    2468:	96 e0       	ldi	r25, 0x06	; 6
    246a:	90 83       	st	Z, r25
    246c:	82 2b       	or	r24, r18
    246e:	81 83       	std	Z+1, r24	; 0x01
    2470:	81 81       	ldd	r24, Z+1	; 0x01
    2472:	80 7c       	andi	r24, 0xC0	; 192
    2474:	80 3c       	cpi	r24, 0xC0	; 192
    2476:	21 f4       	brne	.+8      	; 0x2480 <udd_ep_alloc+0xb0>
    2478:	81 81       	ldd	r24, Z+1	; 0x01
    247a:	87 70       	andi	r24, 0x07	; 7
    247c:	87 30       	cpi	r24, 0x07	; 7
    247e:	39 f0       	breq	.+14     	; 0x248e <udd_ep_alloc+0xbe>
    2480:	81 81       	ldd	r24, Z+1	; 0x01
    2482:	80 62       	ori	r24, 0x20	; 32
    2484:	81 83       	std	Z+1, r24	; 0x01
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	08 95       	ret
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	08 95       	ret
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	08 95       	ret

00002492 <udd_ep_is_halted>:
    2492:	e8 2f       	mov	r30, r24
    2494:	ef 70       	andi	r30, 0x0F	; 15
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	99 27       	eor	r25, r25
    249e:	87 fd       	sbrc	r24, 7
    24a0:	90 95       	com	r25
    24a2:	88 27       	eor	r24, r24
    24a4:	99 0f       	add	r25, r25
    24a6:	88 1f       	adc	r24, r24
    24a8:	99 27       	eor	r25, r25
    24aa:	e8 0f       	add	r30, r24
    24ac:	f9 1f       	adc	r31, r25
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	ee 0f       	add	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	ec 54       	subi	r30, 0x4C	; 76
    24bc:	fc 4d       	sbci	r31, 0xDC	; 220
    24be:	81 81       	ldd	r24, Z+1	; 0x01
    24c0:	82 fb       	bst	r24, 2
    24c2:	88 27       	eor	r24, r24
    24c4:	80 f9       	bld	r24, 0
    24c6:	08 95       	ret

000024c8 <udd_ep_clear_halt>:
    24c8:	e8 2f       	mov	r30, r24
    24ca:	ef 70       	andi	r30, 0x0F	; 15
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	28 2f       	mov	r18, r24
    24d4:	33 27       	eor	r19, r19
    24d6:	27 fd       	sbrc	r18, 7
    24d8:	30 95       	com	r19
    24da:	22 27       	eor	r18, r18
    24dc:	33 0f       	add	r19, r19
    24de:	22 1f       	adc	r18, r18
    24e0:	33 27       	eor	r19, r19
    24e2:	e2 0f       	add	r30, r18
    24e4:	f3 1f       	adc	r31, r19
    24e6:	ee 0f       	add	r30, r30
    24e8:	ff 1f       	adc	r31, r31
    24ea:	ee 0f       	add	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	ee 0f       	add	r30, r30
    24f0:	ff 1f       	adc	r31, r31
    24f2:	ec 54       	subi	r30, 0x4C	; 76
    24f4:	fc 4d       	sbci	r31, 0xDC	; 220
    24f6:	91 81       	ldd	r25, Z+1	; 0x01
    24f8:	92 ff       	sbrs	r25, 2
    24fa:	0e c0       	rjmp	.+28     	; 0x2518 <udd_ep_clear_halt+0x50>
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	9b 7f       	andi	r25, 0xFB	; 251
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	1a dd       	rcall	.-1484   	; 0x1f38 <udd_ep_get_job>
    2504:	fc 01       	movw	r30, r24
    2506:	80 81       	ld	r24, Z
    2508:	80 ff       	sbrs	r24, 0
    250a:	06 c0       	rjmp	.+12     	; 0x2518 <udd_ep_clear_halt+0x50>
    250c:	8e 7f       	andi	r24, 0xFE	; 254
    250e:	80 83       	st	Z, r24
    2510:	07 80       	ldd	r0, Z+7	; 0x07
    2512:	f0 85       	ldd	r31, Z+8	; 0x08
    2514:	e0 2d       	mov	r30, r0
    2516:	09 95       	icall
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	08 95       	ret

0000251c <udd_ep_run>:
    251c:	7f 92       	push	r7
    251e:	8f 92       	push	r8
    2520:	9f 92       	push	r9
    2522:	af 92       	push	r10
    2524:	bf 92       	push	r11
    2526:	cf 92       	push	r12
    2528:	df 92       	push	r13
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	98 2e       	mov	r9, r24
    2538:	86 2e       	mov	r8, r22
    253a:	5a 01       	movw	r10, r20
    253c:	69 01       	movw	r12, r18
    253e:	fc dc       	rcall	.-1544   	; 0x1f38 <udd_ep_get_job>
    2540:	7c 01       	movw	r14, r24
    2542:	79 2c       	mov	r7, r9
    2544:	77 1c       	adc	r7, r7
    2546:	77 24       	eor	r7, r7
    2548:	77 1c       	adc	r7, r7
    254a:	c9 2d       	mov	r28, r9
    254c:	cf 70       	andi	r28, 0x0F	; 15
    254e:	d0 e0       	ldi	r29, 0x00	; 0
    2550:	cc 0f       	add	r28, r28
    2552:	dd 1f       	adc	r29, r29
    2554:	c7 0d       	add	r28, r7
    2556:	d1 1d       	adc	r29, r1
    2558:	cc 0f       	add	r28, r28
    255a:	dd 1f       	adc	r29, r29
    255c:	cc 0f       	add	r28, r28
    255e:	dd 1f       	adc	r29, r29
    2560:	cc 0f       	add	r28, r28
    2562:	dd 1f       	adc	r29, r29
    2564:	cc 54       	subi	r28, 0x4C	; 76
    2566:	dc 4d       	sbci	r29, 0xDC	; 220
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	80 7c       	andi	r24, 0xC0	; 192
    256c:	09 f4       	brne	.+2      	; 0x2570 <udd_ep_run+0x54>
    256e:	4c c0       	rjmp	.+152    	; 0x2608 <udd_ep_run+0xec>
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	80 7c       	andi	r24, 0xC0	; 192
    2574:	80 3c       	cpi	r24, 0xC0	; 192
    2576:	19 f0       	breq	.+6      	; 0x257e <udd_ep_run+0x62>
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	82 fd       	sbrc	r24, 2
    257c:	47 c0       	rjmp	.+142    	; 0x260c <udd_ep_run+0xf0>
    257e:	8f b7       	in	r24, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	f7 01       	movw	r30, r14
    2584:	90 81       	ld	r25, Z
    2586:	90 ff       	sbrs	r25, 0
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <udd_ep_run+0x74>
    258a:	8f bf       	out	0x3f, r24	; 63
    258c:	71 2c       	mov	r7, r1
    258e:	3f c0       	rjmp	.+126    	; 0x260e <udd_ep_run+0xf2>
    2590:	f7 01       	movw	r30, r14
    2592:	90 81       	ld	r25, Z
    2594:	91 60       	ori	r25, 0x01	; 1
    2596:	90 83       	st	Z, r25
    2598:	8f bf       	out	0x3f, r24	; 63
    259a:	f7 01       	movw	r30, r14
    259c:	a1 82       	std	Z+1, r10	; 0x01
    259e:	b2 82       	std	Z+2, r11	; 0x02
    25a0:	c3 82       	std	Z+3, r12	; 0x03
    25a2:	d4 82       	std	Z+4, r13	; 0x04
    25a4:	15 82       	std	Z+5, r1	; 0x05
    25a6:	16 82       	std	Z+6, r1	; 0x06
    25a8:	07 83       	std	Z+7, r16	; 0x07
    25aa:	10 87       	std	Z+8, r17	; 0x08
    25ac:	81 10       	cpse	r8, r1
    25ae:	06 c0       	rjmp	.+12     	; 0x25bc <udd_ep_run+0xa0>
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	c1 14       	cp	r12, r1
    25b4:	d1 04       	cpc	r13, r1
    25b6:	19 f0       	breq	.+6      	; 0x25be <udd_ep_run+0xa2>
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <udd_ep_run+0xa2>
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	f7 01       	movw	r30, r14
    25c0:	80 81       	ld	r24, Z
    25c2:	90 fb       	bst	r25, 0
    25c4:	81 f9       	bld	r24, 1
    25c6:	8b 7f       	andi	r24, 0xFB	; 251
    25c8:	80 83       	st	Z, r24
    25ca:	77 20       	and	r7, r7
    25cc:	19 f0       	breq	.+6      	; 0x25d4 <udd_ep_run+0xb8>
    25ce:	1e 82       	std	Y+6, r1	; 0x06
    25d0:	1f 82       	std	Y+7, r1	; 0x07
    25d2:	15 c0       	rjmp	.+42     	; 0x25fe <udd_ep_run+0xe2>
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	80 7c       	andi	r24, 0xC0	; 192
    25d8:	80 3c       	cpi	r24, 0xC0	; 192
    25da:	69 f4       	brne	.+26     	; 0x25f6 <udd_ep_run+0xda>
    25dc:	ce 01       	movw	r24, r28
    25de:	87 dc       	rcall	.-1778   	; 0x1eee <udd_ep_get_size>
    25e0:	bc 01       	movw	r22, r24
    25e2:	c6 01       	movw	r24, r12
    25e4:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__udivmodhi4>
    25e8:	89 2b       	or	r24, r25
    25ea:	29 f0       	breq	.+10     	; 0x25f6 <udd_ep_run+0xda>
    25ec:	f7 01       	movw	r30, r14
    25ee:	80 81       	ld	r24, Z
    25f0:	8e 7f       	andi	r24, 0xFE	; 254
    25f2:	80 83       	st	Z, r24
    25f4:	0c c0       	rjmp	.+24     	; 0x260e <udd_ep_run+0xf2>
    25f6:	1a 82       	std	Y+2, r1	; 0x02
    25f8:	1b 82       	std	Y+3, r1	; 0x03
    25fa:	1e 82       	std	Y+6, r1	; 0x06
    25fc:	1f 82       	std	Y+7, r1	; 0x07
    25fe:	89 2d       	mov	r24, r9
    2600:	26 dd       	rcall	.-1460   	; 0x204e <udd_ep_trans_complet>
    2602:	77 24       	eor	r7, r7
    2604:	73 94       	inc	r7
    2606:	03 c0       	rjmp	.+6      	; 0x260e <udd_ep_run+0xf2>
    2608:	71 2c       	mov	r7, r1
    260a:	01 c0       	rjmp	.+2      	; 0x260e <udd_ep_run+0xf2>
    260c:	71 2c       	mov	r7, r1
    260e:	87 2d       	mov	r24, r7
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	df 90       	pop	r13
    261e:	cf 90       	pop	r12
    2620:	bf 90       	pop	r11
    2622:	af 90       	pop	r10
    2624:	9f 90       	pop	r9
    2626:	8f 90       	pop	r8
    2628:	7f 90       	pop	r7
    262a:	08 95       	ret

0000262c <udd_ep_abort>:
    262c:	ff 92       	push	r15
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	18 2f       	mov	r17, r24
    2638:	f8 2e       	mov	r15, r24
    263a:	ff 1c       	adc	r15, r15
    263c:	ff 24       	eor	r15, r15
    263e:	ff 1c       	adc	r15, r15
    2640:	c8 2f       	mov	r28, r24
    2642:	cf 70       	andi	r28, 0x0F	; 15
    2644:	d0 e0       	ldi	r29, 0x00	; 0
    2646:	cc 0f       	add	r28, r28
    2648:	dd 1f       	adc	r29, r29
    264a:	cf 0d       	add	r28, r15
    264c:	d1 1d       	adc	r29, r1
    264e:	cc 0f       	add	r28, r28
    2650:	dd 1f       	adc	r29, r29
    2652:	cc 0f       	add	r28, r28
    2654:	dd 1f       	adc	r29, r29
    2656:	cc 0f       	add	r28, r28
    2658:	dd 1f       	adc	r29, r29
    265a:	cc 54       	subi	r28, 0x4C	; 76
    265c:	dc 4d       	sbci	r29, 0xDC	; 220
    265e:	6c dc       	rcall	.-1832   	; 0x1f38 <udd_ep_get_job>
    2660:	dc 01       	movw	r26, r24
    2662:	fe 01       	movw	r30, r28
    2664:	02 e0       	ldi	r16, 0x02	; 2
    2666:	05 93       	las	Z, r16
    2668:	8c 91       	ld	r24, X
    266a:	80 ff       	sbrs	r24, 0
    266c:	12 c0       	rjmp	.+36     	; 0x2692 <udd_ep_abort+0x66>
    266e:	8e 7f       	andi	r24, 0xFE	; 254
    2670:	8c 93       	st	X, r24
    2672:	17 96       	adiw	r26, 0x07	; 7
    2674:	ed 91       	ld	r30, X+
    2676:	fc 91       	ld	r31, X
    2678:	18 97       	sbiw	r26, 0x08	; 8
    267a:	30 97       	sbiw	r30, 0x00	; 0
    267c:	51 f0       	breq	.+20     	; 0x2692 <udd_ep_abort+0x66>
    267e:	ff 20       	and	r15, r15
    2680:	19 f0       	breq	.+6      	; 0x2688 <udd_ep_abort+0x5c>
    2682:	6e 81       	ldd	r22, Y+6	; 0x06
    2684:	7f 81       	ldd	r23, Y+7	; 0x07
    2686:	02 c0       	rjmp	.+4      	; 0x268c <udd_ep_abort+0x60>
    2688:	6a 81       	ldd	r22, Y+2	; 0x02
    268a:	7b 81       	ldd	r23, Y+3	; 0x03
    268c:	41 2f       	mov	r20, r17
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	09 95       	icall
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	ff 90       	pop	r15
    269c:	08 95       	ret

0000269e <udd_ep_free>:
    269e:	cf 93       	push	r28
    26a0:	c8 2f       	mov	r28, r24
    26a2:	c4 df       	rcall	.-120    	; 0x262c <udd_ep_abort>
    26a4:	ec 2f       	mov	r30, r28
    26a6:	ef 70       	andi	r30, 0x0F	; 15
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	ee 0f       	add	r30, r30
    26ac:	ff 1f       	adc	r31, r31
    26ae:	8c 2f       	mov	r24, r28
    26b0:	99 27       	eor	r25, r25
    26b2:	87 fd       	sbrc	r24, 7
    26b4:	90 95       	com	r25
    26b6:	88 27       	eor	r24, r24
    26b8:	99 0f       	add	r25, r25
    26ba:	88 1f       	adc	r24, r24
    26bc:	99 27       	eor	r25, r25
    26be:	e8 0f       	add	r30, r24
    26c0:	f9 1f       	adc	r31, r25
    26c2:	ee 0f       	add	r30, r30
    26c4:	ff 1f       	adc	r31, r31
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	ee 0f       	add	r30, r30
    26cc:	ff 1f       	adc	r31, r31
    26ce:	ec 54       	subi	r30, 0x4C	; 76
    26d0:	fc 4d       	sbci	r31, 0xDC	; 220
    26d2:	11 82       	std	Z+1, r1	; 0x01
    26d4:	cf 91       	pop	r28
    26d6:	08 95       	ret

000026d8 <udd_ep_set_halt>:
    26d8:	0f 93       	push	r16
    26da:	e8 2f       	mov	r30, r24
    26dc:	ef 70       	andi	r30, 0x0F	; 15
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	28 2f       	mov	r18, r24
    26e6:	33 27       	eor	r19, r19
    26e8:	27 fd       	sbrc	r18, 7
    26ea:	30 95       	com	r19
    26ec:	22 27       	eor	r18, r18
    26ee:	33 0f       	add	r19, r19
    26f0:	22 1f       	adc	r18, r18
    26f2:	33 27       	eor	r19, r19
    26f4:	e2 0f       	add	r30, r18
    26f6:	f3 1f       	adc	r31, r19
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	ec 54       	subi	r30, 0x4C	; 76
    2706:	fc 4d       	sbci	r31, 0xDC	; 220
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	94 60       	ori	r25, 0x04	; 4
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	01 e0       	ldi	r16, 0x01	; 1
    2710:	06 93       	lac	Z, r16
    2712:	8c df       	rcall	.-232    	; 0x262c <udd_ep_abort>
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	0f 91       	pop	r16
    2718:	08 95       	ret

0000271a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    271a:	1f 92       	push	r1
    271c:	0f 92       	push	r0
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	0f 92       	push	r0
    2722:	11 24       	eor	r1, r1
    2724:	0f 93       	push	r16
    2726:	2f 93       	push	r18
    2728:	3f 93       	push	r19
    272a:	4f 93       	push	r20
    272c:	5f 93       	push	r21
    272e:	6f 93       	push	r22
    2730:	7f 93       	push	r23
    2732:	8f 93       	push	r24
    2734:	9f 93       	push	r25
    2736:	af 93       	push	r26
    2738:	bf 93       	push	r27
    273a:	ef 93       	push	r30
    273c:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    273e:	80 91 cb 04 	lds	r24, 0x04CB
    2742:	88 23       	and	r24, r24
    2744:	34 f4       	brge	.+12     	; 0x2752 <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    2746:	80 e8       	ldi	r24, 0x80	; 128
    2748:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    274c:	0e 94 30 05 	call	0xa60	; 0xa60 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2750:	88 c0       	rjmp	.+272    	; 0x2862 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2752:	80 91 cb 04 	lds	r24, 0x04CB
    2756:	82 ff       	sbrs	r24, 2
    2758:	20 c0       	rjmp	.+64     	; 0x279a <__vector_125+0x80>
		udd_ack_underflow_event();
    275a:	84 e0       	ldi	r24, 0x04	; 4
    275c:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    2760:	80 91 bc 23 	lds	r24, 0x23BC
    2764:	86 ff       	sbrs	r24, 6
    2766:	7d c0       	rjmp	.+250    	; 0x2862 <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2768:	80 91 cc 04 	lds	r24, 0x04CC
    276c:	81 fd       	sbrc	r24, 1
    276e:	79 c0       	rjmp	.+242    	; 0x2862 <__vector_125+0x148>
    2770:	fe db       	rcall	.-2052   	; 0x1f6e <udd_ctrl_interrupt_tc_setup>
    2772:	81 11       	cpse	r24, r1
    2774:	76 c0       	rjmp	.+236    	; 0x2862 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2776:	80 91 a5 23 	lds	r24, 0x23A5
    277a:	81 30       	cpi	r24, 0x01	; 1
    277c:	11 f4       	brne	.+4      	; 0x2782 <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    277e:	33 db       	rcall	.-2458   	; 0x1de6 <udd_ctrl_send_zlp_in>
    2780:	70 c0       	rjmp	.+224    	; 0x2862 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2782:	84 30       	cpi	r24, 0x04	; 4
    2784:	09 f0       	breq	.+2      	; 0x2788 <__vector_125+0x6e>
    2786:	6d c0       	rjmp	.+218    	; 0x2862 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2788:	ed eb       	ldi	r30, 0xBD	; 189
    278a:	f3 e2       	ldi	r31, 0x23	; 35
    278c:	04 e0       	ldi	r16, 0x04	; 4
    278e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2790:	e5 eb       	ldi	r30, 0xB5	; 181
    2792:	f3 e2       	ldi	r31, 0x23	; 35
    2794:	04 e0       	ldi	r16, 0x04	; 4
    2796:	05 93       	las	Z, r16
    2798:	64 c0       	rjmp	.+200    	; 0x2862 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    279a:	80 91 cb 04 	lds	r24, 0x04CB
    279e:	81 ff       	sbrs	r24, 1
    27a0:	5b c0       	rjmp	.+182    	; 0x2858 <__vector_125+0x13e>
		udd_ack_overflow_event();
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    27a8:	80 91 b4 23 	lds	r24, 0x23B4
    27ac:	86 ff       	sbrs	r24, 6
    27ae:	59 c0       	rjmp	.+178    	; 0x2862 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    27b0:	80 91 cc 04 	lds	r24, 0x04CC
    27b4:	81 fd       	sbrc	r24, 1
    27b6:	55 c0       	rjmp	.+170    	; 0x2862 <__vector_125+0x148>
    27b8:	da db       	rcall	.-2124   	; 0x1f6e <udd_ctrl_interrupt_tc_setup>
    27ba:	81 11       	cpse	r24, r1
    27bc:	52 c0       	rjmp	.+164    	; 0x2862 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    27be:	80 91 a5 23 	lds	r24, 0x23A5
    27c2:	82 30       	cpi	r24, 0x02	; 2
    27c4:	41 f4       	brne	.+16     	; 0x27d6 <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    27c6:	84 e0       	ldi	r24, 0x04	; 4
    27c8:	80 93 a5 23 	sts	0x23A5, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    27cc:	e4 eb       	ldi	r30, 0xB4	; 180
    27ce:	f3 e2       	ldi	r31, 0x23	; 35
    27d0:	02 e0       	ldi	r16, 0x02	; 2
    27d2:	06 93       	lac	Z, r16
    27d4:	46 c0       	rjmp	.+140    	; 0x2862 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    27d6:	83 30       	cpi	r24, 0x03	; 3
    27d8:	09 f0       	breq	.+2      	; 0x27dc <__vector_125+0xc2>
    27da:	43 c0       	rjmp	.+134    	; 0x2862 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    27dc:	ed eb       	ldi	r30, 0xBD	; 189
    27de:	f3 e2       	ldi	r31, 0x23	; 35
    27e0:	04 e0       	ldi	r16, 0x04	; 4
    27e2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    27e4:	e5 eb       	ldi	r30, 0xB5	; 181
    27e6:	f3 e2       	ldi	r31, 0x23	; 35
    27e8:	04 e0       	ldi	r16, 0x04	; 4
    27ea:	05 93       	las	Z, r16
    27ec:	3a c0       	rjmp	.+116    	; 0x2862 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    27ee:	80 e1       	ldi	r24, 0x10	; 16
    27f0:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	1a df       	rcall	.-460    	; 0x262c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    27f8:	81 e8       	ldi	r24, 0x81	; 129
    27fa:	18 df       	rcall	.-464    	; 0x262c <udd_ep_abort>
		}
#endif
		udc_reset();
    27fc:	0e 94 09 05 	call	0xa12	; 0xa12 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2800:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2804:	e5 eb       	ldi	r30, 0xB5	; 181
    2806:	f3 e2       	ldi	r31, 0x23	; 35
    2808:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    280a:	96 e0       	ldi	r25, 0x06	; 6
    280c:	90 93 b4 23 	sts	0x23B4, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2810:	83 e4       	ldi	r24, 0x43	; 67
    2812:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2814:	ed eb       	ldi	r30, 0xBD	; 189
    2816:	f3 e2       	ldi	r31, 0x23	; 35
    2818:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    281a:	90 93 bc 23 	sts	0x23BC, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    281e:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2820:	81 e6       	ldi	r24, 0x61	; 97
    2822:	93 e2       	ldi	r25, 0x23	; 35
    2824:	80 93 b8 23 	sts	0x23B8, r24
    2828:	90 93 b9 23 	sts	0x23B9, r25
		// Reset endpoint control management
		udd_ctrl_init();
    282c:	a3 da       	rcall	.-2746   	; 0x1d74 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    282e:	19 c0       	rjmp	.+50     	; 0x2862 <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    2830:	80 91 cb 04 	lds	r24, 0x04CB
    2834:	86 ff       	sbrs	r24, 6
    2836:	06 c0       	rjmp	.+12     	; 0x2844 <__vector_125+0x12a>
		udd_ack_suspend_event();
    2838:	80 e4       	ldi	r24, 0x40	; 64
    283a:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	7a da       	rcall	.-2828   	; 0x1d36 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2842:	0f c0       	rjmp	.+30     	; 0x2862 <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    2844:	80 91 cb 04 	lds	r24, 0x04CB
    2848:	85 ff       	sbrs	r24, 5
    284a:	0b c0       	rjmp	.+22     	; 0x2862 <__vector_125+0x148>
		udd_ack_resume_event();
    284c:	80 e2       	ldi	r24, 0x20	; 32
    284e:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	70 da       	rcall	.-2848   	; 0x1d36 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2856:	05 c0       	rjmp	.+10     	; 0x2862 <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2858:	80 91 cb 04 	lds	r24, 0x04CB
    285c:	84 ff       	sbrs	r24, 4
    285e:	e8 cf       	rjmp	.-48     	; 0x2830 <__vector_125+0x116>
    2860:	c6 cf       	rjmp	.-116    	; 0x27ee <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2862:	ff 91       	pop	r31
    2864:	ef 91       	pop	r30
    2866:	bf 91       	pop	r27
    2868:	af 91       	pop	r26
    286a:	9f 91       	pop	r25
    286c:	8f 91       	pop	r24
    286e:	7f 91       	pop	r23
    2870:	6f 91       	pop	r22
    2872:	5f 91       	pop	r21
    2874:	4f 91       	pop	r20
    2876:	3f 91       	pop	r19
    2878:	2f 91       	pop	r18
    287a:	0f 91       	pop	r16
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	0f 90       	pop	r0
    2882:	1f 90       	pop	r1
    2884:	18 95       	reti

00002886 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2886:	1f 92       	push	r1
    2888:	0f 92       	push	r0
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	0f 92       	push	r0
    288e:	11 24       	eor	r1, r1
    2890:	0f 93       	push	r16
    2892:	1f 93       	push	r17
    2894:	2f 93       	push	r18
    2896:	3f 93       	push	r19
    2898:	4f 93       	push	r20
    289a:	5f 93       	push	r21
    289c:	6f 93       	push	r22
    289e:	7f 93       	push	r23
    28a0:	8f 93       	push	r24
    28a2:	9f 93       	push	r25
    28a4:	af 93       	push	r26
    28a6:	bf 93       	push	r27
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	ef 93       	push	r30
    28ae:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    28b0:	80 91 cc 04 	lds	r24, 0x04CC
    28b4:	81 fd       	sbrc	r24, 1
    28b6:	03 c0       	rjmp	.+6      	; 0x28be <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    28b8:	5a db       	rcall	.-2380   	; 0x1f6e <udd_ctrl_interrupt_tc_setup>
    28ba:	81 11       	cpse	r24, r1
    28bc:	b9 c0       	rjmp	.+370    	; 0x2a30 <__vector_126+0x1aa>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    28c4:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    28c8:	81 95       	neg	r24
    28ca:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    28cc:	e4 eb       	ldi	r30, 0xB4	; 180
    28ce:	f3 e2       	ldi	r31, 0x23	; 35
    28d0:	e8 1b       	sub	r30, r24
    28d2:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    28d4:	20 81       	ld	r18, Z
    28d6:	31 81       	ldd	r19, Z+1	; 0x01
    28d8:	24 5b       	subi	r18, 0xB4	; 180
    28da:	33 42       	sbci	r19, 0x23	; 35
    28dc:	36 95       	lsr	r19
    28de:	27 95       	ror	r18
    28e0:	36 95       	lsr	r19
    28e2:	27 95       	ror	r18
    28e4:	36 95       	lsr	r19
    28e6:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    28e8:	82 2f       	mov	r24, r18
    28ea:	86 95       	lsr	r24
    28ec:	20 ff       	sbrs	r18, 0
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <__vector_126+0x6e>
    28f0:	90 e8       	ldi	r25, 0x80	; 128
    28f2:	01 c0       	rjmp	.+2      	; 0x28f6 <__vector_126+0x70>
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    28f8:	e8 2f       	mov	r30, r24
    28fa:	ef 70       	andi	r30, 0x0F	; 15
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2902:	28 2f       	mov	r18, r24
    2904:	33 27       	eor	r19, r19
    2906:	27 fd       	sbrc	r18, 7
    2908:	30 95       	com	r19
    290a:	22 27       	eor	r18, r18
    290c:	33 0f       	add	r19, r19
    290e:	22 1f       	adc	r18, r18
    2910:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2912:	e2 0f       	add	r30, r18
    2914:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    2916:	ee 0f       	add	r30, r30
    2918:	ff 1f       	adc	r31, r31
    291a:	ee 0f       	add	r30, r30
    291c:	ff 1f       	adc	r31, r31
    291e:	ee 0f       	add	r30, r30
    2920:	ff 1f       	adc	r31, r31
    2922:	ec 54       	subi	r30, 0x4C	; 76
    2924:	fc 4d       	sbci	r31, 0xDC	; 220
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2926:	90 81       	ld	r25, Z
    2928:	95 ff       	sbrs	r25, 5
    292a:	82 c0       	rjmp	.+260    	; 0x2a30 <__vector_126+0x1aa>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    292c:	00 e2       	ldi	r16, 0x20	; 32
    292e:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2930:	81 11       	cpse	r24, r1
    2932:	79 c0       	rjmp	.+242    	; 0x2a26 <__vector_126+0x1a0>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2934:	80 91 a5 23 	lds	r24, 0x23A5
    2938:	84 30       	cpi	r24, 0x04	; 4
    293a:	19 f4       	brne	.+6      	; 0x2942 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    293c:	62 da       	rcall	.-2876   	; 0x1e02 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    293e:	1a da       	rcall	.-3020   	; 0x1d74 <udd_ctrl_init>
    2940:	77 c0       	rjmp	.+238    	; 0x2a30 <__vector_126+0x1aa>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2942:	c0 91 b6 23 	lds	r28, 0x23B6
    2946:	d0 91 b7 23 	lds	r29, 0x23B7

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    294a:	80 91 2b 24 	lds	r24, 0x242B
    294e:	90 91 2c 24 	lds	r25, 0x242C
    2952:	00 91 a1 23 	lds	r16, 0x23A1
    2956:	10 91 a2 23 	lds	r17, 0x23A2
    295a:	98 01       	movw	r18, r16
    295c:	2c 0f       	add	r18, r28
    295e:	3d 1f       	adc	r19, r29
    2960:	82 17       	cp	r24, r18
    2962:	93 07       	cpc	r25, r19
    2964:	18 f4       	brcc	.+6      	; 0x296c <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2966:	ec 01       	movw	r28, r24
    2968:	c0 1b       	sub	r28, r16
    296a:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    296c:	80 91 29 24 	lds	r24, 0x2429
    2970:	90 91 2a 24 	lds	r25, 0x242A
    2974:	ae 01       	movw	r20, r28
    2976:	61 e6       	ldi	r22, 0x61	; 97
    2978:	73 e2       	ldi	r23, 0x23	; 35
    297a:	80 0f       	add	r24, r16
    297c:	91 1f       	adc	r25, r17
    297e:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2982:	0c 0f       	add	r16, r28
    2984:	1d 1f       	adc	r17, r29
    2986:	00 93 a1 23 	sts	0x23A1, r16
    298a:	10 93 a2 23 	sts	0x23A2, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    298e:	c0 34       	cpi	r28, 0x40	; 64
    2990:	d1 05       	cpc	r29, r1
    2992:	69 f4       	brne	.+26     	; 0x29ae <__vector_126+0x128>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2994:	80 91 a3 23 	lds	r24, 0x23A3
    2998:	90 91 a4 23 	lds	r25, 0x23A4
    299c:	80 0f       	add	r24, r16
    299e:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    29a0:	20 91 27 24 	lds	r18, 0x2427
    29a4:	30 91 28 24 	lds	r19, 0x2428
    29a8:	82 17       	cp	r24, r18
    29aa:	93 07       	cpc	r25, r19
    29ac:	88 f0       	brcs	.+34     	; 0x29d0 <__vector_126+0x14a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    29ae:	00 93 2b 24 	sts	0x242B, r16
    29b2:	10 93 2c 24 	sts	0x242C, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    29b6:	e0 91 2f 24 	lds	r30, 0x242F
    29ba:	f0 91 30 24 	lds	r31, 0x2430
    29be:	30 97       	sbiw	r30, 0x00	; 0
    29c0:	29 f0       	breq	.+10     	; 0x29cc <__vector_126+0x146>
			if (!udd_g_ctrlreq.over_under_run()) {
    29c2:	09 95       	icall
    29c4:	81 11       	cpse	r24, r1
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <__vector_126+0x146>
				// Stall ZLP
				udd_ctrl_stall_data();
    29c8:	00 da       	rcall	.-3072   	; 0x1dca <udd_ctrl_stall_data>
    29ca:	32 c0       	rjmp	.+100    	; 0x2a30 <__vector_126+0x1aa>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    29cc:	0c da       	rcall	.-3048   	; 0x1de6 <udd_ctrl_send_zlp_in>
    29ce:	30 c0       	rjmp	.+96     	; 0x2a30 <__vector_126+0x1aa>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    29d0:	80 91 2b 24 	lds	r24, 0x242B
    29d4:	90 91 2c 24 	lds	r25, 0x242C
    29d8:	08 17       	cp	r16, r24
    29da:	19 07       	cpc	r17, r25
    29dc:	f9 f4       	brne	.+62     	; 0x2a1c <__vector_126+0x196>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    29de:	e0 91 2f 24 	lds	r30, 0x242F
    29e2:	f0 91 30 24 	lds	r31, 0x2430
    29e6:	30 97       	sbiw	r30, 0x00	; 0
    29e8:	11 f4       	brne	.+4      	; 0x29ee <__vector_126+0x168>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    29ea:	ef d9       	rcall	.-3106   	; 0x1dca <udd_ctrl_stall_data>
    29ec:	21 c0       	rjmp	.+66     	; 0x2a30 <__vector_126+0x1aa>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    29ee:	09 95       	icall
    29f0:	81 11       	cpse	r24, r1
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <__vector_126+0x172>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    29f4:	ea d9       	rcall	.-3116   	; 0x1dca <udd_ctrl_stall_data>
    29f6:	1c c0       	rjmp	.+56     	; 0x2a30 <__vector_126+0x1aa>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    29f8:	20 91 a3 23 	lds	r18, 0x23A3
    29fc:	30 91 a4 23 	lds	r19, 0x23A4
    2a00:	80 91 a1 23 	lds	r24, 0x23A1
    2a04:	90 91 a2 23 	lds	r25, 0x23A2
    2a08:	82 0f       	add	r24, r18
    2a0a:	93 1f       	adc	r25, r19
    2a0c:	80 93 a3 23 	sts	0x23A3, r24
    2a10:	90 93 a4 23 	sts	0x23A4, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2a14:	10 92 a1 23 	sts	0x23A1, r1
    2a18:	10 92 a2 23 	sts	0x23A2, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2a1c:	e4 eb       	ldi	r30, 0xB4	; 180
    2a1e:	f3 e2       	ldi	r31, 0x23	; 35
    2a20:	02 e0       	ldi	r16, 0x02	; 2
    2a22:	06 93       	lac	Z, r16
    2a24:	05 c0       	rjmp	.+10     	; 0x2a30 <__vector_126+0x1aa>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2a26:	80 38       	cpi	r24, 0x80	; 128
    2a28:	11 f4       	brne	.+4      	; 0x2a2e <__vector_126+0x1a8>
		udd_ctrl_in_sent();
    2a2a:	f3 d9       	rcall	.-3098   	; 0x1e12 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2a2c:	01 c0       	rjmp	.+2      	; 0x2a30 <__vector_126+0x1aa>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2a2e:	0f db       	rcall	.-2530   	; 0x204e <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2a30:	ff 91       	pop	r31
    2a32:	ef 91       	pop	r30
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	bf 91       	pop	r27
    2a3a:	af 91       	pop	r26
    2a3c:	9f 91       	pop	r25
    2a3e:	8f 91       	pop	r24
    2a40:	7f 91       	pop	r23
    2a42:	6f 91       	pop	r22
    2a44:	5f 91       	pop	r21
    2a46:	4f 91       	pop	r20
    2a48:	3f 91       	pop	r19
    2a4a:	2f 91       	pop	r18
    2a4c:	1f 91       	pop	r17
    2a4e:	0f 91       	pop	r16
    2a50:	0f 90       	pop	r0
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	0f 90       	pop	r0
    2a56:	1f 90       	pop	r1
    2a58:	18 95       	reti

00002a5a <sysclk_init>:
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <sysclk_init+0x6>
    2a60:	00 d0       	rcall	.+0      	; 0x2a62 <sysclk_init+0x8>
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	8f ef       	ldi	r24, 0xFF	; 255
    2a68:	80 93 70 00 	sts	0x0070, r24
    2a6c:	80 93 71 00 	sts	0x0071, r24
    2a70:	80 93 72 00 	sts	0x0072, r24
    2a74:	80 93 73 00 	sts	0x0073, r24
    2a78:	80 93 74 00 	sts	0x0074, r24
    2a7c:	80 93 75 00 	sts	0x0075, r24
    2a80:	80 93 76 00 	sts	0x0076, r24
    2a84:	6c e1       	ldi	r22, 0x1C	; 28
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	91 d0       	rcall	.+290    	; 0x2bae <nvm_read_byte>
    2a8c:	8a 83       	std	Y+2, r24	; 0x02
    2a8e:	6d e1       	ldi	r22, 0x1D	; 29
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	82 e0       	ldi	r24, 0x02	; 2
    2a94:	8c d0       	rcall	.+280    	; 0x2bae <nvm_read_byte>
    2a96:	89 83       	std	Y+1, r24	; 0x01
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	01 96       	adiw	r24, 0x01	; 1
    2a9e:	21 f4       	brne	.+8      	; 0x2aa8 <sysclk_init+0x4e>
    2aa0:	80 e4       	ldi	r24, 0x40	; 64
    2aa2:	93 e2       	ldi	r25, 0x23	; 35
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2aac:	8b 83       	std	Y+3, r24	; 0x03
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	e0 e6       	ldi	r30, 0x60	; 96
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	82 83       	std	Z+2, r24	; 0x02
    2ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab8:	83 83       	std	Z+3, r24	; 0x03
    2aba:	8f b7       	in	r24, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	e0 e5       	ldi	r30, 0x50	; 80
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	90 81       	ld	r25, Z
    2ac4:	92 60       	ori	r25, 0x02	; 2
    2ac6:	90 83       	st	Z, r25
    2ac8:	8f bf       	out	0x3f, r24	; 63
    2aca:	81 81       	ldd	r24, Z+1	; 0x01
    2acc:	81 ff       	sbrs	r24, 1
    2ace:	fd cf       	rjmp	.-6      	; 0x2aca <sysclk_init+0x70>
    2ad0:	8f b7       	in	r24, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	a0 e5       	ldi	r26, 0x50	; 80
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	16 96       	adiw	r26, 0x06	; 6
    2ada:	9c 91       	ld	r25, X
    2adc:	16 97       	sbiw	r26, 0x06	; 6
    2ade:	99 7f       	andi	r25, 0xF9	; 249
    2ae0:	16 96       	adiw	r26, 0x06	; 6
    2ae2:	9c 93       	st	X, r25
    2ae4:	16 97       	sbiw	r26, 0x06	; 6
    2ae6:	e0 e6       	ldi	r30, 0x60	; 96
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	90 e8       	ldi	r25, 0x80	; 128
    2aec:	95 83       	std	Z+5, r25	; 0x05
    2aee:	9b eb       	ldi	r25, 0xBB	; 187
    2af0:	96 83       	std	Z+6, r25	; 0x06
    2af2:	16 96       	adiw	r26, 0x06	; 6
    2af4:	9c 91       	ld	r25, X
    2af6:	16 97       	sbiw	r26, 0x06	; 6
    2af8:	94 60       	ori	r25, 0x04	; 4
    2afa:	16 96       	adiw	r26, 0x06	; 6
    2afc:	9c 93       	st	X, r25
    2afe:	90 81       	ld	r25, Z
    2b00:	91 60       	ori	r25, 0x01	; 1
    2b02:	90 83       	st	Z, r25
    2b04:	8f bf       	out	0x3f, r24	; 63
    2b06:	61 e0       	ldi	r22, 0x01	; 1
    2b08:	80 e4       	ldi	r24, 0x40	; 64
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	5a d0       	rcall	.+180    	; 0x2bc2 <ccp_write_io>
    2b0e:	8f b7       	in	r24, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	e0 e5       	ldi	r30, 0x50	; 80
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	90 81       	ld	r25, Z
    2b18:	9e 7f       	andi	r25, 0xFE	; 254
    2b1a:	90 83       	st	Z, r25
    2b1c:	8f bf       	out	0x3f, r24	; 63
    2b1e:	24 96       	adiw	r28, 0x04	; 4
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	08 95       	ret

00002b2a <sysclk_enable_module>:
    2b2a:	9f b7       	in	r25, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	e8 2f       	mov	r30, r24
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	e0 59       	subi	r30, 0x90	; 144
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	60 95       	com	r22
    2b38:	80 81       	ld	r24, Z
    2b3a:	68 23       	and	r22, r24
    2b3c:	60 83       	st	Z, r22
    2b3e:	9f bf       	out	0x3f, r25	; 63
    2b40:	08 95       	ret

00002b42 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    2b42:	86 30       	cpi	r24, 0x06	; 6
    2b44:	11 f4       	brne	.+4      	; 0x2b4a <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    2b46:	68 e1       	ldi	r22, 0x18	; 24
    2b48:	01 c0       	rjmp	.+2      	; 0x2b4c <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    2b4a:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2b4c:	e0 e5       	ldi	r30, 0x50	; 80
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2b52:	81 fd       	sbrc	r24, 1
    2b54:	24 c0       	rjmp	.+72     	; 0x2b9e <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2b56:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2b58:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2b5a:	90 81       	ld	r25, Z
    2b5c:	92 60       	ori	r25, 0x02	; 2
    2b5e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b60:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2b62:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2b64:	81 ff       	sbrs	r24, 1
    2b66:	fd cf       	rjmp	.-6      	; 0x2b62 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2b68:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2b6a:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    2b6c:	a0 e5       	ldi	r26, 0x50	; 80
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	16 96       	adiw	r26, 0x06	; 6
    2b72:	9c 91       	ld	r25, X
    2b74:	16 97       	sbiw	r26, 0x06	; 6
    2b76:	99 7f       	andi	r25, 0xF9	; 249
    2b78:	16 96       	adiw	r26, 0x06	; 6
    2b7a:	9c 93       	st	X, r25
    2b7c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    2b7e:	e0 e6       	ldi	r30, 0x60	; 96
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	90 e8       	ldi	r25, 0x80	; 128
    2b84:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    2b86:	9b eb       	ldi	r25, 0xBB	; 187
    2b88:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    2b8a:	16 96       	adiw	r26, 0x06	; 6
    2b8c:	9c 91       	ld	r25, X
    2b8e:	16 97       	sbiw	r26, 0x06	; 6
    2b90:	94 60       	ori	r25, 0x04	; 4
    2b92:	16 96       	adiw	r26, 0x06	; 6
    2b94:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    2b96:	90 81       	ld	r25, Z
    2b98:	91 60       	ori	r25, 0x01	; 1
    2b9a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b9c:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2b9e:	63 60       	ori	r22, 0x03	; 3
    2ba0:	84 e4       	ldi	r24, 0x44	; 68
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e d0       	rcall	.+28     	; 0x2bc2 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    2ba6:	60 e4       	ldi	r22, 0x40	; 64
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	bf cf       	rjmp	.-130    	; 0x2b2a <sysclk_enable_module>
    2bac:	08 95       	ret

00002bae <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2bae:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2bb2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2bb4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2bb6:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    2bba:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2bbc:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2bc0:	08 95       	ret

00002bc2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2bc2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2bc4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2bc6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2bc8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2bca:	60 83       	st	Z, r22
	ret                             // Return to caller
    2bcc:	08 95       	ret

00002bce <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    2bce:	cf 92       	push	r12
    2bd0:	df 92       	push	r13
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    2bdc:	6b 01       	movw	r12, r22
    2bde:	e1 2c       	mov	r14, r1
    2be0:	f1 2c       	mov	r15, r1
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	7c e6       	ldi	r23, 0x6C	; 108
    2be6:	8c ed       	ldi	r24, 0xDC	; 220
    2be8:	92 e0       	ldi	r25, 0x02	; 2
    2bea:	a7 01       	movw	r20, r14
    2bec:	96 01       	movw	r18, r12
    2bee:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__udivmodsi4>
    2bf2:	ca 01       	movw	r24, r20
    2bf4:	b9 01       	movw	r22, r18
    2bf6:	2f ef       	ldi	r18, 0xFF	; 255
    2bf8:	3f ef       	ldi	r19, 0xFF	; 255
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__udivmodsi4>
	if (smallest_div < 1) {
    2c02:	21 15       	cp	r18, r1
    2c04:	31 05       	cpc	r19, r1
    2c06:	29 f4       	brne	.+10     	; 0x2c12 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    2c0c:	21 e0       	ldi	r18, 0x01	; 1
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	2d c0       	rjmp	.+90     	; 0x2c6c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    2c12:	22 30       	cpi	r18, 0x02	; 2
    2c14:	31 05       	cpc	r19, r1
    2c16:	28 f4       	brcc	.+10     	; 0x2c22 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    2c1c:	22 e0       	ldi	r18, 0x02	; 2
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	25 c0       	rjmp	.+74     	; 0x2c6c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2c22:	24 30       	cpi	r18, 0x04	; 4
    2c24:	31 05       	cpc	r19, r1
    2c26:	28 f4       	brcc	.+10     	; 0x2c32 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2c28:	83 e0       	ldi	r24, 0x03	; 3
    2c2a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    2c2c:	24 e0       	ldi	r18, 0x04	; 4
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	1d c0       	rjmp	.+58     	; 0x2c6c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2c32:	28 30       	cpi	r18, 0x08	; 8
    2c34:	31 05       	cpc	r19, r1
    2c36:	28 f4       	brcc	.+10     	; 0x2c42 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2c38:	84 e0       	ldi	r24, 0x04	; 4
    2c3a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    2c3c:	28 e0       	ldi	r18, 0x08	; 8
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	15 c0       	rjmp	.+42     	; 0x2c6c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2c42:	20 34       	cpi	r18, 0x40	; 64
    2c44:	31 05       	cpc	r19, r1
    2c46:	28 f4       	brcc	.+10     	; 0x2c52 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2c48:	85 e0       	ldi	r24, 0x05	; 5
    2c4a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    2c4c:	20 e4       	ldi	r18, 0x40	; 64
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	0d c0       	rjmp	.+26     	; 0x2c6c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2c52:	2f 3f       	cpi	r18, 0xFF	; 255
    2c54:	31 05       	cpc	r19, r1
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <pwm_set_frequency+0x8c>
    2c58:	28 f4       	brcc	.+10     	; 0x2c64 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    2c5a:	86 e0       	ldi	r24, 0x06	; 6
    2c5c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	31 e0       	ldi	r19, 0x01	; 1
    2c62:	04 c0       	rjmp	.+8      	; 0x2c6c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2c64:	87 e0       	ldi	r24, 0x07	; 7
    2c66:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	50 e0       	ldi	r21, 0x00	; 0
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	7c e6       	ldi	r23, 0x6C	; 108
    2c74:	8c ed       	ldi	r24, 0xDC	; 220
    2c76:	92 e0       	ldi	r25, 0x02	; 2
    2c78:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__udivmodsi4>
    2c7c:	ca 01       	movw	r24, r20
    2c7e:	b9 01       	movw	r22, r18
    2c80:	a7 01       	movw	r20, r14
    2c82:	96 01       	movw	r18, r12
    2c84:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__udivmodsi4>
    2c88:	2d 83       	std	Y+5, r18	; 0x05
    2c8a:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2c8c:	24 36       	cpi	r18, 0x64	; 100
    2c8e:	31 05       	cpc	r19, r1
    2c90:	18 f4       	brcc	.+6      	; 0x2c98 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    2c92:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2c94:	1d 82       	std	Y+5, r1	; 0x05
    2c96:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	ff 90       	pop	r15
    2c9e:	ef 90       	pop	r14
    2ca0:	df 90       	pop	r13
    2ca2:	cf 90       	pop	r12
    2ca4:	08 95       	ret

00002ca6 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	ec 01       	movw	r28, r24
    2cb0:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
	UNUSED(num_chan);

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    2cb2:	62 30       	cpi	r22, 0x02	; 2
    2cb4:	b9 f1       	breq	.+110    	; 0x2d24 <pwm_init+0x7e>
    2cb6:	28 f4       	brcc	.+10     	; 0x2cc2 <pwm_init+0x1c>
    2cb8:	66 23       	and	r22, r22
    2cba:	51 f0       	breq	.+20     	; 0x2cd0 <pwm_init+0x2a>
    2cbc:	61 30       	cpi	r22, 0x01	; 1
    2cbe:	e9 f0       	breq	.+58     	; 0x2cfa <pwm_init+0x54>
    2cc0:	6f c0       	rjmp	.+222    	; 0x2da0 <pwm_init+0xfa>
    2cc2:	63 30       	cpi	r22, 0x03	; 3
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <pwm_init+0x22>
    2cc6:	43 c0       	rjmp	.+134    	; 0x2d4e <pwm_init+0xa8>
    2cc8:	64 30       	cpi	r22, 0x04	; 4
    2cca:	09 f4       	brne	.+2      	; 0x2cce <pwm_init+0x28>
    2ccc:	55 c0       	rjmp	.+170    	; 0x2d78 <pwm_init+0xd2>
    2cce:	68 c0       	rjmp	.+208    	; 0x2da0 <pwm_init+0xfa>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	98 e0       	ldi	r25, 0x08	; 8
    2cd4:	88 83       	st	Y, r24
    2cd6:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    2cd8:	e0 e4       	ldi	r30, 0x40	; 64
    2cda:	f6 e0       	ldi	r31, 0x06	; 6
    2cdc:	50 81       	ld	r21, Z
    2cde:	21 e0       	ldi	r18, 0x01	; 1
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	8f ef       	ldi	r24, 0xFF	; 255
    2ce4:	84 0f       	add	r24, r20
    2ce6:	b9 01       	movw	r22, r18
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <pwm_init+0x48>
    2cea:	66 0f       	add	r22, r22
    2cec:	77 1f       	adc	r23, r23
    2cee:	8a 95       	dec	r24
    2cf0:	e2 f7       	brpl	.-8      	; 0x2cea <pwm_init+0x44>
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	85 2b       	or	r24, r21
    2cf6:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2cf8:	53 c0       	rjmp	.+166    	; 0x2da0 <pwm_init+0xfa>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    2cfa:	80 e4       	ldi	r24, 0x40	; 64
    2cfc:	98 e0       	ldi	r25, 0x08	; 8
    2cfe:	88 83       	st	Y, r24
    2d00:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    2d02:	e0 e4       	ldi	r30, 0x40	; 64
    2d04:	f6 e0       	ldi	r31, 0x06	; 6
    2d06:	50 81       	ld	r21, Z
    2d08:	21 e0       	ldi	r18, 0x01	; 1
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	83 e0       	ldi	r24, 0x03	; 3
    2d0e:	84 0f       	add	r24, r20
    2d10:	b9 01       	movw	r22, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <pwm_init+0x72>
    2d14:	66 0f       	add	r22, r22
    2d16:	77 1f       	adc	r23, r23
    2d18:	8a 95       	dec	r24
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <pwm_init+0x6e>
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	85 2b       	or	r24, r21
    2d20:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2d22:	3e c0       	rjmp	.+124    	; 0x2da0 <pwm_init+0xfa>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	99 e0       	ldi	r25, 0x09	; 9
    2d28:	88 83       	st	Y, r24
    2d2a:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    2d2c:	e0 e6       	ldi	r30, 0x60	; 96
    2d2e:	f6 e0       	ldi	r31, 0x06	; 6
    2d30:	50 81       	ld	r21, Z
    2d32:	21 e0       	ldi	r18, 0x01	; 1
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	8f ef       	ldi	r24, 0xFF	; 255
    2d38:	84 0f       	add	r24, r20
    2d3a:	b9 01       	movw	r22, r18
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <pwm_init+0x9c>
    2d3e:	66 0f       	add	r22, r22
    2d40:	77 1f       	adc	r23, r23
    2d42:	8a 95       	dec	r24
    2d44:	e2 f7       	brpl	.-8      	; 0x2d3e <pwm_init+0x98>
    2d46:	cb 01       	movw	r24, r22
    2d48:	85 2b       	or	r24, r21
    2d4a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2d4c:	29 c0       	rjmp	.+82     	; 0x2da0 <pwm_init+0xfa>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2d4e:	80 e4       	ldi	r24, 0x40	; 64
    2d50:	99 e0       	ldi	r25, 0x09	; 9
    2d52:	88 83       	st	Y, r24
    2d54:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2d56:	e0 e6       	ldi	r30, 0x60	; 96
    2d58:	f6 e0       	ldi	r31, 0x06	; 6
    2d5a:	50 81       	ld	r21, Z
    2d5c:	21 e0       	ldi	r18, 0x01	; 1
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	84 0f       	add	r24, r20
    2d64:	b9 01       	movw	r22, r18
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <pwm_init+0xc6>
    2d68:	66 0f       	add	r22, r22
    2d6a:	77 1f       	adc	r23, r23
    2d6c:	8a 95       	dec	r24
    2d6e:	e2 f7       	brpl	.-8      	; 0x2d68 <pwm_init+0xc2>
    2d70:	cb 01       	movw	r24, r22
    2d72:	85 2b       	or	r24, r21
    2d74:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2d76:	14 c0       	rjmp	.+40     	; 0x2da0 <pwm_init+0xfa>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	9a e0       	ldi	r25, 0x0A	; 10
    2d7c:	88 83       	st	Y, r24
    2d7e:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2d80:	e0 e8       	ldi	r30, 0x80	; 128
    2d82:	f6 e0       	ldi	r31, 0x06	; 6
    2d84:	50 81       	ld	r21, Z
    2d86:	21 e0       	ldi	r18, 0x01	; 1
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	8f ef       	ldi	r24, 0xFF	; 255
    2d8c:	84 0f       	add	r24, r20
    2d8e:	b9 01       	movw	r22, r18
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <pwm_init+0xf0>
    2d92:	66 0f       	add	r22, r22
    2d94:	77 1f       	adc	r23, r23
    2d96:	8a 95       	dec	r24
    2d98:	e2 f7       	brpl	.-8      	; 0x2d92 <pwm_init+0xec>
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	85 2b       	or	r24, r21
    2d9e:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    2da0:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    2da2:	42 30       	cpi	r20, 0x02	; 2
    2da4:	61 f0       	breq	.+24     	; 0x2dbe <pwm_init+0x118>
    2da6:	18 f4       	brcc	.+6      	; 0x2dae <pwm_init+0x108>
    2da8:	41 30       	cpi	r20, 0x01	; 1
    2daa:	31 f0       	breq	.+12     	; 0x2db8 <pwm_init+0x112>
    2dac:	10 c0       	rjmp	.+32     	; 0x2dce <pwm_init+0x128>
    2dae:	43 30       	cpi	r20, 0x03	; 3
    2db0:	49 f0       	breq	.+18     	; 0x2dc4 <pwm_init+0x11e>
    2db2:	44 30       	cpi	r20, 0x04	; 4
    2db4:	51 f0       	breq	.+20     	; 0x2dca <pwm_init+0x124>
    2db6:	0b c0       	rjmp	.+22     	; 0x2dce <pwm_init+0x128>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    2db8:	80 e1       	ldi	r24, 0x10	; 16
    2dba:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2dbc:	08 c0       	rjmp	.+16     	; 0x2dce <pwm_init+0x128>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    2dbe:	80 e2       	ldi	r24, 0x20	; 32
    2dc0:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2dc2:	05 c0       	rjmp	.+10     	; 0x2dce <pwm_init+0x128>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    2dc4:	80 e4       	ldi	r24, 0x40	; 64
    2dc6:	8b 83       	std	Y+3, r24	; 0x03
		break;
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <pwm_init+0x128>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    2dca:	80 e8       	ldi	r24, 0x80	; 128
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    2dce:	88 81       	ld	r24, Y
    2dd0:	99 81       	ldd	r25, Y+1	; 0x01
    2dd2:	0e 94 24 0c 	call	0x1848	; 0x1848 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    2dd6:	e8 81       	ld	r30, Y
    2dd8:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2dda:	81 81       	ldd	r24, Z+1	; 0x01
    2ddc:	88 7f       	andi	r24, 0xF8	; 248
    2dde:	83 60       	ori	r24, 0x03	; 3
    2de0:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2de2:	1d 82       	std	Y+5, r1	; 0x05
    2de4:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2de6:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    2de8:	e8 81       	ld	r30, Y
    2dea:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2dec:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2dee:	80 7f       	andi	r24, 0xF0	; 240
    2df0:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2df2:	b8 01       	movw	r22, r16
    2df4:	ce 01       	movw	r24, r28
    2df6:	eb de       	rcall	.-554    	; 0x2bce <pwm_set_frequency>
}
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	08 95       	ret

00002e02 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    2e08:	ad 81       	ldd	r26, Y+5	; 0x05
    2e0a:	be 81       	ldd	r27, Y+6	; 0x06
    2e0c:	26 2f       	mov	r18, r22
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    2e14:	24 e6       	ldi	r18, 0x64	; 100
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e0       	ldi	r20, 0x00	; 0
    2e1a:	50 e0       	ldi	r21, 0x00	; 0
    2e1c:	0e 94 19 27 	call	0x4e32	; 0x4e32 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	e8 81       	ld	r30, Y
    2e24:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2e26:	e6 fd       	sbrc	r30, 6
    2e28:	17 c0       	rjmp	.+46     	; 0x2e58 <pwm_start+0x56>
		switch (channel_index) {
    2e2a:	82 30       	cpi	r24, 0x02	; 2
    2e2c:	61 f0       	breq	.+24     	; 0x2e46 <pwm_start+0x44>
    2e2e:	18 f4       	brcc	.+6      	; 0x2e36 <pwm_start+0x34>
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	31 f0       	breq	.+12     	; 0x2e40 <pwm_start+0x3e>
    2e34:	1b c0       	rjmp	.+54     	; 0x2e6c <pwm_start+0x6a>
    2e36:	83 30       	cpi	r24, 0x03	; 3
    2e38:	49 f0       	breq	.+18     	; 0x2e4c <pwm_start+0x4a>
    2e3a:	84 30       	cpi	r24, 0x04	; 4
    2e3c:	51 f0       	breq	.+20     	; 0x2e52 <pwm_start+0x50>
    2e3e:	16 c0       	rjmp	.+44     	; 0x2e6c <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2e40:	20 af       	std	Z+56, r18	; 0x38
    2e42:	31 af       	std	Z+57, r19	; 0x39
    2e44:	13 c0       	rjmp	.+38     	; 0x2e6c <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2e46:	22 af       	std	Z+58, r18	; 0x3a
    2e48:	33 af       	std	Z+59, r19	; 0x3b
    2e4a:	10 c0       	rjmp	.+32     	; 0x2e6c <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2e4c:	24 af       	std	Z+60, r18	; 0x3c
    2e4e:	35 af       	std	Z+61, r19	; 0x3d
    2e50:	0d c0       	rjmp	.+26     	; 0x2e6c <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2e52:	26 af       	std	Z+62, r18	; 0x3e
    2e54:	37 af       	std	Z+63, r19	; 0x3f
    2e56:	0a c0       	rjmp	.+20     	; 0x2e6c <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2e58:	81 30       	cpi	r24, 0x01	; 1
    2e5a:	19 f0       	breq	.+6      	; 0x2e62 <pwm_start+0x60>
    2e5c:	82 30       	cpi	r24, 0x02	; 2
    2e5e:	21 f0       	breq	.+8      	; 0x2e68 <pwm_start+0x66>
    2e60:	05 c0       	rjmp	.+10     	; 0x2e6c <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2e62:	20 af       	std	Z+56, r18	; 0x38
    2e64:	31 af       	std	Z+57, r19	; 0x39
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2e68:	22 af       	std	Z+58, r18	; 0x3a
    2e6a:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	e8 81       	ld	r30, Y
    2e72:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2e74:	86 a3       	std	Z+38, r24	; 0x26
    2e76:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	e8 81       	ld	r30, Y
    2e7c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    2e7e:	e6 fd       	sbrc	r30, 6
    2e80:	04 c0       	rjmp	.+8      	; 0x2e8a <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    2e82:	91 81       	ldd	r25, Z+1	; 0x01
    2e84:	89 2b       	or	r24, r25
    2e86:	81 83       	std	Z+1, r24	; 0x01
    2e88:	04 c0       	rjmp	.+8      	; 0x2e92 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    2e8a:	91 81       	ldd	r25, Z+1	; 0x01
    2e8c:	80 73       	andi	r24, 0x30	; 48
    2e8e:	89 2b       	or	r24, r25
    2e90:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    2e92:	e8 81       	ld	r30, Y
    2e94:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2e96:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2e98:	80 7f       	andi	r24, 0xF0	; 240
    2e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9c:	89 2b       	or	r24, r25
    2e9e:	80 83       	st	Z, r24
}
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	08 95       	ret

00002ea6 <resetGestureParameters>:
    if( !setMode(GESTURE, 0) ) {
        return FALSE;
    }
    
    return TRUE;
}
    2ea6:	10 92 e3 24 	sts	0x24E3, r1
    2eaa:	10 92 e4 24 	sts	0x24E4, r1
    2eae:	10 92 5d 24 	sts	0x245D, r1
    2eb2:	10 92 5e 24 	sts	0x245E, r1
    2eb6:	10 92 54 24 	sts	0x2454, r1
    2eba:	10 92 55 24 	sts	0x2455, r1
    2ebe:	10 92 38 24 	sts	0x2438, r1
    2ec2:	10 92 39 24 	sts	0x2439, r1
    2ec6:	10 92 44 24 	sts	0x2444, r1
    2eca:	10 92 45 24 	sts	0x2445, r1
    2ece:	10 92 e7 24 	sts	0x24E7, r1
    2ed2:	10 92 e8 24 	sts	0x24E8, r1
    2ed6:	10 92 4a 24 	sts	0x244A, r1
    2eda:	10 92 4b 24 	sts	0x244B, r1
    2ede:	10 92 46 24 	sts	0x2446, r1
    2ee2:	10 92 47 24 	sts	0x2447, r1
    2ee6:	10 92 5f 24 	sts	0x245F, r1
    2eea:	10 92 60 24 	sts	0x2460, r1
    2eee:	08 95       	ret

00002ef0 <processGestureData>:
    2ef0:	8f 92       	push	r8
    2ef2:	9f 92       	push	r9
    2ef4:	af 92       	push	r10
    2ef6:	bf 92       	push	r11
    2ef8:	cf 92       	push	r12
    2efa:	df 92       	push	r13
    2efc:	ef 92       	push	r14
    2efe:	ff 92       	push	r15
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	00 91 e4 24 	lds	r16, 0x24E4
    2f0c:	05 30       	cpi	r16, 0x05	; 5
    2f0e:	08 f4       	brcc	.+2      	; 0x2f12 <processGestureData+0x22>
    2f10:	83 c1       	rjmp	.+774    	; 0x3218 <__stack+0x219>
    2f12:	8f ef       	ldi	r24, 0xFF	; 255
    2f14:	80 0f       	add	r24, r16
    2f16:	80 32       	cpi	r24, 0x20	; 32
    2f18:	08 f0       	brcs	.+2      	; 0x2f1c <processGestureData+0x2c>
    2f1a:	53 c0       	rjmp	.+166    	; 0x2fc2 <processGestureData+0xd2>
    2f1c:	c0 2e       	mov	r12, r16
    2f1e:	d1 2c       	mov	r13, r1
    2f20:	1c 14       	cp	r1, r12
    2f22:	1d 04       	cpc	r1, r13
    2f24:	0c f0       	brlt	.+2      	; 0x2f28 <processGestureData+0x38>
    2f26:	7b c1       	rjmp	.+758    	; 0x321e <__stack+0x21f>
    2f28:	e3 e6       	ldi	r30, 0x63	; 99
    2f2a:	f4 e2       	ldi	r31, 0x24	; 36
    2f2c:	83 ec       	ldi	r24, 0xC3	; 195
    2f2e:	94 e2       	ldi	r25, 0x24	; 36
    2f30:	76 01       	movw	r14, r12
    2f32:	af 01       	movw	r20, r30
    2f34:	97 01       	movw	r18, r14
    2f36:	2d 53       	subi	r18, 0x3D	; 61
    2f38:	3b 4d       	sbci	r19, 0xDB	; 219
    2f3a:	71 91       	ld	r23, Z+
    2f3c:	7b 30       	cpi	r23, 0x0B	; 11
    2f3e:	78 f0       	brcs	.+30     	; 0x2f5e <processGestureData+0x6e>
    2f40:	ec 01       	movw	r28, r24
    2f42:	dc 01       	movw	r26, r24
    2f44:	a0 54       	subi	r26, 0x40	; 64
    2f46:	b1 09       	sbc	r27, r1
    2f48:	0c 91       	ld	r16, X
    2f4a:	0b 30       	cpi	r16, 0x0B	; 11
    2f4c:	40 f0       	brcs	.+16     	; 0x2f5e <processGestureData+0x6e>
    2f4e:	90 96       	adiw	r26, 0x20	; 32
    2f50:	1c 91       	ld	r17, X
    2f52:	1b 30       	cpi	r17, 0x0B	; 11
    2f54:	20 f0       	brcs	.+8      	; 0x2f5e <processGestureData+0x6e>
    2f56:	98 80       	ld	r9, Y
    2f58:	6a e0       	ldi	r22, 0x0A	; 10
    2f5a:	69 15       	cp	r22, r9
    2f5c:	28 f0       	brcs	.+10     	; 0x2f68 <processGestureData+0x78>
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	82 17       	cp	r24, r18
    2f62:	93 07       	cpc	r25, r19
    2f64:	51 f7       	brne	.-44     	; 0x2f3a <processGestureData+0x4a>
    2f66:	5e c1       	rjmp	.+700    	; 0x3224 <__stack+0x225>
    2f68:	77 23       	and	r23, r23
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <processGestureData+0x7e>
    2f6c:	5e c1       	rjmp	.+700    	; 0x322a <__stack+0x22b>
    2f6e:	00 23       	and	r16, r16
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <processGestureData+0x84>
    2f72:	5e c1       	rjmp	.+700    	; 0x3230 <__stack+0x231>
    2f74:	11 23       	and	r17, r17
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <processGestureData+0x8a>
    2f78:	5e c1       	rjmp	.+700    	; 0x3236 <__stack+0x237>
    2f7a:	99 20       	and	r9, r9
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <processGestureData+0x90>
    2f7e:	5e c1       	rjmp	.+700    	; 0x323c <__stack+0x23d>
    2f80:	c6 01       	movw	r24, r12
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	99 23       	and	r25, r25
    2f86:	34 f1       	brlt	.+76     	; 0x2fd4 <processGestureData+0xe4>
    2f88:	f7 01       	movw	r30, r14
    2f8a:	ed 59       	subi	r30, 0x9D	; 157
    2f8c:	fb 4d       	sbci	r31, 0xDB	; 219
    2f8e:	dc 01       	movw	r26, r24
    2f90:	ad 57       	subi	r26, 0x7D	; 125
    2f92:	bb 4d       	sbci	r27, 0xDB	; 219
    2f94:	31 97       	sbiw	r30, 0x01	; 1
    2f96:	60 81       	ld	r22, Z
    2f98:	6b 30       	cpi	r22, 0x0B	; 11
    2f9a:	70 f0       	brcs	.+28     	; 0x2fb8 <processGestureData+0xc8>
    2f9c:	8c 91       	ld	r24, X
    2f9e:	8b 30       	cpi	r24, 0x0B	; 11
    2fa0:	58 f0       	brcs	.+22     	; 0x2fb8 <processGestureData+0xc8>
    2fa2:	ef 01       	movw	r28, r30
    2fa4:	c0 5c       	subi	r28, 0xC0	; 192
    2fa6:	df 4f       	sbci	r29, 0xFF	; 255
    2fa8:	98 81       	ld	r25, Y
    2faa:	9b 30       	cpi	r25, 0x0B	; 11
    2fac:	28 f0       	brcs	.+10     	; 0x2fb8 <processGestureData+0xc8>
    2fae:	a0 96       	adiw	r28, 0x20	; 32
    2fb0:	88 80       	ld	r8, Y
    2fb2:	2a e0       	ldi	r18, 0x0A	; 10
    2fb4:	28 15       	cp	r18, r8
    2fb6:	b8 f0       	brcs	.+46     	; 0x2fe6 <processGestureData+0xf6>
    2fb8:	11 97       	sbiw	r26, 0x01	; 1
    2fba:	e4 17       	cp	r30, r20
    2fbc:	f5 07       	cpc	r31, r21
    2fbe:	51 f7       	brne	.-44     	; 0x2f94 <processGestureData+0xa4>
    2fc0:	0e c0       	rjmp	.+28     	; 0x2fde <processGestureData+0xee>
    2fc2:	81 2c       	mov	r8, r1
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	91 2c       	mov	r9, r1
    2fcc:	10 e0       	ldi	r17, 0x00	; 0
    2fce:	00 e0       	ldi	r16, 0x00	; 0
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	09 c0       	rjmp	.+18     	; 0x2fe6 <processGestureData+0xf6>
    2fd4:	81 2c       	mov	r8, r1
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <processGestureData+0xf6>
    2fde:	81 2c       	mov	r8, r1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	a7 2e       	mov	r10, r23
    2fe8:	b1 2c       	mov	r11, r1
    2fea:	c0 2e       	mov	r12, r16
    2fec:	d1 2c       	mov	r13, r1
    2fee:	c1 2f       	mov	r28, r17
    2ff0:	d0 e0       	ldi	r29, 0x00	; 0
    2ff2:	29 2d       	mov	r18, r9
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	70 e0       	ldi	r23, 0x00	; 0
    2ff8:	48 2f       	mov	r20, r24
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	e9 2e       	mov	r14, r25
    2ffe:	f1 2c       	mov	r15, r1
    3000:	08 2d       	mov	r16, r8
    3002:	10 e0       	ldi	r17, 0x00	; 0
    3004:	fb 01       	movw	r30, r22
    3006:	e4 1b       	sub	r30, r20
    3008:	f5 0b       	sbc	r31, r21
    300a:	0f 2e       	mov	r0, r31
    300c:	f4 e6       	ldi	r31, 0x64	; 100
    300e:	9f 2e       	mov	r9, r31
    3010:	f0 2d       	mov	r31, r0
    3012:	9e 9e       	mul	r9, r30
    3014:	c0 01       	movw	r24, r0
    3016:	9f 9e       	mul	r9, r31
    3018:	90 0d       	add	r25, r0
    301a:	11 24       	eor	r1, r1
    301c:	64 0f       	add	r22, r20
    301e:	75 1f       	adc	r23, r21
    3020:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__divmodhi4>
    3024:	fb 01       	movw	r30, r22
    3026:	a5 01       	movw	r20, r10
    3028:	4c 19       	sub	r20, r12
    302a:	5d 09       	sbc	r21, r13
    302c:	94 9e       	mul	r9, r20
    302e:	c0 01       	movw	r24, r0
    3030:	95 9e       	mul	r9, r21
    3032:	90 0d       	add	r25, r0
    3034:	11 24       	eor	r1, r1
    3036:	b5 01       	movw	r22, r10
    3038:	6c 0d       	add	r22, r12
    303a:	7d 1d       	adc	r23, r13
    303c:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__divmodhi4>
    3040:	e6 1b       	sub	r30, r22
    3042:	f7 0b       	sbc	r31, r23
    3044:	a7 01       	movw	r20, r14
    3046:	40 1b       	sub	r20, r16
    3048:	51 0b       	sbc	r21, r17
    304a:	94 9e       	mul	r9, r20
    304c:	c0 01       	movw	r24, r0
    304e:	95 9e       	mul	r9, r21
    3050:	90 0d       	add	r25, r0
    3052:	11 24       	eor	r1, r1
    3054:	b7 01       	movw	r22, r14
    3056:	60 0f       	add	r22, r16
    3058:	71 1f       	adc	r23, r17
    305a:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__divmodhi4>
    305e:	8b 01       	movw	r16, r22
    3060:	ae 01       	movw	r20, r28
    3062:	42 1b       	sub	r20, r18
    3064:	53 0b       	sbc	r21, r19
    3066:	94 9e       	mul	r9, r20
    3068:	c0 01       	movw	r24, r0
    306a:	95 9e       	mul	r9, r21
    306c:	90 0d       	add	r25, r0
    306e:	11 24       	eor	r1, r1
    3070:	be 01       	movw	r22, r28
    3072:	62 0f       	add	r22, r18
    3074:	73 1f       	adc	r23, r19
    3076:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__divmodhi4>
    307a:	c8 01       	movw	r24, r16
    307c:	86 1b       	sub	r24, r22
    307e:	97 0b       	sbc	r25, r23
    3080:	bc 01       	movw	r22, r24
    3082:	20 91 5d 24 	lds	r18, 0x245D
    3086:	30 91 5e 24 	lds	r19, 0x245E
    308a:	2e 0f       	add	r18, r30
    308c:	3f 1f       	adc	r19, r31
    308e:	20 93 5d 24 	sts	0x245D, r18
    3092:	30 93 5e 24 	sts	0x245E, r19
    3096:	80 91 54 24 	lds	r24, 0x2454
    309a:	90 91 55 24 	lds	r25, 0x2455
    309e:	86 0f       	add	r24, r22
    30a0:	97 1f       	adc	r25, r23
    30a2:	80 93 54 24 	sts	0x2454, r24
    30a6:	90 93 55 24 	sts	0x2455, r25
    30aa:	22 33       	cpi	r18, 0x32	; 50
    30ac:	31 05       	cpc	r19, r1
    30ae:	3c f0       	brlt	.+14     	; 0x30be <__stack+0xbf>
    30b0:	21 e0       	ldi	r18, 0x01	; 1
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	20 93 38 24 	sts	0x2438, r18
    30b8:	30 93 39 24 	sts	0x2439, r19
    30bc:	0e c0       	rjmp	.+28     	; 0x30da <__stack+0xdb>
    30be:	2f 3c       	cpi	r18, 0xCF	; 207
    30c0:	3f 4f       	sbci	r19, 0xFF	; 255
    30c2:	3c f4       	brge	.+14     	; 0x30d2 <__stack+0xd3>
    30c4:	2f ef       	ldi	r18, 0xFF	; 255
    30c6:	3f ef       	ldi	r19, 0xFF	; 255
    30c8:	20 93 38 24 	sts	0x2438, r18
    30cc:	30 93 39 24 	sts	0x2439, r19
    30d0:	04 c0       	rjmp	.+8      	; 0x30da <__stack+0xdb>
    30d2:	10 92 38 24 	sts	0x2438, r1
    30d6:	10 92 39 24 	sts	0x2439, r1
    30da:	82 33       	cpi	r24, 0x32	; 50
    30dc:	91 05       	cpc	r25, r1
    30de:	3c f0       	brlt	.+14     	; 0x30ee <__stack+0xef>
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	80 93 44 24 	sts	0x2444, r24
    30e8:	90 93 45 24 	sts	0x2445, r25
    30ec:	0e c0       	rjmp	.+28     	; 0x310a <__stack+0x10b>
    30ee:	8f 3c       	cpi	r24, 0xCF	; 207
    30f0:	9f 4f       	sbci	r25, 0xFF	; 255
    30f2:	3c f4       	brge	.+14     	; 0x3102 <__stack+0x103>
    30f4:	8f ef       	ldi	r24, 0xFF	; 255
    30f6:	9f ef       	ldi	r25, 0xFF	; 255
    30f8:	80 93 44 24 	sts	0x2444, r24
    30fc:	90 93 45 24 	sts	0x2445, r25
    3100:	04 c0       	rjmp	.+8      	; 0x310a <__stack+0x10b>
    3102:	10 92 44 24 	sts	0x2444, r1
    3106:	10 92 45 24 	sts	0x2445, r1
    310a:	80 91 38 24 	lds	r24, 0x2438
    310e:	90 91 39 24 	lds	r25, 0x2439
    3112:	89 2b       	or	r24, r25
    3114:	09 f0       	breq	.+2      	; 0x3118 <__stack+0x119>
    3116:	4f c0       	rjmp	.+158    	; 0x31b6 <__stack+0x1b7>
    3118:	80 91 44 24 	lds	r24, 0x2444
    311c:	90 91 45 24 	lds	r25, 0x2445
    3120:	89 2b       	or	r24, r25
    3122:	09 f0       	breq	.+2      	; 0x3126 <__stack+0x127>
    3124:	48 c0       	rjmp	.+144    	; 0x31b6 <__stack+0x1b7>
    3126:	cf 01       	movw	r24, r30
    3128:	43 96       	adiw	r24, 0x13	; 19
    312a:	87 97       	sbiw	r24, 0x27	; 39
    312c:	08 f0       	brcs	.+2      	; 0x3130 <__stack+0x131>
    312e:	89 c0       	rjmp	.+274    	; 0x3242 <__stack+0x243>
    3130:	cb 01       	movw	r24, r22
    3132:	43 96       	adiw	r24, 0x13	; 19
    3134:	87 97       	sbiw	r24, 0x27	; 39
    3136:	08 f0       	brcs	.+2      	; 0x313a <__stack+0x13b>
    3138:	87 c0       	rjmp	.+270    	; 0x3248 <__stack+0x249>
    313a:	30 97       	sbiw	r30, 0x00	; 0
    313c:	69 f4       	brne	.+26     	; 0x3158 <__stack+0x159>
    313e:	61 15       	cp	r22, r1
    3140:	71 05       	cpc	r23, r1
    3142:	51 f4       	brne	.+20     	; 0x3158 <__stack+0x159>
    3144:	80 91 e7 24 	lds	r24, 0x24E7
    3148:	90 91 e8 24 	lds	r25, 0x24E8
    314c:	01 96       	adiw	r24, 0x01	; 1
    314e:	80 93 e7 24 	sts	0x24E7, r24
    3152:	90 93 e8 24 	sts	0x24E8, r25
    3156:	09 c0       	rjmp	.+18     	; 0x316a <__stack+0x16b>
    3158:	80 91 4a 24 	lds	r24, 0x244A
    315c:	90 91 4b 24 	lds	r25, 0x244B
    3160:	01 96       	adiw	r24, 0x01	; 1
    3162:	80 93 4a 24 	sts	0x244A, r24
    3166:	90 93 4b 24 	sts	0x244B, r25
    316a:	80 91 e7 24 	lds	r24, 0x24E7
    316e:	90 91 e8 24 	lds	r25, 0x24E8
    3172:	0a 97       	sbiw	r24, 0x0a	; 10
    3174:	0c f4       	brge	.+2      	; 0x3178 <__stack+0x179>
    3176:	6b c0       	rjmp	.+214    	; 0x324e <__stack+0x24f>
    3178:	80 91 4a 24 	lds	r24, 0x244A
    317c:	90 91 4b 24 	lds	r25, 0x244B
    3180:	02 97       	sbiw	r24, 0x02	; 2
    3182:	0c f4       	brge	.+2      	; 0x3186 <__stack+0x187>
    3184:	67 c0       	rjmp	.+206    	; 0x3254 <__stack+0x255>
    3186:	ef 2b       	or	r30, r31
    3188:	51 f4       	brne	.+20     	; 0x319e <__stack+0x19f>
    318a:	67 2b       	or	r22, r23
    318c:	09 f0       	breq	.+2      	; 0x3190 <__stack+0x191>
    318e:	65 c0       	rjmp	.+202    	; 0x325a <__stack+0x25b>
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	80 93 46 24 	sts	0x2446, r24
    3198:	90 93 47 24 	sts	0x2447, r25
    319c:	6c c0       	rjmp	.+216    	; 0x3276 <__stack+0x277>
    319e:	67 2b       	or	r22, r23
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <__stack+0x1a5>
    31a2:	5e c0       	rjmp	.+188    	; 0x3260 <__stack+0x261>
    31a4:	82 e0       	ldi	r24, 0x02	; 2
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	80 93 46 24 	sts	0x2446, r24
    31ac:	90 93 47 24 	sts	0x2447, r25
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	60 c0       	rjmp	.+192    	; 0x3276 <__stack+0x277>
    31b6:	cf 01       	movw	r24, r30
    31b8:	43 96       	adiw	r24, 0x13	; 19
    31ba:	87 97       	sbiw	r24, 0x27	; 39
    31bc:	08 f0       	brcs	.+2      	; 0x31c0 <__stack+0x1c1>
    31be:	53 c0       	rjmp	.+166    	; 0x3266 <__stack+0x267>
    31c0:	cb 01       	movw	r24, r22
    31c2:	43 96       	adiw	r24, 0x13	; 19
    31c4:	87 97       	sbiw	r24, 0x27	; 39
    31c6:	08 f0       	brcs	.+2      	; 0x31ca <__stack+0x1cb>
    31c8:	51 c0       	rjmp	.+162    	; 0x326c <__stack+0x26d>
    31ca:	ef 2b       	or	r30, r31
    31cc:	59 f4       	brne	.+22     	; 0x31e4 <__stack+0x1e5>
    31ce:	67 2b       	or	r22, r23
    31d0:	49 f4       	brne	.+18     	; 0x31e4 <__stack+0x1e5>
    31d2:	80 91 e7 24 	lds	r24, 0x24E7
    31d6:	90 91 e8 24 	lds	r25, 0x24E8
    31da:	01 96       	adiw	r24, 0x01	; 1
    31dc:	80 93 e7 24 	sts	0x24E7, r24
    31e0:	90 93 e8 24 	sts	0x24E8, r25
    31e4:	80 91 e7 24 	lds	r24, 0x24E7
    31e8:	90 91 e8 24 	lds	r25, 0x24E8
    31ec:	0a 97       	sbiw	r24, 0x0a	; 10
    31ee:	0c f4       	brge	.+2      	; 0x31f2 <__stack+0x1f3>
    31f0:	40 c0       	rjmp	.+128    	; 0x3272 <__stack+0x273>
    31f2:	10 92 38 24 	sts	0x2438, r1
    31f6:	10 92 39 24 	sts	0x2439, r1
    31fa:	10 92 44 24 	sts	0x2444, r1
    31fe:	10 92 45 24 	sts	0x2445, r1
    3202:	10 92 5d 24 	sts	0x245D, r1
    3206:	10 92 5e 24 	sts	0x245E, r1
    320a:	10 92 54 24 	sts	0x2454, r1
    320e:	10 92 55 24 	sts	0x2455, r1
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	2f c0       	rjmp	.+94     	; 0x3276 <__stack+0x277>
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	2c c0       	rjmp	.+88     	; 0x3276 <__stack+0x277>
    321e:	80 e0       	ldi	r24, 0x00	; 0
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	29 c0       	rjmp	.+82     	; 0x3276 <__stack+0x277>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	26 c0       	rjmp	.+76     	; 0x3276 <__stack+0x277>
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	23 c0       	rjmp	.+70     	; 0x3276 <__stack+0x277>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	20 c0       	rjmp	.+64     	; 0x3276 <__stack+0x277>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	1d c0       	rjmp	.+58     	; 0x3276 <__stack+0x277>
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	1a c0       	rjmp	.+52     	; 0x3276 <__stack+0x277>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	17 c0       	rjmp	.+46     	; 0x3276 <__stack+0x277>
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	14 c0       	rjmp	.+40     	; 0x3276 <__stack+0x277>
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	11 c0       	rjmp	.+34     	; 0x3276 <__stack+0x277>
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	0e c0       	rjmp	.+28     	; 0x3276 <__stack+0x277>
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	0b c0       	rjmp	.+22     	; 0x3276 <__stack+0x277>
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	08 c0       	rjmp	.+16     	; 0x3276 <__stack+0x277>
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	05 c0       	rjmp	.+10     	; 0x3276 <__stack+0x277>
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	02 c0       	rjmp	.+4      	; 0x3276 <__stack+0x277>
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	df 91       	pop	r29
    3278:	cf 91       	pop	r28
    327a:	1f 91       	pop	r17
    327c:	0f 91       	pop	r16
    327e:	ff 90       	pop	r15
    3280:	ef 90       	pop	r14
    3282:	df 90       	pop	r13
    3284:	cf 90       	pop	r12
    3286:	bf 90       	pop	r11
    3288:	af 90       	pop	r10
    328a:	9f 90       	pop	r9
    328c:	8f 90       	pop	r8
    328e:	08 95       	ret

00003290 <decodeGesture>:
    3290:	80 91 46 24 	lds	r24, 0x2446
    3294:	90 91 47 24 	lds	r25, 0x2447
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	91 05       	cpc	r25, r1
    329c:	49 f4       	brne	.+18     	; 0x32b0 <decodeGesture+0x20>
    329e:	85 e0       	ldi	r24, 0x05	; 5
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	80 93 5f 24 	sts	0x245F, r24
    32a6:	90 93 60 24 	sts	0x2460, r25
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	08 95       	ret
    32b0:	02 97       	sbiw	r24, 0x02	; 2
    32b2:	49 f4       	brne	.+18     	; 0x32c6 <decodeGesture+0x36>
    32b4:	86 e0       	ldi	r24, 0x06	; 6
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	80 93 5f 24 	sts	0x245F, r24
    32bc:	90 93 60 24 	sts	0x2460, r25
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	08 95       	ret
    32c6:	80 91 38 24 	lds	r24, 0x2438
    32ca:	90 91 39 24 	lds	r25, 0x2439
    32ce:	8f 3f       	cpi	r24, 0xFF	; 255
    32d0:	2f ef       	ldi	r18, 0xFF	; 255
    32d2:	92 07       	cpc	r25, r18
    32d4:	79 f4       	brne	.+30     	; 0x32f4 <decodeGesture+0x64>
    32d6:	20 91 44 24 	lds	r18, 0x2444
    32da:	30 91 45 24 	lds	r19, 0x2445
    32de:	23 2b       	or	r18, r19
    32e0:	c9 f5       	brne	.+114    	; 0x3354 <decodeGesture+0xc4>
    32e2:	83 e0       	ldi	r24, 0x03	; 3
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	80 93 5f 24 	sts	0x245F, r24
    32ea:	90 93 60 24 	sts	0x2460, r25
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	08 95       	ret
    32f4:	81 30       	cpi	r24, 0x01	; 1
    32f6:	91 05       	cpc	r25, r1
    32f8:	81 f4       	brne	.+32     	; 0x331a <decodeGesture+0x8a>
    32fa:	20 91 44 24 	lds	r18, 0x2444
    32fe:	30 91 45 24 	lds	r19, 0x2445
    3302:	23 2b       	or	r18, r19
    3304:	09 f0       	breq	.+2      	; 0x3308 <decodeGesture+0x78>
    3306:	58 c0       	rjmp	.+176    	; 0x33b8 <decodeGesture+0x128>
    3308:	84 e0       	ldi	r24, 0x04	; 4
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	80 93 5f 24 	sts	0x245F, r24
    3310:	90 93 60 24 	sts	0x2460, r25
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	08 95       	ret
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	d9 f4       	brne	.+54     	; 0x3354 <decodeGesture+0xc4>
    331e:	20 91 44 24 	lds	r18, 0x2444
    3322:	30 91 45 24 	lds	r19, 0x2445
    3326:	21 30       	cpi	r18, 0x01	; 1
    3328:	31 05       	cpc	r19, r1
    332a:	49 f4       	brne	.+18     	; 0x333e <decodeGesture+0xae>
    332c:	82 e0       	ldi	r24, 0x02	; 2
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	80 93 5f 24 	sts	0x245F, r24
    3334:	90 93 60 24 	sts	0x2460, r25
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	08 95       	ret
    333e:	2f 3f       	cpi	r18, 0xFF	; 255
    3340:	3f 4f       	sbci	r19, 0xFF	; 255
    3342:	09 f0       	breq	.+2      	; 0x3346 <decodeGesture+0xb6>
    3344:	68 c0       	rjmp	.+208    	; 0x3416 <decodeGesture+0x186>
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	80 93 5f 24 	sts	0x245F, r24
    334e:	90 93 60 24 	sts	0x2460, r25
    3352:	08 95       	ret
    3354:	8f 3f       	cpi	r24, 0xFF	; 255
    3356:	2f ef       	ldi	r18, 0xFF	; 255
    3358:	92 07       	cpc	r25, r18
    335a:	71 f5       	brne	.+92     	; 0x33b8 <decodeGesture+0x128>
    335c:	80 91 44 24 	lds	r24, 0x2444
    3360:	90 91 45 24 	lds	r25, 0x2445
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	09 f0       	breq	.+2      	; 0x336a <decodeGesture+0xda>
    3368:	5a c0       	rjmp	.+180    	; 0x341e <decodeGesture+0x18e>
    336a:	20 91 5d 24 	lds	r18, 0x245D
    336e:	30 91 5e 24 	lds	r19, 0x245E
    3372:	33 23       	and	r19, r19
    3374:	1c f4       	brge	.+6      	; 0x337c <decodeGesture+0xec>
    3376:	31 95       	neg	r19
    3378:	21 95       	neg	r18
    337a:	31 09       	sbc	r19, r1
    337c:	80 91 54 24 	lds	r24, 0x2454
    3380:	90 91 55 24 	lds	r25, 0x2455
    3384:	99 23       	and	r25, r25
    3386:	1c f4       	brge	.+6      	; 0x338e <decodeGesture+0xfe>
    3388:	91 95       	neg	r25
    338a:	81 95       	neg	r24
    338c:	91 09       	sbc	r25, r1
    338e:	82 17       	cp	r24, r18
    3390:	93 07       	cpc	r25, r19
    3392:	4c f4       	brge	.+18     	; 0x33a6 <decodeGesture+0x116>
    3394:	83 e0       	ldi	r24, 0x03	; 3
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	80 93 5f 24 	sts	0x245F, r24
    339c:	90 93 60 24 	sts	0x2460, r25
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	08 95       	ret
    33a6:	82 e0       	ldi	r24, 0x02	; 2
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	80 93 5f 24 	sts	0x245F, r24
    33ae:	90 93 60 24 	sts	0x2460, r25
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	08 95       	ret
    33b8:	81 30       	cpi	r24, 0x01	; 1
    33ba:	91 05       	cpc	r25, r1
    33bc:	61 f5       	brne	.+88     	; 0x3416 <decodeGesture+0x186>
    33be:	80 91 44 24 	lds	r24, 0x2444
    33c2:	90 91 45 24 	lds	r25, 0x2445
    33c6:	01 96       	adiw	r24, 0x01	; 1
    33c8:	09 f0       	breq	.+2      	; 0x33cc <decodeGesture+0x13c>
    33ca:	57 c0       	rjmp	.+174    	; 0x347a <decodeGesture+0x1ea>
    33cc:	20 91 5d 24 	lds	r18, 0x245D
    33d0:	30 91 5e 24 	lds	r19, 0x245E
    33d4:	33 23       	and	r19, r19
    33d6:	1c f4       	brge	.+6      	; 0x33de <decodeGesture+0x14e>
    33d8:	31 95       	neg	r19
    33da:	21 95       	neg	r18
    33dc:	31 09       	sbc	r19, r1
    33de:	80 91 54 24 	lds	r24, 0x2454
    33e2:	90 91 55 24 	lds	r25, 0x2455
    33e6:	99 23       	and	r25, r25
    33e8:	1c f4       	brge	.+6      	; 0x33f0 <decodeGesture+0x160>
    33ea:	91 95       	neg	r25
    33ec:	81 95       	neg	r24
    33ee:	91 09       	sbc	r25, r1
    33f0:	82 17       	cp	r24, r18
    33f2:	93 07       	cpc	r25, r19
    33f4:	4c f4       	brge	.+18     	; 0x3408 <decodeGesture+0x178>
    33f6:	84 e0       	ldi	r24, 0x04	; 4
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	80 93 5f 24 	sts	0x245F, r24
    33fe:	90 93 60 24 	sts	0x2460, r25
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	08 95       	ret
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	80 93 5f 24 	sts	0x245F, r24
    3410:	90 93 60 24 	sts	0x2460, r25
    3414:	08 95       	ret
    3416:	8f 3f       	cpi	r24, 0xFF	; 255
    3418:	2f ef       	ldi	r18, 0xFF	; 255
    341a:	92 07       	cpc	r25, r18
    341c:	61 f5       	brne	.+88     	; 0x3476 <decodeGesture+0x1e6>
    341e:	80 91 44 24 	lds	r24, 0x2444
    3422:	90 91 45 24 	lds	r25, 0x2445
    3426:	01 96       	adiw	r24, 0x01	; 1
    3428:	09 f0       	breq	.+2      	; 0x342c <decodeGesture+0x19c>
    342a:	54 c0       	rjmp	.+168    	; 0x34d4 <decodeGesture+0x244>
    342c:	20 91 5d 24 	lds	r18, 0x245D
    3430:	30 91 5e 24 	lds	r19, 0x245E
    3434:	33 23       	and	r19, r19
    3436:	1c f4       	brge	.+6      	; 0x343e <decodeGesture+0x1ae>
    3438:	31 95       	neg	r19
    343a:	21 95       	neg	r18
    343c:	31 09       	sbc	r19, r1
    343e:	80 91 54 24 	lds	r24, 0x2454
    3442:	90 91 55 24 	lds	r25, 0x2455
    3446:	99 23       	and	r25, r25
    3448:	1c f4       	brge	.+6      	; 0x3450 <decodeGesture+0x1c0>
    344a:	91 95       	neg	r25
    344c:	81 95       	neg	r24
    344e:	91 09       	sbc	r25, r1
    3450:	82 17       	cp	r24, r18
    3452:	93 07       	cpc	r25, r19
    3454:	4c f4       	brge	.+18     	; 0x3468 <decodeGesture+0x1d8>
    3456:	83 e0       	ldi	r24, 0x03	; 3
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	80 93 5f 24 	sts	0x245F, r24
    345e:	90 93 60 24 	sts	0x2460, r25
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	08 95       	ret
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	80 93 5f 24 	sts	0x245F, r24
    3470:	90 93 60 24 	sts	0x2460, r25
    3474:	08 95       	ret
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	81 f5       	brne	.+96     	; 0x34da <decodeGesture+0x24a>
    347a:	80 91 44 24 	lds	r24, 0x2444
    347e:	90 91 45 24 	lds	r25, 0x2445
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	69 f5       	brne	.+90     	; 0x34e0 <decodeGesture+0x250>
    3486:	20 91 5d 24 	lds	r18, 0x245D
    348a:	30 91 5e 24 	lds	r19, 0x245E
    348e:	33 23       	and	r19, r19
    3490:	1c f4       	brge	.+6      	; 0x3498 <decodeGesture+0x208>
    3492:	31 95       	neg	r19
    3494:	21 95       	neg	r18
    3496:	31 09       	sbc	r19, r1
    3498:	80 91 54 24 	lds	r24, 0x2454
    349c:	90 91 55 24 	lds	r25, 0x2455
    34a0:	99 23       	and	r25, r25
    34a2:	1c f4       	brge	.+6      	; 0x34aa <decodeGesture+0x21a>
    34a4:	91 95       	neg	r25
    34a6:	81 95       	neg	r24
    34a8:	91 09       	sbc	r25, r1
    34aa:	82 17       	cp	r24, r18
    34ac:	93 07       	cpc	r25, r19
    34ae:	4c f4       	brge	.+18     	; 0x34c2 <decodeGesture+0x232>
    34b0:	84 e0       	ldi	r24, 0x04	; 4
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	80 93 5f 24 	sts	0x245F, r24
    34b8:	90 93 60 24 	sts	0x2460, r25
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	08 95       	ret
    34c2:	82 e0       	ldi	r24, 0x02	; 2
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	80 93 5f 24 	sts	0x245F, r24
    34ca:	90 93 60 24 	sts	0x2460, r25
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	08 95       	ret
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	08 95       	ret
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	08 95       	ret
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	08 95       	ret

000034e6 <wireReadDataByte>:
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	2b 97       	sbiw	r28, 0x0b	; 11
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	de bf       	out	0x3e, r29	; 62
    34f4:	fe 01       	movw	r30, r28
    34f6:	31 96       	adiw	r30, 0x01	; 1
    34f8:	9b e0       	ldi	r25, 0x0B	; 11
    34fa:	df 01       	movw	r26, r30
    34fc:	1d 92       	st	X+, r1
    34fe:	9a 95       	dec	r25
    3500:	e9 f7       	brne	.-6      	; 0x34fc <wireReadDataByte+0x16>
    3502:	99 e3       	ldi	r25, 0x39	; 57
    3504:	99 83       	std	Y+1, r25	; 0x01
    3506:	8a 83       	std	Y+2, r24	; 0x02
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	8d 83       	std	Y+5, r24	; 0x05
    350e:	9e 83       	std	Y+6, r25	; 0x06
    3510:	6f 83       	std	Y+7, r22	; 0x07
    3512:	78 87       	std	Y+8, r23	; 0x08
    3514:	89 87       	std	Y+9, r24	; 0x09
    3516:	9a 87       	std	Y+10, r25	; 0x0a
    3518:	41 e0       	ldi	r20, 0x01	; 1
    351a:	bf 01       	movw	r22, r30
    351c:	80 ea       	ldi	r24, 0xA0	; 160
    351e:	94 e0       	ldi	r25, 0x04	; 4
    3520:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <twi_master_transfer>
    3524:	21 e0       	ldi	r18, 0x01	; 1
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	88 23       	and	r24, r24
    352a:	11 f0       	breq	.+4      	; 0x3530 <wireReadDataByte+0x4a>
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	c9 01       	movw	r24, r18
    3532:	2b 96       	adiw	r28, 0x0b	; 11
    3534:	cd bf       	out	0x3d, r28	; 61
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	08 95       	ret

0000353e <getMode>:
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	1f 92       	push	r1
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
    3548:	be 01       	movw	r22, r28
    354a:	6f 5f       	subi	r22, 0xFF	; 255
    354c:	7f 4f       	sbci	r23, 0xFF	; 255
    354e:	80 e8       	ldi	r24, 0x80	; 128
    3550:	ca df       	rcall	.-108    	; 0x34e6 <wireReadDataByte>
    3552:	89 2b       	or	r24, r25
    3554:	11 f0       	breq	.+4      	; 0x355a <getMode+0x1c>
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	01 c0       	rjmp	.+2      	; 0x355c <getMode+0x1e>
    355a:	8f ef       	ldi	r24, 0xFF	; 255
    355c:	0f 90       	pop	r0
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	08 95       	ret

00003564 <isGestureAvailable>:
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
    3568:	1f 92       	push	r1
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	be 01       	movw	r22, r28
    3570:	6f 5f       	subi	r22, 0xFF	; 255
    3572:	7f 4f       	sbci	r23, 0xFF	; 255
    3574:	8f ea       	ldi	r24, 0xAF	; 175
    3576:	b7 df       	rcall	.-146    	; 0x34e6 <wireReadDataByte>
    3578:	89 2b       	or	r24, r25
    357a:	39 f0       	breq	.+14     	; 0x358a <isGestureAvailable+0x26>
    357c:	29 81       	ldd	r18, Y+1	; 0x01
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	20 fd       	sbrc	r18, 0
    3584:	04 c0       	rjmp	.+8      	; 0x358e <isGestureAvailable+0x2a>
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	02 c0       	rjmp	.+4      	; 0x358e <isGestureAvailable+0x2a>
    358a:	8f ef       	ldi	r24, 0xFF	; 255
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	0f 90       	pop	r0
    3590:	df 91       	pop	r29
    3592:	cf 91       	pop	r28
    3594:	08 95       	ret

00003596 <wireReadDataBlock>:
 * @param[out] val pointer to the beginning of the data
 * @param[in] len number of bytes to read
 * @return Number of bytes read. -1 on read error.
 */
int wireReadDataBlock(uint8_t reg, uint8_t *val, unsigned int len)
{
    3596:	0f 93       	push	r16
    3598:	1f 93       	push	r17
    359a:	cf 93       	push	r28
    359c:	df 93       	push	r29
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	2b 97       	sbiw	r28, 0x0b	; 11
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	04 2f       	mov	r16, r20
    35aa:	15 2f       	mov	r17, r21
	twi_package_t packet_read = {
    35ac:	fe 01       	movw	r30, r28
    35ae:	31 96       	adiw	r30, 0x01	; 1
    35b0:	9b e0       	ldi	r25, 0x0B	; 11
    35b2:	df 01       	movw	r26, r30
    35b4:	1d 92       	st	X+, r1
    35b6:	9a 95       	dec	r25
    35b8:	e9 f7       	brne	.-6      	; 0x35b4 <wireReadDataBlock+0x1e>
    35ba:	99 e3       	ldi	r25, 0x39	; 57
    35bc:	99 83       	std	Y+1, r25	; 0x01
    35be:	8a 83       	std	Y+2, r24	; 0x02
    35c0:	21 e0       	ldi	r18, 0x01	; 1
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	2d 83       	std	Y+5, r18	; 0x05
    35c6:	3e 83       	std	Y+6, r19	; 0x06
    35c8:	6f 83       	std	Y+7, r22	; 0x07
    35ca:	78 87       	std	Y+8, r23	; 0x08
    35cc:	49 87       	std	Y+9, r20	; 0x09
    35ce:	5a 87       	std	Y+10, r21	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    35d0:	41 e0       	ldi	r20, 0x01	; 1
    35d2:	bf 01       	movw	r22, r30
    35d4:	80 ea       	ldi	r24, 0xA0	; 160
    35d6:	94 e0       	ldi	r25, 0x04	; 4
    35d8:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <twi_master_transfer>
		.chip         = APDS9960_I2C_ADDR,      // TWI slave bus address
		.buffer       = val,        // transfer data destination buffer
		.length       = len                    // transfer data size (bytes)
	};
		
	if(twi_master_read(TWI_PORT_AD, &packet_read) == TWI_SUCCESS)
    35dc:	81 11       	cpse	r24, r1
    35de:	03 c0       	rjmp	.+6      	; 0x35e6 <wireReadDataBlock+0x50>
	{
		return len;
    35e0:	80 2f       	mov	r24, r16
    35e2:	91 2f       	mov	r25, r17
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <wireReadDataBlock+0x54>
	}
		
	return -1;
    35e6:	8f ef       	ldi	r24, 0xFF	; 255
    35e8:	9f ef       	ldi	r25, 0xFF	; 255
    35ea:	2b 96       	adiw	r28, 0x0b	; 11
    35ec:	cd bf       	out	0x3d, r28	; 61
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	08 95       	ret

000035fa <readGesture>:
 * @brief Processes a gesture event and returns best guessed gesture
 *
 * @return Number corresponding to gesture. -1 on error.
 */
int readGesture()
{
    35fa:	2f 92       	push	r2
    35fc:	3f 92       	push	r3
    35fe:	5f 92       	push	r5
    3600:	6f 92       	push	r6
    3602:	7f 92       	push	r7
    3604:	8f 92       	push	r8
    3606:	9f 92       	push	r9
    3608:	af 92       	push	r10
    360a:	bf 92       	push	r11
    360c:	cf 92       	push	r12
    360e:	df 92       	push	r13
    3610:	ef 92       	push	r14
    3612:	ff 92       	push	r15
    3614:	0f 93       	push	r16
    3616:	1f 93       	push	r17
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	c2 58       	subi	r28, 0x82	; 130
    3622:	d1 09       	sbc	r29, r1
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	de bf       	out	0x3e, r29	; 62
    uint8_t fifo_level = 0;
    3628:	19 82       	std	Y+1, r1	; 0x01
    uint8_t gstatus;
    int motion;
    int i;
    
    /* Make sure that power and gesture is on and data is valid */
    if( !isGestureAvailable() || !(getMode() & 0b01000001) ) {
    362a:	9c df       	rcall	.-200    	; 0x3564 <isGestureAvailable>
    362c:	00 97       	sbiw	r24, 0x00	; 0
    362e:	09 f4       	brne	.+2      	; 0x3632 <readGesture+0x38>
    3630:	b0 c0       	rjmp	.+352    	; 0x3792 <readGesture+0x198>
    3632:	85 df       	rcall	.-246    	; 0x353e <getMode>
    3634:	81 74       	andi	r24, 0x41	; 65
    3636:	09 f4       	brne	.+2      	; 0x363a <readGesture+0x40>
    3638:	a4 c0       	rjmp	.+328    	; 0x3782 <readGesture+0x188>
    
        /* Wait some time to collect next batch of FIFO data */
        delay_ms(FIFO_PAUSE_TIME);
        
        /* Get the contents of the STATUS register. Is data still valid? */
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
    363a:	8e 01       	movw	r16, r28
    363c:	0e 57       	subi	r16, 0x7E	; 126
    363e:	1f 4f       	sbci	r17, 0xFF	; 255
 * @brief Processes a gesture event and returns best guessed gesture
 *
 * @return Number corresponding to gesture. -1 on error.
 */
int readGesture()
{
    3640:	68 94       	set
    3642:	66 24       	eor	r6, r6
    3644:	67 f8       	bld	r6, 7
    3646:	0f 2e       	mov	r0, r31
    3648:	f9 ea       	ldi	r31, 0xA9	; 169
    364a:	7f 2e       	mov	r7, r31
    364c:	f0 2d       	mov	r31, r0
    364e:	0f 2e       	mov	r0, r31
    3650:	f3 e0       	ldi	r31, 0x03	; 3
    3652:	8f 2e       	mov	r8, r31
    3654:	f0 2d       	mov	r31, r0
    3656:	91 2c       	mov	r9, r1
    
        /* Wait some time to collect next batch of FIFO data */
        delay_ms(FIFO_PAUSE_TIME);
        
        /* Get the contents of the STATUS register. Is data still valid? */
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
    3658:	a0 2e       	mov	r10, r16
    365a:	b1 2e       	mov	r11, r17
    365c:	0f 2e       	mov	r0, r31
    365e:	f3 ee       	ldi	r31, 0xE3	; 227
    3660:	cf 2e       	mov	r12, r31
    3662:	f4 e2       	ldi	r31, 0x24	; 36
    3664:	df 2e       	mov	r13, r31
    3666:	f0 2d       	mov	r31, r0
    3668:	0f 2e       	mov	r0, r31
    366a:	f4 ee       	ldi	r31, 0xE4	; 228
    366c:	ef 2e       	mov	r14, r31
    366e:	f4 e2       	ldi	r31, 0x24	; 36
    3670:	ff 2e       	mov	r15, r31
    3672:	f0 2d       	mov	r31, r0
 * @brief Processes a gesture event and returns best guessed gesture
 *
 * @return Number corresponding to gesture. -1 on error.
 */
int readGesture()
{
    3674:	86 2d       	mov	r24, r6
    3676:	97 2d       	mov	r25, r7
    3678:	a8 2d       	mov	r26, r8
    367a:	b9 2d       	mov	r27, r9
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	a1 09       	sbc	r26, r1
    3680:	b1 09       	sbc	r27, r1
    3682:	00 97       	sbiw	r24, 0x00	; 0
    3684:	a1 05       	cpc	r26, r1
    3686:	b1 05       	cpc	r27, r1
    3688:	c9 f7       	brne	.-14     	; 0x367c <readGesture+0x82>
    
        /* Wait some time to collect next batch of FIFO data */
        delay_ms(FIFO_PAUSE_TIME);
        
        /* Get the contents of the STATUS register. Is data still valid? */
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
    368a:	6a 2d       	mov	r22, r10
    368c:	7b 2d       	mov	r23, r11
    368e:	8f ea       	ldi	r24, 0xAF	; 175
    3690:	2a df       	rcall	.-428    	; 0x34e6 <wireReadDataByte>
    3692:	89 2b       	or	r24, r25
    3694:	09 f4       	brne	.+2      	; 0x3698 <readGesture+0x9e>
    3696:	78 c0       	rjmp	.+240    	; 0x3788 <readGesture+0x18e>
            return ERROR;
        }
        
        /* If we have valid data, read in FIFO */
        if( (gstatus & APDS9960_GVALID) == APDS9960_GVALID ) {
    3698:	d8 01       	movw	r26, r16
    369a:	8c 91       	ld	r24, X
    369c:	80 ff       	sbrs	r24, 0
    369e:	5d c0       	rjmp	.+186    	; 0x375a <readGesture+0x160>
        
            /* Read the current FIFO level */
            if( !wireReadDataByte(APDS9960_GFLVL, &fifo_level) ) {
    36a0:	be 01       	movw	r22, r28
    36a2:	6f 5f       	subi	r22, 0xFF	; 255
    36a4:	7f 4f       	sbci	r23, 0xFF	; 255
    36a6:	8e ea       	ldi	r24, 0xAE	; 174
    36a8:	1e df       	rcall	.-452    	; 0x34e6 <wireReadDataByte>
    36aa:	89 2b       	or	r24, r25
    36ac:	09 f4       	brne	.+2      	; 0x36b0 <readGesture+0xb6>
    36ae:	6f c0       	rjmp	.+222    	; 0x378e <readGesture+0x194>
#if DEBUG
            printf("FIFO Level: %d \n",fifo_level);
#endif

            /* If there's stuff in the FIFO, read it into our data block */
            if( fifo_level > 0) {
    36b0:	49 81       	ldd	r20, Y+1	; 0x01
    36b2:	44 23       	and	r20, r20
    36b4:	f9 f2       	breq	.-66     	; 0x3674 <readGesture+0x7a>
                bytes_read = wireReadDataBlock(APDS9960_GFIFO_U, fifo_data, (fifo_level * 4) );
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	44 0f       	add	r20, r20
    36ba:	55 1f       	adc	r21, r21
    36bc:	44 0f       	add	r20, r20
    36be:	55 1f       	adc	r21, r21
    36c0:	be 01       	movw	r22, r28
    36c2:	6e 5f       	subi	r22, 0xFE	; 254
    36c4:	7f 4f       	sbci	r23, 0xFF	; 255
    36c6:	8c ef       	ldi	r24, 0xFC	; 252
    36c8:	66 df       	rcall	.-308    	; 0x3596 <wireReadDataBlock>
                }
                printf("\n");
#endif

                /* If at least 1 set of data, sort the data into U/D/L/R */
                if( bytes_read >= 4 ) {
    36ca:	84 30       	cpi	r24, 0x04	; 4
    36cc:	98 f2       	brcs	.-90     	; 0x3674 <readGesture+0x7a>
                    for( i = 0; i < bytes_read; i += 4 ) {
    36ce:	99 27       	eor	r25, r25
    36d0:	18 16       	cp	r1, r24
    36d2:	19 06       	cpc	r1, r25
    36d4:	cc f5       	brge	.+114    	; 0x3748 <readGesture+0x14e>
    36d6:	f6 01       	movw	r30, r12
    36d8:	60 81       	ld	r22, Z
    36da:	d7 01       	movw	r26, r14
    36dc:	5c 90       	ld	r5, X
    36de:	fe 01       	movw	r30, r28
    36e0:	35 96       	adiw	r30, 0x05	; 5
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	ac 01       	movw	r20, r24
    36e6:	56 95       	lsr	r21
    36e8:	47 95       	ror	r20
    36ea:	56 95       	lsr	r21
    36ec:	47 95       	ror	r20
    36ee:	71 e0       	ldi	r23, 0x01	; 1
    36f0:	76 0f       	add	r23, r22
    36f2:	74 0f       	add	r23, r20
                        gesture_data_.u_data[gesture_data_.index] = fifo_data[i + 0];
    36f4:	a6 2f       	mov	r26, r22
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	cd 01       	movw	r24, r26
    36fa:	8d 59       	subi	r24, 0x9D	; 157
    36fc:	9b 4d       	sbci	r25, 0xDB	; 219
    36fe:	1c 01       	movw	r2, r24
    3700:	cf 01       	movw	r24, r30
    3702:	03 97       	sbiw	r24, 0x03	; 3
    3704:	dc 01       	movw	r26, r24
    3706:	8c 91       	ld	r24, X
    3708:	d1 01       	movw	r26, r2
    370a:	8c 93       	st	X, r24
    370c:	cf 01       	movw	r24, r30
    370e:	02 97       	sbiw	r24, 0x02	; 2
                        gesture_data_.d_data[gesture_data_.index] = fifo_data[i + 1];
    3710:	dc 01       	movw	r26, r24
    3712:	8c 91       	ld	r24, X
    3714:	d1 01       	movw	r26, r2
    3716:	90 96       	adiw	r26, 0x20	; 32
    3718:	8c 93       	st	X, r24
                        gesture_data_.l_data[gesture_data_.index] = fifo_data[i + 2];
    371a:	c1 01       	movw	r24, r2
    371c:	80 5c       	subi	r24, 0xC0	; 192
    371e:	9f 4f       	sbci	r25, 0xFF	; 255
    3720:	9f 01       	movw	r18, r30
    3722:	21 50       	subi	r18, 0x01	; 1
    3724:	31 09       	sbc	r19, r1
    3726:	d9 01       	movw	r26, r18
    3728:	2c 91       	ld	r18, X
    372a:	dc 01       	movw	r26, r24
    372c:	2c 93       	st	X, r18
                        gesture_data_.r_data[gesture_data_.index] = fifo_data[i + 3];
    372e:	80 81       	ld	r24, Z
    3730:	90 96       	adiw	r26, 0x20	; 32
    3732:	8c 93       	st	X, r24
    3734:	6f 5f       	subi	r22, 0xFF	; 255
    3736:	34 96       	adiw	r30, 0x04	; 4
                printf("\n");
#endif

                /* If at least 1 set of data, sort the data into U/D/L/R */
                if( bytes_read >= 4 ) {
                    for( i = 0; i < bytes_read; i += 4 ) {
    3738:	67 13       	cpse	r22, r23
    373a:	dc cf       	rjmp	.-72     	; 0x36f4 <readGesture+0xfa>
    373c:	53 94       	inc	r5
    373e:	f6 01       	movw	r30, r12
    3740:	70 83       	st	Z, r23
    3742:	45 0d       	add	r20, r5
    3744:	d7 01       	movw	r26, r14
    3746:	4c 93       	st	X, r20
                }
                printf("\n");
#endif

                    /* Filter and process gesture data. Decode near/far state */
                    if( processGestureData() ) {
    3748:	d3 db       	rcall	.-2138   	; 0x2ef0 <processGestureData>
    374a:	89 2b       	or	r24, r25
    374c:	09 f0       	breq	.+2      	; 0x3750 <readGesture+0x156>
                        if( decodeGesture() ) {
    374e:	a0 dd       	rcall	.-1216   	; 0x3290 <decodeGesture>
#endif
                        }
                    }
                    
                    /* Reset data */
                    gesture_data_.index = 0;
    3750:	f6 01       	movw	r30, r12
    3752:	10 82       	st	Z, r1
                    gesture_data_.total_gestures = 0;
    3754:	d7 01       	movw	r26, r14
    3756:	1c 92       	st	X, r1
    3758:	8d cf       	rjmp	.-230    	; 0x3674 <readGesture+0x7a>
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
            return ERROR;
        }
        
        /* If we have valid data, read in FIFO */
        if( (gstatus & APDS9960_GVALID) == APDS9960_GVALID ) {
    375a:	80 e8       	ldi	r24, 0x80	; 128
    375c:	99 ea       	ldi	r25, 0xA9	; 169
    375e:	a3 e0       	ldi	r26, 0x03	; 3
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	01 97       	sbiw	r24, 0x01	; 1
    3764:	a1 09       	sbc	r26, r1
    3766:	b1 09       	sbc	r27, r1
    3768:	00 97       	sbiw	r24, 0x00	; 0
    376a:	a1 05       	cpc	r26, r1
    376c:	b1 05       	cpc	r27, r1
    376e:	c9 f7       	brne	.-14     	; 0x3762 <readGesture+0x168>
            }
        } else {
    
            /* Determine best guessed gesture and clean up */
            delay_ms(FIFO_PAUSE_TIME);
            decodeGesture();
    3770:	8f dd       	rcall	.-1250   	; 0x3290 <decodeGesture>
            motion = gesture_motion_;
    3772:	00 91 5f 24 	lds	r16, 0x245F
    3776:	10 91 60 24 	lds	r17, 0x2460
#if DEBUG
            printf("END: %d \n",gesture_motion_);
#endif
            resetGestureParameters();
    377a:	95 db       	rcall	.-2262   	; 0x2ea6 <resetGestureParameters>
            return motion;
    377c:	80 2f       	mov	r24, r16
    377e:	91 2f       	mov	r25, r17
    3780:	08 c0       	rjmp	.+16     	; 0x3792 <readGesture+0x198>
    int motion;
    int i;
    
    /* Make sure that power and gesture is on and data is valid */
    if( !isGestureAvailable() || !(getMode() & 0b01000001) ) {
        return DIR_NONE;
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	05 c0       	rjmp	.+10     	; 0x3792 <readGesture+0x198>
        /* Wait some time to collect next batch of FIFO data */
        delay_ms(FIFO_PAUSE_TIME);
        
        /* Get the contents of the STATUS register. Is data still valid? */
        if( !wireReadDataByte(APDS9960_GSTATUS, &gstatus) ) {
            return ERROR;
    3788:	8f ef       	ldi	r24, 0xFF	; 255
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	02 c0       	rjmp	.+4      	; 0x3792 <readGesture+0x198>
        /* If we have valid data, read in FIFO */
        if( (gstatus & APDS9960_GVALID) == APDS9960_GVALID ) {
        
            /* Read the current FIFO level */
            if( !wireReadDataByte(APDS9960_GFLVL, &fifo_level) ) {
                return ERROR;
    378e:	8f ef       	ldi	r24, 0xFF	; 255
    3790:	90 e0       	ldi	r25, 0x00	; 0
#endif
            resetGestureParameters();
            return motion;
        }
    }
}
    3792:	ce 57       	subi	r28, 0x7E	; 126
    3794:	df 4f       	sbci	r29, 0xFF	; 255
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	de bf       	out	0x3e, r29	; 62
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	ff 90       	pop	r15
    37a4:	ef 90       	pop	r14
    37a6:	df 90       	pop	r13
    37a8:	cf 90       	pop	r12
    37aa:	bf 90       	pop	r11
    37ac:	af 90       	pop	r10
    37ae:	9f 90       	pop	r9
    37b0:	8f 90       	pop	r8
    37b2:	7f 90       	pop	r7
    37b4:	6f 90       	pop	r6
    37b6:	5f 90       	pop	r5
    37b8:	3f 90       	pop	r3
    37ba:	2f 90       	pop	r2
    37bc:	08 95       	ret

000037be <set_pin_as_output>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    37be:	e8 2f       	mov	r30, r24
    37c0:	e6 95       	lsr	r30
    37c2:	e6 95       	lsr	r30
    37c4:	e6 95       	lsr	r30
    37c6:	40 e2       	ldi	r20, 0x20	; 32
    37c8:	e4 9f       	mul	r30, r20
    37ca:	f0 01       	movw	r30, r0
    37cc:	11 24       	eor	r1, r1
    37ce:	fa 5f       	subi	r31, 0xFA	; 250
    37d0:	87 70       	andi	r24, 0x07	; 7
    37d2:	21 e0       	ldi	r18, 0x01	; 1
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	a9 01       	movw	r20, r18
    37d8:	02 c0       	rjmp	.+4      	; 0x37de <set_pin_as_output+0x20>
    37da:	44 0f       	add	r20, r20
    37dc:	55 1f       	adc	r21, r21
    37de:	8a 95       	dec	r24
    37e0:	e2 f7       	brpl	.-8      	; 0x37da <set_pin_as_output+0x1c>
    37e2:	41 83       	std	Z+1, r20	; 0x01
    37e4:	08 95       	ret

000037e6 <pin_level>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    37e6:	e8 2f       	mov	r30, r24
    37e8:	e6 95       	lsr	r30
    37ea:	e6 95       	lsr	r30
    37ec:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    37ee:	40 e2       	ldi	r20, 0x20	; 32
    37f0:	e4 9f       	mul	r30, r20
    37f2:	f0 01       	movw	r30, r0
    37f4:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    37f6:	fa 5f       	subi	r31, 0xFA	; 250
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    37f8:	67 2b       	or	r22, r23
    37fa:	59 f0       	breq	.+22     	; 0x3812 <pin_level+0x2c>
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    37fc:	87 70       	andi	r24, 0x07	; 7
    37fe:	21 e0       	ldi	r18, 0x01	; 1
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	a9 01       	movw	r20, r18
    3804:	02 c0       	rjmp	.+4      	; 0x380a <pin_level+0x24>
    3806:	44 0f       	add	r20, r20
    3808:	55 1f       	adc	r21, r21
    380a:	8a 95       	dec	r24
    380c:	e2 f7       	brpl	.-8      	; 0x3806 <pin_level+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    380e:	45 83       	std	Z+5, r20	; 0x05
    3810:	08 95       	ret
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    3812:	87 70       	andi	r24, 0x07	; 7
    3814:	21 e0       	ldi	r18, 0x01	; 1
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	a9 01       	movw	r20, r18
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <pin_level+0x3a>
    381c:	44 0f       	add	r20, r20
    381e:	55 1f       	adc	r21, r21
    3820:	8a 95       	dec	r24
    3822:	e2 f7       	brpl	.-8      	; 0x381c <pin_level+0x36>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3824:	46 83       	std	Z+6, r20	; 0x06
    3826:	08 95       	ret

00003828 <read_pin>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    3828:	e8 2f       	mov	r30, r24
    382a:	e6 95       	lsr	r30
    382c:	e6 95       	lsr	r30
    382e:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    3830:	60 e2       	ldi	r22, 0x20	; 32
    3832:	e6 9f       	mul	r30, r22
    3834:	f0 01       	movw	r30, r0
    3836:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    3838:	fa 5f       	subi	r31, 0xFA	; 250

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    383a:	40 85       	ldd	r20, Z+8	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    383c:	87 70       	andi	r24, 0x07	; 7
    383e:	21 e0       	ldi	r18, 0x01	; 1
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	b9 01       	movw	r22, r18
    3844:	02 c0       	rjmp	.+4      	; 0x384a <read_pin+0x22>
    3846:	66 0f       	add	r22, r22
    3848:	77 1f       	adc	r23, r23
    384a:	8a 95       	dec	r24
    384c:	e2 f7       	brpl	.-8      	; 0x3846 <read_pin+0x1e>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    384e:	24 2f       	mov	r18, r20
    3850:	26 23       	and	r18, r22
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	11 f4       	brne	.+4      	; 0x385c <read_pin+0x34>
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	90 e0       	ldi	r25, 0x00	; 0
}

int read_pin(ioport_pin_t pin)
{
	return ioport_get_pin_level(pin);
    385c:	08 95       	ret

0000385e <select_timer>:
	M4_B=PIN_B;
	set_pin_as_output(M4_A);
	set_pin_as_output(M4_B);
	pwm_init(&M4_pwm, select_timer(PWM), select_channel(PWM), MOTOR_FREQ);
	pwm_start(&M4_pwm,0);
}
    385e:	9c 01       	movw	r18, r24
    3860:	21 50       	subi	r18, 0x01	; 1
    3862:	31 09       	sbc	r19, r1
    3864:	23 30       	cpi	r18, 0x03	; 3
    3866:	31 05       	cpc	r19, r1
    3868:	a8 f0       	brcs	.+42     	; 0x3894 <select_timer+0x36>
    386a:	23 50       	subi	r18, 0x03	; 3
    386c:	31 09       	sbc	r19, r1
    386e:	22 30       	cpi	r18, 0x02	; 2
    3870:	31 05       	cpc	r19, r1
    3872:	98 f0       	brcs	.+38     	; 0x389a <select_timer+0x3c>
    3874:	22 50       	subi	r18, 0x02	; 2
    3876:	31 09       	sbc	r19, r1
    3878:	24 30       	cpi	r18, 0x04	; 4
    387a:	31 05       	cpc	r19, r1
    387c:	88 f0       	brcs	.+34     	; 0x38a0 <select_timer+0x42>
    387e:	24 50       	subi	r18, 0x04	; 4
    3880:	31 09       	sbc	r19, r1
    3882:	22 30       	cpi	r18, 0x02	; 2
    3884:	31 05       	cpc	r19, r1
    3886:	78 f0       	brcs	.+30     	; 0x38a6 <select_timer+0x48>
    3888:	0c 97       	sbiw	r24, 0x0c	; 12
    388a:	04 97       	sbiw	r24, 0x04	; 4
    388c:	78 f4       	brcc	.+30     	; 0x38ac <select_timer+0x4e>
    388e:	84 e0       	ldi	r24, 0x04	; 4
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	08 95       	ret
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	08 95       	ret
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	08 95       	ret
    38a0:	82 e0       	ldi	r24, 0x02	; 2
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	08 95       	ret
    38a6:	83 e0       	ldi	r24, 0x03	; 3
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	08 95       	ret
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	08 95       	ret

000038b2 <select_channel>:
    38b2:	81 30       	cpi	r24, 0x01	; 1
    38b4:	91 05       	cpc	r25, r1
    38b6:	41 f1       	breq	.+80     	; 0x3908 <select_channel+0x56>
    38b8:	9c 01       	movw	r18, r24
    38ba:	2d 7f       	andi	r18, 0xFD	; 253
    38bc:	24 30       	cpi	r18, 0x04	; 4
    38be:	31 05       	cpc	r19, r1
    38c0:	31 f1       	breq	.+76     	; 0x390e <select_channel+0x5c>
    38c2:	8a 30       	cpi	r24, 0x0A	; 10
    38c4:	91 05       	cpc	r25, r1
    38c6:	31 f1       	breq	.+76     	; 0x3914 <select_channel+0x62>
    38c8:	8c 30       	cpi	r24, 0x0C	; 12
    38ca:	91 05       	cpc	r25, r1
    38cc:	31 f1       	breq	.+76     	; 0x391a <select_channel+0x68>
    38ce:	82 30       	cpi	r24, 0x02	; 2
    38d0:	91 05       	cpc	r25, r1
    38d2:	31 f1       	breq	.+76     	; 0x3920 <select_channel+0x6e>
    38d4:	25 30       	cpi	r18, 0x05	; 5
    38d6:	31 05       	cpc	r19, r1
    38d8:	31 f1       	breq	.+76     	; 0x3926 <select_channel+0x74>
    38da:	8b 30       	cpi	r24, 0x0B	; 11
    38dc:	91 05       	cpc	r25, r1
    38de:	31 f1       	breq	.+76     	; 0x392c <select_channel+0x7a>
    38e0:	8d 30       	cpi	r24, 0x0D	; 13
    38e2:	91 05       	cpc	r25, r1
    38e4:	31 f1       	breq	.+76     	; 0x3932 <select_channel+0x80>
    38e6:	83 30       	cpi	r24, 0x03	; 3
    38e8:	91 05       	cpc	r25, r1
    38ea:	31 f1       	breq	.+76     	; 0x3938 <select_channel+0x86>
    38ec:	88 30       	cpi	r24, 0x08	; 8
    38ee:	91 05       	cpc	r25, r1
    38f0:	31 f1       	breq	.+76     	; 0x393e <select_channel+0x8c>
    38f2:	8e 30       	cpi	r24, 0x0E	; 14
    38f4:	91 05       	cpc	r25, r1
    38f6:	31 f1       	breq	.+76     	; 0x3944 <select_channel+0x92>
    38f8:	89 30       	cpi	r24, 0x09	; 9
    38fa:	91 05       	cpc	r25, r1
    38fc:	31 f1       	breq	.+76     	; 0x394a <select_channel+0x98>
    38fe:	0f 97       	sbiw	r24, 0x0f	; 15
    3900:	39 f5       	brne	.+78     	; 0x3950 <select_channel+0x9e>
    3902:	84 e0       	ldi	r24, 0x04	; 4
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	08 95       	ret
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	08 95       	ret
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	08 95       	ret
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	08 95       	ret
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	08 95       	ret
    3920:	82 e0       	ldi	r24, 0x02	; 2
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	08 95       	ret
    3926:	82 e0       	ldi	r24, 0x02	; 2
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	08 95       	ret
    392c:	82 e0       	ldi	r24, 0x02	; 2
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	08 95       	ret
    3932:	82 e0       	ldi	r24, 0x02	; 2
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	08 95       	ret
    3938:	83 e0       	ldi	r24, 0x03	; 3
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	08 95       	ret
    393e:	83 e0       	ldi	r24, 0x03	; 3
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	08 95       	ret
    3944:	83 e0       	ldi	r24, 0x03	; 3
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	08 95       	ret
    394a:	84 e0       	ldi	r24, 0x04	; 4
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	08 95       	ret
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	08 95       	ret

00003956 <init_M1>:
    3956:	1f 93       	push	r17
    3958:	cf 93       	push	r28
    395a:	df 93       	push	r29
    395c:	ea 01       	movw	r28, r20
    395e:	80 93 48 24 	sts	0x2448, r24
    3962:	60 93 3a 24 	sts	0x243A, r22
    3966:	2b df       	rcall	.-426    	; 0x37be <set_pin_as_output>
    3968:	80 91 3a 24 	lds	r24, 0x243A
    396c:	28 df       	rcall	.-432    	; 0x37be <set_pin_as_output>
    396e:	ce 01       	movw	r24, r28
    3970:	a0 df       	rcall	.-192    	; 0x38b2 <select_channel>
    3972:	18 2f       	mov	r17, r24
    3974:	ce 01       	movw	r24, r28
    3976:	73 df       	rcall	.-282    	; 0x385e <select_timer>
    3978:	20 e1       	ldi	r18, 0x10	; 16
    397a:	37 e2       	ldi	r19, 0x27	; 39
    397c:	41 2f       	mov	r20, r17
    397e:	68 2f       	mov	r22, r24
    3980:	8d e4       	ldi	r24, 0x4D	; 77
    3982:	94 e2       	ldi	r25, 0x24	; 36
    3984:	90 d9       	rcall	.-3296   	; 0x2ca6 <pwm_init>
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	8d e4       	ldi	r24, 0x4D	; 77
    398a:	94 e2       	ldi	r25, 0x24	; 36
    398c:	3a da       	rcall	.-2956   	; 0x2e02 <pwm_start>
    398e:	df 91       	pop	r29
    3990:	cf 91       	pop	r28
    3992:	1f 91       	pop	r17
    3994:	08 95       	ret

00003996 <init_M2>:
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	ea 01       	movw	r28, r20
    399e:	80 93 43 24 	sts	0x2443, r24
    39a2:	60 93 4c 24 	sts	0x244C, r22
    39a6:	0b df       	rcall	.-490    	; 0x37be <set_pin_as_output>
    39a8:	80 91 4c 24 	lds	r24, 0x244C
    39ac:	08 df       	rcall	.-496    	; 0x37be <set_pin_as_output>
    39ae:	ce 01       	movw	r24, r28
    39b0:	80 df       	rcall	.-256    	; 0x38b2 <select_channel>
    39b2:	18 2f       	mov	r17, r24
    39b4:	ce 01       	movw	r24, r28
    39b6:	53 df       	rcall	.-346    	; 0x385e <select_timer>
    39b8:	20 e1       	ldi	r18, 0x10	; 16
    39ba:	37 e2       	ldi	r19, 0x27	; 39
    39bc:	41 2f       	mov	r20, r17
    39be:	68 2f       	mov	r22, r24
    39c0:	86 e5       	ldi	r24, 0x56	; 86
    39c2:	94 e2       	ldi	r25, 0x24	; 36
    39c4:	70 d9       	rcall	.-3360   	; 0x2ca6 <pwm_init>
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	86 e5       	ldi	r24, 0x56	; 86
    39ca:	94 e2       	ldi	r25, 0x24	; 36
    39cc:	1a da       	rcall	.-3020   	; 0x2e02 <pwm_start>
    39ce:	df 91       	pop	r29
    39d0:	cf 91       	pop	r28
    39d2:	1f 91       	pop	r17
    39d4:	08 95       	ret

000039d6 <motor1>:


void motor1(int speed)
{
    39d6:	cf 93       	push	r28
    39d8:	df 93       	push	r29
    39da:	ec 01       	movw	r28, r24
	if (speed<0 )
    39dc:	99 23       	and	r25, r25
    39de:	84 f4       	brge	.+32     	; 0x3a00 <motor1+0x2a>
	{
		if (MOTOR_1_DIR==FORWARD)
		{
			pin_level(M1_A,1);
    39e0:	61 e0       	ldi	r22, 0x01	; 1
    39e2:	70 e0       	ldi	r23, 0x00	; 0
    39e4:	80 91 48 24 	lds	r24, 0x2448
    39e8:	fe de       	rcall	.-516    	; 0x37e6 <pin_level>
			pin_level(M1_B,0);
    39ea:	60 e0       	ldi	r22, 0x00	; 0
    39ec:	70 e0       	ldi	r23, 0x00	; 0
    39ee:	80 91 3a 24 	lds	r24, 0x243A
    39f2:	f9 de       	rcall	.-526    	; 0x37e6 <pin_level>
		else
		{
			pin_level(M1_A,0);
			pin_level(M1_B,1);
		}
		pwm_start(&M1_pwm, -speed);
    39f4:	6c 2f       	mov	r22, r28
    39f6:	61 95       	neg	r22
    39f8:	8d e4       	ldi	r24, 0x4D	; 77
    39fa:	94 e2       	ldi	r25, 0x24	; 36
    39fc:	02 da       	rcall	.-3068   	; 0x2e02 <pwm_start>
    39fe:	0e c0       	rjmp	.+28     	; 0x3a1c <motor1+0x46>
	}
	else
	{
		if (MOTOR_1_DIR==FORWARD)
		{
			pin_level(M1_A,0);
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	70 e0       	ldi	r23, 0x00	; 0
    3a04:	80 91 48 24 	lds	r24, 0x2448
    3a08:	ee de       	rcall	.-548    	; 0x37e6 <pin_level>
			pin_level(M1_B,1);
    3a0a:	61 e0       	ldi	r22, 0x01	; 1
    3a0c:	70 e0       	ldi	r23, 0x00	; 0
    3a0e:	80 91 3a 24 	lds	r24, 0x243A
    3a12:	e9 de       	rcall	.-558    	; 0x37e6 <pin_level>
		else
		{
			pin_level(M1_A,1);
			pin_level(M1_B,0);
		}
		pwm_start(&M1_pwm, speed);
    3a14:	6c 2f       	mov	r22, r28
    3a16:	8d e4       	ldi	r24, 0x4D	; 77
    3a18:	94 e2       	ldi	r25, 0x24	; 36
    3a1a:	f3 d9       	rcall	.-3098   	; 0x2e02 <pwm_start>
	}
}
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	08 95       	ret

00003a22 <motor2>:

void motor2(int speed)
{
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	ec 01       	movw	r28, r24
	if (speed<0 )
    3a28:	99 23       	and	r25, r25
    3a2a:	84 f4       	brge	.+32     	; 0x3a4c <motor2+0x2a>
	{
		if (MOTOR_2_DIR==FORWARD)
		{
			pin_level(M2_A,1);
    3a2c:	61 e0       	ldi	r22, 0x01	; 1
    3a2e:	70 e0       	ldi	r23, 0x00	; 0
    3a30:	80 91 43 24 	lds	r24, 0x2443
    3a34:	d8 de       	rcall	.-592    	; 0x37e6 <pin_level>
			pin_level(M2_B,0);
    3a36:	60 e0       	ldi	r22, 0x00	; 0
    3a38:	70 e0       	ldi	r23, 0x00	; 0
    3a3a:	80 91 4c 24 	lds	r24, 0x244C
    3a3e:	d3 de       	rcall	.-602    	; 0x37e6 <pin_level>
		else
		{
			pin_level(M2_A,0);
			pin_level(M2_B,1);
		}
		pwm_start(&M2_pwm, -speed);
    3a40:	6c 2f       	mov	r22, r28
    3a42:	61 95       	neg	r22
    3a44:	86 e5       	ldi	r24, 0x56	; 86
    3a46:	94 e2       	ldi	r25, 0x24	; 36
    3a48:	dc d9       	rcall	.-3144   	; 0x2e02 <pwm_start>
    3a4a:	0e c0       	rjmp	.+28     	; 0x3a68 <motor2+0x46>
	}
	else
	{
		if (MOTOR_2_DIR==FORWARD)
		{
			pin_level(M2_A,0);
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	80 91 43 24 	lds	r24, 0x2443
    3a54:	c8 de       	rcall	.-624    	; 0x37e6 <pin_level>
			pin_level(M2_B,1);
    3a56:	61 e0       	ldi	r22, 0x01	; 1
    3a58:	70 e0       	ldi	r23, 0x00	; 0
    3a5a:	80 91 4c 24 	lds	r24, 0x244C
    3a5e:	c3 de       	rcall	.-634    	; 0x37e6 <pin_level>
		else
		{
			pin_level(M2_A,1);
			pin_level(M2_B,0);
		}
		pwm_start(&M2_pwm, speed);
    3a60:	6c 2f       	mov	r22, r28
    3a62:	86 e5       	ldi	r24, 0x56	; 86
    3a64:	94 e2       	ldi	r25, 0x24	; 36
    3a66:	cd d9       	rcall	.-3174   	; 0x2e02 <pwm_start>
	}
}
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	08 95       	ret

00003a6e <init_OctoPlus>:

#include "../OctoPlus.h"

void init_OctoPlus(void)
{
	sysclk_init();
    3a6e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <sysclk_init>
	ioport_init();
	leds_init();
    3a72:	03 d0       	rcall	.+6      	; 0x3a7a <leds_init>
	switch_init();
    3a74:	83 d2       	rcall	.+1286   	; 0x3f7c <switch_init>
	
	#ifdef ENABLE_RTC
		rtc_init();
	#endif
	#ifdef ENABLE_USB
		usb_init();
    3a76:	ae c2       	rjmp	.+1372   	; 0x3fd4 <usb_init>
    3a78:	08 95       	ret

00003a7a <leds_init>:
	led1( ( leds & (1<<0) ) && (1<<0)  );
	led2( ( leds & (1<<1) ) && (1<<1)  );
	led3( ( leds & (1<<2) ) && (1<<2)  );
	led4( ( leds & (1<<3) ) && (1<<3)  );

}
    3a7a:	e0 e0       	ldi	r30, 0x00	; 0
    3a7c:	f6 e0       	ldi	r31, 0x06	; 6
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	81 83       	std	Z+1, r24	; 0x01
    3a82:	82 e0       	ldi	r24, 0x02	; 2
    3a84:	81 83       	std	Z+1, r24	; 0x01
    3a86:	84 e0       	ldi	r24, 0x04	; 4
    3a88:	81 83       	std	Z+1, r24	; 0x01
    3a8a:	88 e0       	ldi	r24, 0x08	; 8
    3a8c:	81 83       	std	Z+1, r24	; 0x01
    3a8e:	08 95       	ret

00003a90 <led1>:
    3a90:	81 30       	cpi	r24, 0x01	; 1
    3a92:	91 05       	cpc	r25, r1
    3a94:	31 f0       	breq	.+12     	; 0x3aa2 <led1+0x12>
    3a96:	82 30       	cpi	r24, 0x02	; 2
    3a98:	91 05       	cpc	r25, r1
    3a9a:	69 f0       	breq	.+26     	; 0x3ab6 <led1+0x26>
    3a9c:	89 2b       	or	r24, r25
    3a9e:	79 f4       	brne	.+30     	; 0x3abe <led1+0x2e>
    3aa0:	05 c0       	rjmp	.+10     	; 0x3aac <led1+0x1c>
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	e0 e0       	ldi	r30, 0x00	; 0
    3aa6:	f6 e0       	ldi	r31, 0x06	; 6
    3aa8:	85 83       	std	Z+5, r24	; 0x05
    3aaa:	08 95       	ret
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	e0 e0       	ldi	r30, 0x00	; 0
    3ab0:	f6 e0       	ldi	r31, 0x06	; 6
    3ab2:	86 83       	std	Z+6, r24	; 0x06
    3ab4:	08 95       	ret
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	e0 e0       	ldi	r30, 0x00	; 0
    3aba:	f6 e0       	ldi	r31, 0x06	; 6
    3abc:	87 83       	std	Z+7, r24	; 0x07
    3abe:	08 95       	ret

00003ac0 <led2>:
    3ac0:	81 30       	cpi	r24, 0x01	; 1
    3ac2:	91 05       	cpc	r25, r1
    3ac4:	31 f0       	breq	.+12     	; 0x3ad2 <led2+0x12>
    3ac6:	82 30       	cpi	r24, 0x02	; 2
    3ac8:	91 05       	cpc	r25, r1
    3aca:	69 f0       	breq	.+26     	; 0x3ae6 <led2+0x26>
    3acc:	89 2b       	or	r24, r25
    3ace:	79 f4       	brne	.+30     	; 0x3aee <led2+0x2e>
    3ad0:	05 c0       	rjmp	.+10     	; 0x3adc <led2+0x1c>
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	e0 e0       	ldi	r30, 0x00	; 0
    3ad6:	f6 e0       	ldi	r31, 0x06	; 6
    3ad8:	85 83       	std	Z+5, r24	; 0x05
    3ada:	08 95       	ret
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	e0 e0       	ldi	r30, 0x00	; 0
    3ae0:	f6 e0       	ldi	r31, 0x06	; 6
    3ae2:	86 83       	std	Z+6, r24	; 0x06
    3ae4:	08 95       	ret
    3ae6:	82 e0       	ldi	r24, 0x02	; 2
    3ae8:	e0 e0       	ldi	r30, 0x00	; 0
    3aea:	f6 e0       	ldi	r31, 0x06	; 6
    3aec:	87 83       	std	Z+7, r24	; 0x07
    3aee:	08 95       	ret

00003af0 <led3>:
    3af0:	81 30       	cpi	r24, 0x01	; 1
    3af2:	91 05       	cpc	r25, r1
    3af4:	31 f0       	breq	.+12     	; 0x3b02 <led3+0x12>
    3af6:	82 30       	cpi	r24, 0x02	; 2
    3af8:	91 05       	cpc	r25, r1
    3afa:	69 f0       	breq	.+26     	; 0x3b16 <led3+0x26>
    3afc:	89 2b       	or	r24, r25
    3afe:	79 f4       	brne	.+30     	; 0x3b1e <led3+0x2e>
    3b00:	05 c0       	rjmp	.+10     	; 0x3b0c <led3+0x1c>
    3b02:	84 e0       	ldi	r24, 0x04	; 4
    3b04:	e0 e0       	ldi	r30, 0x00	; 0
    3b06:	f6 e0       	ldi	r31, 0x06	; 6
    3b08:	85 83       	std	Z+5, r24	; 0x05
    3b0a:	08 95       	ret
    3b0c:	84 e0       	ldi	r24, 0x04	; 4
    3b0e:	e0 e0       	ldi	r30, 0x00	; 0
    3b10:	f6 e0       	ldi	r31, 0x06	; 6
    3b12:	86 83       	std	Z+6, r24	; 0x06
    3b14:	08 95       	ret
    3b16:	84 e0       	ldi	r24, 0x04	; 4
    3b18:	e0 e0       	ldi	r30, 0x00	; 0
    3b1a:	f6 e0       	ldi	r31, 0x06	; 6
    3b1c:	87 83       	std	Z+7, r24	; 0x07
    3b1e:	08 95       	ret

00003b20 <led4>:
    3b20:	81 30       	cpi	r24, 0x01	; 1
    3b22:	91 05       	cpc	r25, r1
    3b24:	31 f0       	breq	.+12     	; 0x3b32 <led4+0x12>
    3b26:	82 30       	cpi	r24, 0x02	; 2
    3b28:	91 05       	cpc	r25, r1
    3b2a:	69 f0       	breq	.+26     	; 0x3b46 <led4+0x26>
    3b2c:	89 2b       	or	r24, r25
    3b2e:	79 f4       	brne	.+30     	; 0x3b4e <led4+0x2e>
    3b30:	05 c0       	rjmp	.+10     	; 0x3b3c <led4+0x1c>
    3b32:	88 e0       	ldi	r24, 0x08	; 8
    3b34:	e0 e0       	ldi	r30, 0x00	; 0
    3b36:	f6 e0       	ldi	r31, 0x06	; 6
    3b38:	85 83       	std	Z+5, r24	; 0x05
    3b3a:	08 95       	ret
    3b3c:	88 e0       	ldi	r24, 0x08	; 8
    3b3e:	e0 e0       	ldi	r30, 0x00	; 0
    3b40:	f6 e0       	ldi	r31, 0x06	; 6
    3b42:	86 83       	std	Z+6, r24	; 0x06
    3b44:	08 95       	ret
    3b46:	88 e0       	ldi	r24, 0x08	; 8
    3b48:	e0 e0       	ldi	r30, 0x00	; 0
    3b4a:	f6 e0       	ldi	r31, 0x06	; 6
    3b4c:	87 83       	std	Z+7, r24	; 0x07
    3b4e:	08 95       	ret

00003b50 <animation>:
	}
}


void animation(void)
{
    3b50:	af 92       	push	r10
    3b52:	bf 92       	push	r11
    3b54:	cf 92       	push	r12
    3b56:	df 92       	push	r13
    3b58:	ef 92       	push	r14
    3b5a:	ff 92       	push	r15
    3b5c:	0f 93       	push	r16
    3b5e:	1f 93       	push	r17
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	00 d0       	rcall	.+0      	; 0x3b66 <animation+0x16>
    3b66:	cd b7       	in	r28, 0x3d	; 61
    3b68:	de b7       	in	r29, 0x3e	; 62
	volatile int i;
	for(i = 50;i<ANIMATION_MAX;i+=15)
    3b6a:	82 e3       	ldi	r24, 0x32	; 50
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	89 83       	std	Y+1, r24	; 0x01
    3b70:	9a 83       	std	Y+2, r25	; 0x02
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	9a 81       	ldd	r25, Y+2	; 0x02
    3b76:	84 36       	cpi	r24, 0x64	; 100
    3b78:	91 05       	cpc	r25, r1
    3b7a:	0c f0       	brlt	.+2      	; 0x3b7e <animation+0x2e>
    3b7c:	f2 c1       	rjmp	.+996    	; 0x3f62 <animation+0x412>
	{
		led1(ON);
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	86 df       	rcall	.-244    	; 0x3a90 <led1>
		delay_ms(i);
    3b84:	e9 81       	ldd	r30, Y+1	; 0x01
    3b86:	fa 81       	ldd	r31, Y+2	; 0x02
    3b88:	9f 2f       	mov	r25, r31
    3b8a:	99 0f       	add	r25, r25
    3b8c:	99 0b       	sbc	r25, r25
    3b8e:	a1 2c       	mov	r10, r1
    3b90:	0f 2e       	mov	r0, r31
    3b92:	fc e6       	ldi	r31, 0x6C	; 108
    3b94:	bf 2e       	mov	r11, r31
    3b96:	f0 2d       	mov	r31, r0
    3b98:	0f 2e       	mov	r0, r31
    3b9a:	fc ed       	ldi	r31, 0xDC	; 220
    3b9c:	cf 2e       	mov	r12, r31
    3b9e:	f0 2d       	mov	r31, r0
    3ba0:	68 94       	set
    3ba2:	dd 24       	eor	r13, r13
    3ba4:	d1 f8       	bld	r13, 1
    3ba6:	e1 2c       	mov	r14, r1
    3ba8:	f1 2c       	mov	r15, r1
    3baa:	00 e0       	ldi	r16, 0x00	; 0
    3bac:	10 e0       	ldi	r17, 0x00	; 0
    3bae:	2e 2f       	mov	r18, r30
    3bb0:	3f 2f       	mov	r19, r31
    3bb2:	49 2f       	mov	r20, r25
    3bb4:	59 2f       	mov	r21, r25
    3bb6:	69 2f       	mov	r22, r25
    3bb8:	79 2f       	mov	r23, r25
    3bba:	89 2f       	mov	r24, r25
    3bbc:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__muldi3>
    3bc0:	29 51       	subi	r18, 0x19	; 25
    3bc2:	3c 4f       	sbci	r19, 0xFC	; 252
    3bc4:	4f 4f       	sbci	r20, 0xFF	; 255
    3bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    3bc8:	6f 4f       	sbci	r22, 0xFF	; 255
    3bca:	7f 4f       	sbci	r23, 0xFF	; 255
    3bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bce:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd0:	df d7       	rcall	.+4030   	; 0x4b90 <__floatundisf>
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e8       	ldi	r19, 0x80	; 128
    3bd6:	4b eb       	ldi	r20, 0xBB	; 187
    3bd8:	55 e4       	ldi	r21, 0x45	; 69
    3bda:	ca d6       	rcall	.+3476   	; 0x4970 <__divsf3>
    3bdc:	36 d7       	rcall	.+3692   	; 0x4a4a <__fixunssfdi>
    3bde:	f2 2f       	mov	r31, r18
    3be0:	e3 2f       	mov	r30, r19
    3be2:	8f 2f       	mov	r24, r31
    3be4:	9e 2f       	mov	r25, r30
    3be6:	a4 2f       	mov	r26, r20
    3be8:	b5 2f       	mov	r27, r21
    3bea:	01 97       	sbiw	r24, 0x01	; 1
    3bec:	a1 09       	sbc	r26, r1
    3bee:	b1 09       	sbc	r27, r1
    3bf0:	00 97       	sbiw	r24, 0x00	; 0
    3bf2:	a1 05       	cpc	r26, r1
    3bf4:	b1 05       	cpc	r27, r1
    3bf6:	c9 f7       	brne	.-14     	; 0x3bea <animation+0x9a>
		led2(ON);
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	61 df       	rcall	.-318    	; 0x3ac0 <led2>
		delay_ms(i);
    3bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    3c00:	fa 81       	ldd	r31, Y+2	; 0x02
    3c02:	9f 2f       	mov	r25, r31
    3c04:	99 0f       	add	r25, r25
    3c06:	99 0b       	sbc	r25, r25
    3c08:	a1 2c       	mov	r10, r1
    3c0a:	0f 2e       	mov	r0, r31
    3c0c:	fc e6       	ldi	r31, 0x6C	; 108
    3c0e:	bf 2e       	mov	r11, r31
    3c10:	f0 2d       	mov	r31, r0
    3c12:	0f 2e       	mov	r0, r31
    3c14:	fc ed       	ldi	r31, 0xDC	; 220
    3c16:	cf 2e       	mov	r12, r31
    3c18:	f0 2d       	mov	r31, r0
    3c1a:	68 94       	set
    3c1c:	dd 24       	eor	r13, r13
    3c1e:	d1 f8       	bld	r13, 1
    3c20:	e1 2c       	mov	r14, r1
    3c22:	f1 2c       	mov	r15, r1
    3c24:	00 e0       	ldi	r16, 0x00	; 0
    3c26:	10 e0       	ldi	r17, 0x00	; 0
    3c28:	2e 2f       	mov	r18, r30
    3c2a:	3f 2f       	mov	r19, r31
    3c2c:	49 2f       	mov	r20, r25
    3c2e:	59 2f       	mov	r21, r25
    3c30:	69 2f       	mov	r22, r25
    3c32:	79 2f       	mov	r23, r25
    3c34:	89 2f       	mov	r24, r25
    3c36:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__muldi3>
    3c3a:	29 51       	subi	r18, 0x19	; 25
    3c3c:	3c 4f       	sbci	r19, 0xFC	; 252
    3c3e:	4f 4f       	sbci	r20, 0xFF	; 255
    3c40:	5f 4f       	sbci	r21, 0xFF	; 255
    3c42:	6f 4f       	sbci	r22, 0xFF	; 255
    3c44:	7f 4f       	sbci	r23, 0xFF	; 255
    3c46:	8f 4f       	sbci	r24, 0xFF	; 255
    3c48:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4a:	a2 d7       	rcall	.+3908   	; 0x4b90 <__floatundisf>
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e8       	ldi	r19, 0x80	; 128
    3c50:	4b eb       	ldi	r20, 0xBB	; 187
    3c52:	55 e4       	ldi	r21, 0x45	; 69
    3c54:	8d d6       	rcall	.+3354   	; 0x4970 <__divsf3>
    3c56:	f9 d6       	rcall	.+3570   	; 0x4a4a <__fixunssfdi>
    3c58:	f2 2f       	mov	r31, r18
    3c5a:	e3 2f       	mov	r30, r19
    3c5c:	8f 2f       	mov	r24, r31
    3c5e:	9e 2f       	mov	r25, r30
    3c60:	a4 2f       	mov	r26, r20
    3c62:	b5 2f       	mov	r27, r21
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	a1 09       	sbc	r26, r1
    3c68:	b1 09       	sbc	r27, r1
    3c6a:	00 97       	sbiw	r24, 0x00	; 0
    3c6c:	a1 05       	cpc	r26, r1
    3c6e:	b1 05       	cpc	r27, r1
    3c70:	c9 f7       	brne	.-14     	; 0x3c64 <animation+0x114>
		led3(ON);
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	3c df       	rcall	.-392    	; 0x3af0 <led3>
		delay_ms(i);
    3c78:	e9 81       	ldd	r30, Y+1	; 0x01
    3c7a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c7c:	9f 2f       	mov	r25, r31
    3c7e:	99 0f       	add	r25, r25
    3c80:	99 0b       	sbc	r25, r25
    3c82:	a1 2c       	mov	r10, r1
    3c84:	0f 2e       	mov	r0, r31
    3c86:	fc e6       	ldi	r31, 0x6C	; 108
    3c88:	bf 2e       	mov	r11, r31
    3c8a:	f0 2d       	mov	r31, r0
    3c8c:	0f 2e       	mov	r0, r31
    3c8e:	fc ed       	ldi	r31, 0xDC	; 220
    3c90:	cf 2e       	mov	r12, r31
    3c92:	f0 2d       	mov	r31, r0
    3c94:	68 94       	set
    3c96:	dd 24       	eor	r13, r13
    3c98:	d1 f8       	bld	r13, 1
    3c9a:	e1 2c       	mov	r14, r1
    3c9c:	f1 2c       	mov	r15, r1
    3c9e:	00 e0       	ldi	r16, 0x00	; 0
    3ca0:	10 e0       	ldi	r17, 0x00	; 0
    3ca2:	2e 2f       	mov	r18, r30
    3ca4:	3f 2f       	mov	r19, r31
    3ca6:	49 2f       	mov	r20, r25
    3ca8:	59 2f       	mov	r21, r25
    3caa:	69 2f       	mov	r22, r25
    3cac:	79 2f       	mov	r23, r25
    3cae:	89 2f       	mov	r24, r25
    3cb0:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__muldi3>
    3cb4:	29 51       	subi	r18, 0x19	; 25
    3cb6:	3c 4f       	sbci	r19, 0xFC	; 252
    3cb8:	4f 4f       	sbci	r20, 0xFF	; 255
    3cba:	5f 4f       	sbci	r21, 0xFF	; 255
    3cbc:	6f 4f       	sbci	r22, 0xFF	; 255
    3cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc0:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc4:	65 d7       	rcall	.+3786   	; 0x4b90 <__floatundisf>
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	30 e8       	ldi	r19, 0x80	; 128
    3cca:	4b eb       	ldi	r20, 0xBB	; 187
    3ccc:	55 e4       	ldi	r21, 0x45	; 69
    3cce:	50 d6       	rcall	.+3232   	; 0x4970 <__divsf3>
    3cd0:	bc d6       	rcall	.+3448   	; 0x4a4a <__fixunssfdi>
    3cd2:	f2 2f       	mov	r31, r18
    3cd4:	e3 2f       	mov	r30, r19
    3cd6:	8f 2f       	mov	r24, r31
    3cd8:	9e 2f       	mov	r25, r30
    3cda:	a4 2f       	mov	r26, r20
    3cdc:	b5 2f       	mov	r27, r21
    3cde:	01 97       	sbiw	r24, 0x01	; 1
    3ce0:	a1 09       	sbc	r26, r1
    3ce2:	b1 09       	sbc	r27, r1
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	a1 05       	cpc	r26, r1
    3ce8:	b1 05       	cpc	r27, r1
    3cea:	c9 f7       	brne	.-14     	; 0x3cde <animation+0x18e>
		led4(ON);
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	17 df       	rcall	.-466    	; 0x3b20 <led4>
		delay_ms(i);
    3cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    3cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    3cf6:	9f 2f       	mov	r25, r31
    3cf8:	99 0f       	add	r25, r25
    3cfa:	99 0b       	sbc	r25, r25
    3cfc:	a1 2c       	mov	r10, r1
    3cfe:	0f 2e       	mov	r0, r31
    3d00:	fc e6       	ldi	r31, 0x6C	; 108
    3d02:	bf 2e       	mov	r11, r31
    3d04:	f0 2d       	mov	r31, r0
    3d06:	0f 2e       	mov	r0, r31
    3d08:	fc ed       	ldi	r31, 0xDC	; 220
    3d0a:	cf 2e       	mov	r12, r31
    3d0c:	f0 2d       	mov	r31, r0
    3d0e:	68 94       	set
    3d10:	dd 24       	eor	r13, r13
    3d12:	d1 f8       	bld	r13, 1
    3d14:	e1 2c       	mov	r14, r1
    3d16:	f1 2c       	mov	r15, r1
    3d18:	00 e0       	ldi	r16, 0x00	; 0
    3d1a:	10 e0       	ldi	r17, 0x00	; 0
    3d1c:	2e 2f       	mov	r18, r30
    3d1e:	3f 2f       	mov	r19, r31
    3d20:	49 2f       	mov	r20, r25
    3d22:	59 2f       	mov	r21, r25
    3d24:	69 2f       	mov	r22, r25
    3d26:	79 2f       	mov	r23, r25
    3d28:	89 2f       	mov	r24, r25
    3d2a:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__muldi3>
    3d2e:	29 51       	subi	r18, 0x19	; 25
    3d30:	3c 4f       	sbci	r19, 0xFC	; 252
    3d32:	4f 4f       	sbci	r20, 0xFF	; 255
    3d34:	5f 4f       	sbci	r21, 0xFF	; 255
    3d36:	6f 4f       	sbci	r22, 0xFF	; 255
    3d38:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3e:	28 d7       	rcall	.+3664   	; 0x4b90 <__floatundisf>
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e8       	ldi	r19, 0x80	; 128
    3d44:	4b eb       	ldi	r20, 0xBB	; 187
    3d46:	55 e4       	ldi	r21, 0x45	; 69
    3d48:	13 d6       	rcall	.+3110   	; 0x4970 <__divsf3>
    3d4a:	7f d6       	rcall	.+3326   	; 0x4a4a <__fixunssfdi>
    3d4c:	f2 2f       	mov	r31, r18
    3d4e:	e3 2f       	mov	r30, r19
    3d50:	8f 2f       	mov	r24, r31
    3d52:	9e 2f       	mov	r25, r30
    3d54:	a4 2f       	mov	r26, r20
    3d56:	b5 2f       	mov	r27, r21
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	a1 09       	sbc	r26, r1
    3d5c:	b1 09       	sbc	r27, r1
    3d5e:	00 97       	sbiw	r24, 0x00	; 0
    3d60:	a1 05       	cpc	r26, r1
    3d62:	b1 05       	cpc	r27, r1
    3d64:	c9 f7       	brne	.-14     	; 0x3d58 <animation+0x208>
		
		led1(OFF);
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	92 de       	rcall	.-732    	; 0x3a90 <led1>
		delay_ms(i);
    3d6c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d6e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d70:	9f 2f       	mov	r25, r31
    3d72:	99 0f       	add	r25, r25
    3d74:	99 0b       	sbc	r25, r25
    3d76:	a1 2c       	mov	r10, r1
    3d78:	0f 2e       	mov	r0, r31
    3d7a:	fc e6       	ldi	r31, 0x6C	; 108
    3d7c:	bf 2e       	mov	r11, r31
    3d7e:	f0 2d       	mov	r31, r0
    3d80:	0f 2e       	mov	r0, r31
    3d82:	fc ed       	ldi	r31, 0xDC	; 220
    3d84:	cf 2e       	mov	r12, r31
    3d86:	f0 2d       	mov	r31, r0
    3d88:	68 94       	set
    3d8a:	dd 24       	eor	r13, r13
    3d8c:	d1 f8       	bld	r13, 1
    3d8e:	e1 2c       	mov	r14, r1
    3d90:	f1 2c       	mov	r15, r1
    3d92:	00 e0       	ldi	r16, 0x00	; 0
    3d94:	10 e0       	ldi	r17, 0x00	; 0
    3d96:	2e 2f       	mov	r18, r30
    3d98:	3f 2f       	mov	r19, r31
    3d9a:	49 2f       	mov	r20, r25
    3d9c:	59 2f       	mov	r21, r25
    3d9e:	69 2f       	mov	r22, r25
    3da0:	79 2f       	mov	r23, r25
    3da2:	89 2f       	mov	r24, r25
    3da4:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__muldi3>
    3da8:	29 51       	subi	r18, 0x19	; 25
    3daa:	3c 4f       	sbci	r19, 0xFC	; 252
    3dac:	4f 4f       	sbci	r20, 0xFF	; 255
    3dae:	5f 4f       	sbci	r21, 0xFF	; 255
    3db0:	6f 4f       	sbci	r22, 0xFF	; 255
    3db2:	7f 4f       	sbci	r23, 0xFF	; 255
    3db4:	8f 4f       	sbci	r24, 0xFF	; 255
    3db6:	9f 4f       	sbci	r25, 0xFF	; 255
    3db8:	eb d6       	rcall	.+3542   	; 0x4b90 <__floatundisf>
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	30 e8       	ldi	r19, 0x80	; 128
    3dbe:	4b eb       	ldi	r20, 0xBB	; 187
    3dc0:	55 e4       	ldi	r21, 0x45	; 69
    3dc2:	d6 d5       	rcall	.+2988   	; 0x4970 <__divsf3>
    3dc4:	42 d6       	rcall	.+3204   	; 0x4a4a <__fixunssfdi>
    3dc6:	f2 2f       	mov	r31, r18
    3dc8:	e3 2f       	mov	r30, r19
    3dca:	8f 2f       	mov	r24, r31
    3dcc:	9e 2f       	mov	r25, r30
    3dce:	a4 2f       	mov	r26, r20
    3dd0:	b5 2f       	mov	r27, r21
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	a1 09       	sbc	r26, r1
    3dd6:	b1 09       	sbc	r27, r1
    3dd8:	00 97       	sbiw	r24, 0x00	; 0
    3dda:	a1 05       	cpc	r26, r1
    3ddc:	b1 05       	cpc	r27, r1
    3dde:	c9 f7       	brne	.-14     	; 0x3dd2 <animation+0x282>
		led2(OFF);
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	6d de       	rcall	.-806    	; 0x3ac0 <led2>
		delay_ms(i);
    3de6:	e9 81       	ldd	r30, Y+1	; 0x01
    3de8:	fa 81       	ldd	r31, Y+2	; 0x02
    3dea:	9f 2f       	mov	r25, r31
    3dec:	99 0f       	add	r25, r25
    3dee:	99 0b       	sbc	r25, r25
    3df0:	a1 2c       	mov	r10, r1
    3df2:	0f 2e       	mov	r0, r31
    3df4:	fc e6       	ldi	r31, 0x6C	; 108
    3df6:	bf 2e       	mov	r11, r31
    3df8:	f0 2d       	mov	r31, r0
    3dfa:	0f 2e       	mov	r0, r31
    3dfc:	fc ed       	ldi	r31, 0xDC	; 220
    3dfe:	cf 2e       	mov	r12, r31
    3e00:	f0 2d       	mov	r31, r0
    3e02:	68 94       	set
    3e04:	dd 24       	eor	r13, r13
    3e06:	d1 f8       	bld	r13, 1
    3e08:	e1 2c       	mov	r14, r1
    3e0a:	f1 2c       	mov	r15, r1
    3e0c:	00 e0       	ldi	r16, 0x00	; 0
    3e0e:	10 e0       	ldi	r17, 0x00	; 0
    3e10:	2e 2f       	mov	r18, r30
    3e12:	3f 2f       	mov	r19, r31
    3e14:	49 2f       	mov	r20, r25
    3e16:	59 2f       	mov	r21, r25
    3e18:	69 2f       	mov	r22, r25
    3e1a:	79 2f       	mov	r23, r25
    3e1c:	89 2f       	mov	r24, r25
    3e1e:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__muldi3>
    3e22:	29 51       	subi	r18, 0x19	; 25
    3e24:	3c 4f       	sbci	r19, 0xFC	; 252
    3e26:	4f 4f       	sbci	r20, 0xFF	; 255
    3e28:	5f 4f       	sbci	r21, 0xFF	; 255
    3e2a:	6f 4f       	sbci	r22, 0xFF	; 255
    3e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e30:	9f 4f       	sbci	r25, 0xFF	; 255
    3e32:	ae d6       	rcall	.+3420   	; 0x4b90 <__floatundisf>
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e8       	ldi	r19, 0x80	; 128
    3e38:	4b eb       	ldi	r20, 0xBB	; 187
    3e3a:	55 e4       	ldi	r21, 0x45	; 69
    3e3c:	99 d5       	rcall	.+2866   	; 0x4970 <__divsf3>
    3e3e:	05 d6       	rcall	.+3082   	; 0x4a4a <__fixunssfdi>
    3e40:	f2 2f       	mov	r31, r18
    3e42:	e3 2f       	mov	r30, r19
    3e44:	8f 2f       	mov	r24, r31
    3e46:	9e 2f       	mov	r25, r30
    3e48:	a4 2f       	mov	r26, r20
    3e4a:	b5 2f       	mov	r27, r21
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	a1 09       	sbc	r26, r1
    3e50:	b1 09       	sbc	r27, r1
    3e52:	00 97       	sbiw	r24, 0x00	; 0
    3e54:	a1 05       	cpc	r26, r1
    3e56:	b1 05       	cpc	r27, r1
    3e58:	c9 f7       	brne	.-14     	; 0x3e4c <animation+0x2fc>
		led3(OFF);
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	48 de       	rcall	.-880    	; 0x3af0 <led3>
		delay_ms(i);
    3e60:	e9 81       	ldd	r30, Y+1	; 0x01
    3e62:	fa 81       	ldd	r31, Y+2	; 0x02
    3e64:	9f 2f       	mov	r25, r31
    3e66:	99 0f       	add	r25, r25
    3e68:	99 0b       	sbc	r25, r25
    3e6a:	a1 2c       	mov	r10, r1
    3e6c:	0f 2e       	mov	r0, r31
    3e6e:	fc e6       	ldi	r31, 0x6C	; 108
    3e70:	bf 2e       	mov	r11, r31
    3e72:	f0 2d       	mov	r31, r0
    3e74:	0f 2e       	mov	r0, r31
    3e76:	fc ed       	ldi	r31, 0xDC	; 220
    3e78:	cf 2e       	mov	r12, r31
    3e7a:	f0 2d       	mov	r31, r0
    3e7c:	68 94       	set
    3e7e:	dd 24       	eor	r13, r13
    3e80:	d1 f8       	bld	r13, 1
    3e82:	e1 2c       	mov	r14, r1
    3e84:	f1 2c       	mov	r15, r1
    3e86:	00 e0       	ldi	r16, 0x00	; 0
    3e88:	10 e0       	ldi	r17, 0x00	; 0
    3e8a:	2e 2f       	mov	r18, r30
    3e8c:	3f 2f       	mov	r19, r31
    3e8e:	49 2f       	mov	r20, r25
    3e90:	59 2f       	mov	r21, r25
    3e92:	69 2f       	mov	r22, r25
    3e94:	79 2f       	mov	r23, r25
    3e96:	89 2f       	mov	r24, r25
    3e98:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__muldi3>
    3e9c:	29 51       	subi	r18, 0x19	; 25
    3e9e:	3c 4f       	sbci	r19, 0xFC	; 252
    3ea0:	4f 4f       	sbci	r20, 0xFF	; 255
    3ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ea4:	6f 4f       	sbci	r22, 0xFF	; 255
    3ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea8:	8f 4f       	sbci	r24, 0xFF	; 255
    3eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3eac:	71 d6       	rcall	.+3298   	; 0x4b90 <__floatundisf>
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e8       	ldi	r19, 0x80	; 128
    3eb2:	4b eb       	ldi	r20, 0xBB	; 187
    3eb4:	55 e4       	ldi	r21, 0x45	; 69
    3eb6:	5c d5       	rcall	.+2744   	; 0x4970 <__divsf3>
    3eb8:	c8 d5       	rcall	.+2960   	; 0x4a4a <__fixunssfdi>
    3eba:	f2 2f       	mov	r31, r18
    3ebc:	e3 2f       	mov	r30, r19
    3ebe:	8f 2f       	mov	r24, r31
    3ec0:	9e 2f       	mov	r25, r30
    3ec2:	a4 2f       	mov	r26, r20
    3ec4:	b5 2f       	mov	r27, r21
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	a1 09       	sbc	r26, r1
    3eca:	b1 09       	sbc	r27, r1
    3ecc:	00 97       	sbiw	r24, 0x00	; 0
    3ece:	a1 05       	cpc	r26, r1
    3ed0:	b1 05       	cpc	r27, r1
    3ed2:	c9 f7       	brne	.-14     	; 0x3ec6 <animation+0x376>
		led4(OFF);
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	23 de       	rcall	.-954    	; 0x3b20 <led4>
		delay_ms(i);
    3eda:	e9 81       	ldd	r30, Y+1	; 0x01
    3edc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ede:	9f 2f       	mov	r25, r31
    3ee0:	99 0f       	add	r25, r25
    3ee2:	99 0b       	sbc	r25, r25
    3ee4:	a1 2c       	mov	r10, r1
    3ee6:	0f 2e       	mov	r0, r31
    3ee8:	fc e6       	ldi	r31, 0x6C	; 108
    3eea:	bf 2e       	mov	r11, r31
    3eec:	f0 2d       	mov	r31, r0
    3eee:	0f 2e       	mov	r0, r31
    3ef0:	fc ed       	ldi	r31, 0xDC	; 220
    3ef2:	cf 2e       	mov	r12, r31
    3ef4:	f0 2d       	mov	r31, r0
    3ef6:	68 94       	set
    3ef8:	dd 24       	eor	r13, r13
    3efa:	d1 f8       	bld	r13, 1
    3efc:	e1 2c       	mov	r14, r1
    3efe:	f1 2c       	mov	r15, r1
    3f00:	00 e0       	ldi	r16, 0x00	; 0
    3f02:	10 e0       	ldi	r17, 0x00	; 0
    3f04:	2e 2f       	mov	r18, r30
    3f06:	3f 2f       	mov	r19, r31
    3f08:	49 2f       	mov	r20, r25
    3f0a:	59 2f       	mov	r21, r25
    3f0c:	69 2f       	mov	r22, r25
    3f0e:	79 2f       	mov	r23, r25
    3f10:	89 2f       	mov	r24, r25
    3f12:	e2 d7       	rcall	.+4036   	; 0x4ed8 <__muldi3>
    3f14:	29 51       	subi	r18, 0x19	; 25
    3f16:	3c 4f       	sbci	r19, 0xFC	; 252
    3f18:	4f 4f       	sbci	r20, 0xFF	; 255
    3f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f1c:	6f 4f       	sbci	r22, 0xFF	; 255
    3f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f20:	8f 4f       	sbci	r24, 0xFF	; 255
    3f22:	9f 4f       	sbci	r25, 0xFF	; 255
    3f24:	35 d6       	rcall	.+3178   	; 0x4b90 <__floatundisf>
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e8       	ldi	r19, 0x80	; 128
    3f2a:	4b eb       	ldi	r20, 0xBB	; 187
    3f2c:	55 e4       	ldi	r21, 0x45	; 69
    3f2e:	20 d5       	rcall	.+2624   	; 0x4970 <__divsf3>
    3f30:	8c d5       	rcall	.+2840   	; 0x4a4a <__fixunssfdi>
    3f32:	f2 2f       	mov	r31, r18
    3f34:	e3 2f       	mov	r30, r19
    3f36:	8f 2f       	mov	r24, r31
    3f38:	9e 2f       	mov	r25, r30
    3f3a:	a4 2f       	mov	r26, r20
    3f3c:	b5 2f       	mov	r27, r21
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	a1 09       	sbc	r26, r1
    3f42:	b1 09       	sbc	r27, r1
    3f44:	00 97       	sbiw	r24, 0x00	; 0
    3f46:	a1 05       	cpc	r26, r1
    3f48:	b1 05       	cpc	r27, r1
    3f4a:	c9 f7       	brne	.-14     	; 0x3f3e <animation+0x3ee>


void animation(void)
{
	volatile int i;
	for(i = 50;i<ANIMATION_MAX;i+=15)
    3f4c:	89 81       	ldd	r24, Y+1	; 0x01
    3f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f50:	0f 96       	adiw	r24, 0x0f	; 15
    3f52:	89 83       	std	Y+1, r24	; 0x01
    3f54:	9a 83       	std	Y+2, r25	; 0x02
    3f56:	89 81       	ldd	r24, Y+1	; 0x01
    3f58:	9a 81       	ldd	r25, Y+2	; 0x02
    3f5a:	84 36       	cpi	r24, 0x64	; 100
    3f5c:	91 05       	cpc	r25, r1
    3f5e:	0c f4       	brge	.+2      	; 0x3f62 <animation+0x412>
    3f60:	0e ce       	rjmp	.-996    	; 0x3b7e <animation+0x2e>
		led3(OFF);
		delay_ms(i);
		led4(OFF);
		delay_ms(i);
	}
}
    3f62:	0f 90       	pop	r0
    3f64:	0f 90       	pop	r0
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	1f 91       	pop	r17
    3f6c:	0f 91       	pop	r16
    3f6e:	ff 90       	pop	r15
    3f70:	ef 90       	pop	r14
    3f72:	df 90       	pop	r13
    3f74:	cf 90       	pop	r12
    3f76:	bf 90       	pop	r11
    3f78:	af 90       	pop	r10
    3f7a:	08 95       	ret

00003f7c <switch_init>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    3f7c:	88 e0       	ldi	r24, 0x08	; 8
    3f7e:	e0 e4       	ldi	r30, 0x40	; 64
    3f80:	f6 e0       	ldi	r31, 0x06	; 6
    3f82:	82 83       	std	Z+2, r24	; 0x02
    3f84:	08 95       	ret

00003f86 <usb_putchar_printf>:
	usb_putchar(*string++);
}


#ifdef PRINTF_USB
int usb_putchar_printf(char var, FILE *stream) {
    3f86:	cf 93       	push	r28
    3f88:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
    3f8a:	8a 30       	cpi	r24, 0x0A	; 10
    3f8c:	21 f4       	brne	.+8      	; 0x3f96 <usb_putchar_printf+0x10>
	
}

void usb_putchar(char a)
{
	udi_cdc_putc(a);
    3f8e:	8d e0       	ldi	r24, 0x0D	; 13
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	0e 94 18 04 	call	0x830	; 0x830 <udi_cdc_putc>
    3f96:	8c 2f       	mov	r24, r28
    3f98:	99 27       	eor	r25, r25
    3f9a:	87 fd       	sbrc	r24, 7
    3f9c:	90 95       	com	r25
    3f9e:	0e 94 18 04 	call	0x830	; 0x830 <udi_cdc_putc>
int usb_putchar_printf(char var, FILE *stream) {
	// translate \n to \r for br@y++ terminal
	if (var == '\n') usb_putchar('\r');
	usb_putchar(var);
	return 0;
}
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	cf 91       	pop	r28
    3fa8:	08 95       	ret

00003faa <usb_getchar_scanf>:

int usb_getchar_scanf(FILE *stream)
{
    3faa:	0f 93       	push	r16
    3fac:	1f 93       	push	r17
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
    3fb2:	8c 01       	movw	r16, r24
	return udi_cdc_getc();
}

int usb_is_rx_ready(void)
{
	return udi_cdc_is_rx_ready();
    3fb4:	0e 94 4a 03 	call	0x694	; 0x694 <udi_cdc_is_rx_ready>

int usb_getchar_scanf(FILE *stream)
{
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
    3fb8:	88 23       	and	r24, r24
    3fba:	e1 f3       	breq	.-8      	; 0x3fb4 <usb_getchar_scanf+0xa>
	udi_cdc_putc(a);
}

char usb_getchar(void)
{
	return udi_cdc_getc();
    3fbc:	0e 94 96 03 	call	0x72c	; 0x72c <udi_cdc_getc>
    3fc0:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while (usb_is_rx_ready()==0);
	u8Data=usb_getchar();
	//echo input data
	usb_putchar_printf(u8Data,stream);
    3fc2:	b8 01       	movw	r22, r16
    3fc4:	e0 df       	rcall	.-64     	; 0x3f86 <usb_putchar_printf>
	// Return received data
	return u8Data;
}
    3fc6:	ce 01       	movw	r24, r28
    3fc8:	99 27       	eor	r25, r25
    3fca:	df 91       	pop	r29
    3fcc:	cf 91       	pop	r28
    3fce:	1f 91       	pop	r17
    3fd0:	0f 91       	pop	r16
    3fd2:	08 95       	ret

00003fd4 <usb_init>:

#include "./../include/usb_serial.h"

void usb_init(void)
{
	irq_initialize_vectors();
    3fd4:	87 e0       	ldi	r24, 0x07	; 7
    3fd6:	e0 ea       	ldi	r30, 0xA0	; 160
    3fd8:	f0 e0       	ldi	r31, 0x00	; 0
    3fda:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    3fdc:	78 94       	sei
	udc_start();
    3fde:	0e 94 06 05 	call	0xa0c	; 0xa0c <udc_start>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    3fe2:	0e 94 3b 11 	call	0x2276	; 0x2276 <udd_attach>
	udc_attach();
	
	#ifdef PRINTF_USB
	// setup our stdio stream
	stdout = &mystdout;
    3fe6:	8c e7       	ldi	r24, 0x7C	; 124
    3fe8:	90 e2       	ldi	r25, 0x20	; 32
    3fea:	80 93 64 27 	sts	0x2764, r24
    3fee:	90 93 65 27 	sts	0x2765, r25
	stdin = &mystdout;
    3ff2:	80 93 62 27 	sts	0x2762, r24
    3ff6:	90 93 63 27 	sts	0x2763, r25
    3ffa:	08 95       	ret

00003ffc <ioport_set_pin_mode>:
{
	if(isGestureAvailable())
	{
		return readGesture();
	}
}
    3ffc:	e8 2f       	mov	r30, r24
    3ffe:	e6 95       	lsr	r30
    4000:	e6 95       	lsr	r30
    4002:	e6 95       	lsr	r30
    4004:	90 e2       	ldi	r25, 0x20	; 32
    4006:	e9 9f       	mul	r30, r25
    4008:	f0 01       	movw	r30, r0
    400a:	11 24       	eor	r1, r1
    400c:	e0 5f       	subi	r30, 0xF0	; 240
    400e:	f9 4f       	sbci	r31, 0xF9	; 249
    4010:	87 70       	andi	r24, 0x07	; 7
    4012:	e8 0f       	add	r30, r24
    4014:	f1 1d       	adc	r31, r1
    4016:	8f b7       	in	r24, 0x3f	; 63
    4018:	f8 94       	cli
    401a:	90 81       	ld	r25, Z
    401c:	97 70       	andi	r25, 0x07	; 7
    401e:	90 83       	st	Z, r25
    4020:	90 81       	ld	r25, Z
    4022:	69 2b       	or	r22, r25
    4024:	60 83       	st	Z, r22
    4026:	8f bf       	out	0x3f, r24	; 63
    4028:	08 95       	ret

0000402a <slave_process>:
    402a:	80 91 4d 27 	lds	r24, 0x274D
    402e:	88 23       	and	r24, r24
    4030:	19 f0       	breq	.+6      	; 0x4038 <slave_process+0xe>
    4032:	81 30       	cpi	r24, 0x01	; 1
    4034:	b1 f0       	breq	.+44     	; 0x4062 <slave_process+0x38>
    4036:	35 c0       	rjmp	.+106    	; 0x40a2 <slave_process+0x78>
    4038:	20 91 51 27 	lds	r18, 0x2751
    403c:	80 91 50 27 	lds	r24, 0x2750
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	92 2b       	or	r25, r18
    4044:	80 93 17 24 	sts	0x2417, r24
    4048:	90 93 18 24 	sts	0x2418, r25
    404c:	20 91 4f 27 	lds	r18, 0x274F
    4050:	80 91 4e 27 	lds	r24, 0x274E
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	92 2b       	or	r25, r18
    4058:	80 93 15 24 	sts	0x2415, r24
    405c:	90 93 16 24 	sts	0x2416, r25
    4060:	20 c0       	rjmp	.+64     	; 0x40a2 <slave_process+0x78>
    4062:	90 91 1b 24 	lds	r25, 0x241B
    4066:	80 91 1c 24 	lds	r24, 0x241C
    406a:	90 93 55 27 	sts	0x2755, r25
    406e:	80 93 56 27 	sts	0x2756, r24
    4072:	90 91 19 24 	lds	r25, 0x2419
    4076:	80 91 1a 24 	lds	r24, 0x241A
    407a:	90 93 57 27 	sts	0x2757, r25
    407e:	80 93 58 27 	sts	0x2758, r24
    4082:	80 91 1d 24 	lds	r24, 0x241D
    4086:	80 93 59 27 	sts	0x2759, r24
    408a:	80 91 1e 24 	lds	r24, 0x241E
    408e:	80 93 5a 27 	sts	0x275A, r24
    4092:	90 91 1f 24 	lds	r25, 0x241F
    4096:	80 91 20 24 	lds	r24, 0x2420
    409a:	90 93 5b 27 	sts	0x275B, r25
    409e:	80 93 5c 27 	sts	0x275C, r24
    40a2:	82 e0       	ldi	r24, 0x02	; 2
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	f4 cc       	rjmp	.-1560   	; 0x3a90 <led1>
    40a8:	08 95       	ret

000040aa <print_gesture>:

void print_gesture(void)
{
	if(isGestureAvailable())
    40aa:	5c da       	rcall	.-2888   	; 0x3564 <isGestureAvailable>
    40ac:	89 2b       	or	r24, r25
    40ae:	69 f1       	breq	.+90     	; 0x410a <print_gesture+0x60>
	{
		switch(readGesture())
    40b0:	a4 da       	rcall	.-2744   	; 0x35fa <readGesture>
    40b2:	83 30       	cpi	r24, 0x03	; 3
    40b4:	91 05       	cpc	r25, r1
    40b6:	71 f0       	breq	.+28     	; 0x40d4 <print_gesture+0x2a>
    40b8:	34 f4       	brge	.+12     	; 0x40c6 <print_gesture+0x1c>
    40ba:	81 30       	cpi	r24, 0x01	; 1
    40bc:	91 05       	cpc	r25, r1
    40be:	91 f0       	breq	.+36     	; 0x40e4 <print_gesture+0x3a>
    40c0:	02 97       	sbiw	r24, 0x02	; 2
    40c2:	a1 f0       	breq	.+40     	; 0x40ec <print_gesture+0x42>
    40c4:	1f c0       	rjmp	.+62     	; 0x4104 <print_gesture+0x5a>
    40c6:	85 30       	cpi	r24, 0x05	; 5
    40c8:	91 05       	cpc	r25, r1
    40ca:	a1 f0       	breq	.+40     	; 0x40f4 <print_gesture+0x4a>
    40cc:	3c f0       	brlt	.+14     	; 0x40dc <print_gesture+0x32>
    40ce:	06 97       	sbiw	r24, 0x06	; 6
    40d0:	a9 f0       	breq	.+42     	; 0x40fc <print_gesture+0x52>
    40d2:	18 c0       	rjmp	.+48     	; 0x4104 <print_gesture+0x5a>
		{
			case DIR_UP:
			printf("UP \n");
    40d4:	80 e2       	ldi	r24, 0x20	; 32
    40d6:	91 e2       	ldi	r25, 0x21	; 33
    40d8:	59 c7       	rjmp	.+3762   	; 0x4f8c <puts>
			break;
    40da:	08 95       	ret
			case DIR_DOWN:
			printf("DOWN \n");
    40dc:	84 e2       	ldi	r24, 0x24	; 36
    40de:	91 e2       	ldi	r25, 0x21	; 33
    40e0:	55 c7       	rjmp	.+3754   	; 0x4f8c <puts>
			break;
    40e2:	08 95       	ret
			case DIR_LEFT:
			printf("LEFT \n");
    40e4:	8a e2       	ldi	r24, 0x2A	; 42
    40e6:	91 e2       	ldi	r25, 0x21	; 33
    40e8:	51 c7       	rjmp	.+3746   	; 0x4f8c <puts>
			break;
    40ea:	08 95       	ret
			case DIR_RIGHT:
			printf("RIGHT \n");
    40ec:	80 e3       	ldi	r24, 0x30	; 48
    40ee:	91 e2       	ldi	r25, 0x21	; 33
    40f0:	4d c7       	rjmp	.+3738   	; 0x4f8c <puts>
			break;
    40f2:	08 95       	ret
			case DIR_NEAR:
			printf("NEAR \n");
    40f4:	87 e3       	ldi	r24, 0x37	; 55
    40f6:	91 e2       	ldi	r25, 0x21	; 33
    40f8:	49 c7       	rjmp	.+3730   	; 0x4f8c <puts>
			break;
    40fa:	08 95       	ret
			case DIR_FAR:
			printf("FAR \n");
    40fc:	8d e3       	ldi	r24, 0x3D	; 61
    40fe:	91 e2       	ldi	r25, 0x21	; 33
    4100:	45 c7       	rjmp	.+3722   	; 0x4f8c <puts>
			break;
    4102:	08 95       	ret
			default:
			printf("NONE \n");
    4104:	82 e4       	ldi	r24, 0x42	; 66
    4106:	91 e2       	ldi	r25, 0x21	; 33
    4108:	41 c7       	rjmp	.+3714   	; 0x4f8c <puts>
    410a:	08 95       	ret

0000410c <__vector_43>:
	}
	
}

ISR(PORTE_INT0_vect) //  Sensor gestos
{
    410c:	1f 92       	push	r1
    410e:	0f 92       	push	r0
    4110:	0f b6       	in	r0, 0x3f	; 63
    4112:	0f 92       	push	r0
    4114:	11 24       	eor	r1, r1
    4116:	2f 93       	push	r18
    4118:	3f 93       	push	r19
    411a:	4f 93       	push	r20
    411c:	5f 93       	push	r21
    411e:	6f 93       	push	r22
    4120:	7f 93       	push	r23
    4122:	8f 93       	push	r24
    4124:	9f 93       	push	r25
    4126:	af 93       	push	r26
    4128:	bf 93       	push	r27
    412a:	ef 93       	push	r30
    412c:	ff 93       	push	r31
	print_gesture();
    412e:	bd df       	rcall	.-134    	; 0x40aa <print_gesture>
	led2(TOGGLE);
    4130:	82 e0       	ldi	r24, 0x02	; 2
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	c5 dc       	rcall	.-1654   	; 0x3ac0 <led2>
}
    4136:	ff 91       	pop	r31
    4138:	ef 91       	pop	r30
    413a:	bf 91       	pop	r27
    413c:	af 91       	pop	r26
    413e:	9f 91       	pop	r25
    4140:	8f 91       	pop	r24
    4142:	7f 91       	pop	r23
    4144:	6f 91       	pop	r22
    4146:	5f 91       	pop	r21
    4148:	4f 91       	pop	r20
    414a:	3f 91       	pop	r19
    414c:	2f 91       	pop	r18
    414e:	0f 90       	pop	r0
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	0f 90       	pop	r0
    4154:	1f 90       	pop	r1
    4156:	18 95       	reti

00004158 <__vector_44>:
ISR(PORTE_INT1_vect) // sensor Linea
{
    4158:	1f 92       	push	r1
    415a:	0f 92       	push	r0
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	0f 92       	push	r0
    4160:	11 24       	eor	r1, r1
    4162:	2f 93       	push	r18
    4164:	3f 93       	push	r19
    4166:	4f 93       	push	r20
    4168:	5f 93       	push	r21
    416a:	6f 93       	push	r22
    416c:	7f 93       	push	r23
    416e:	8f 93       	push	r24
    4170:	9f 93       	push	r25
    4172:	af 93       	push	r26
    4174:	bf 93       	push	r27
    4176:	ef 93       	push	r30
    4178:	ff 93       	push	r31
	
	led1(TOGGLE);
    417a:	82 e0       	ldi	r24, 0x02	; 2
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	88 dc       	rcall	.-1776   	; 0x3a90 <led1>
}
    4180:	ff 91       	pop	r31
    4182:	ef 91       	pop	r30
    4184:	bf 91       	pop	r27
    4186:	af 91       	pop	r26
    4188:	9f 91       	pop	r25
    418a:	8f 91       	pop	r24
    418c:	7f 91       	pop	r23
    418e:	6f 91       	pop	r22
    4190:	5f 91       	pop	r21
    4192:	4f 91       	pop	r20
    4194:	3f 91       	pop	r19
    4196:	2f 91       	pop	r18
    4198:	0f 90       	pop	r0
    419a:	0f be       	out	0x3f, r0	; 63
    419c:	0f 90       	pop	r0
    419e:	1f 90       	pop	r1
    41a0:	18 95       	reti

000041a2 <pid_control_right>:
uint16_t sens_l=0;
uint16_t ref_l=0;
uint16_t ref_r=0;

void pid_control_right(uint32_t ref, uint32_t sens)
{
    41a2:	4f 92       	push	r4
    41a4:	5f 92       	push	r5
    41a6:	6f 92       	push	r6
    41a8:	7f 92       	push	r7
    41aa:	8f 92       	push	r8
    41ac:	9f 92       	push	r9
    41ae:	af 92       	push	r10
    41b0:	bf 92       	push	r11
    41b2:	cf 92       	push	r12
    41b4:	df 92       	push	r13
    41b6:	ef 92       	push	r14
    41b8:	ff 92       	push	r15
    41ba:	cf 93       	push	r28
    41bc:	df 93       	push	r29
    41be:	00 d0       	rcall	.+0      	; 0x41c0 <pid_control_right+0x1e>
    41c0:	00 d0       	rcall	.+0      	; 0x41c2 <pid_control_right+0x20>
    41c2:	cd b7       	in	r28, 0x3d	; 61
    41c4:	de b7       	in	r29, 0x3e	; 62
    41c6:	6b 01       	movw	r12, r22
    41c8:	7c 01       	movw	r14, r24
    41ca:	29 83       	std	Y+1, r18	; 0x01
    41cc:	3a 83       	std	Y+2, r19	; 0x02
    41ce:	4b 83       	std	Y+3, r20	; 0x03
    41d0:	5c 83       	std	Y+4, r21	; 0x04
	
	static double Kp=0.00004;//0.01054;
	static double Ki=0.0072;//19.62;
	static double KpKiT = 0.0024;//0.0022;//
	
	cli(); //Deactivate interrupts to avoid problems with the i2c communications
    41d2:	f8 94       	cli
	if (ref>1428)
    41d4:	65 39       	cpi	r22, 0x95	; 149
    41d6:	25 e0       	ldi	r18, 0x05	; 5
    41d8:	72 07       	cpc	r23, r18
    41da:	81 05       	cpc	r24, r1
    41dc:	91 05       	cpc	r25, r1
    41de:	58 f4       	brcc	.+22     	; 0x41f6 <pid_control_right+0x54>
	{
		ref = 1428;
	}
	else if (ref < 1)
    41e0:	61 15       	cp	r22, r1
    41e2:	71 05       	cpc	r23, r1
    41e4:	81 05       	cpc	r24, r1
    41e6:	91 05       	cpc	r25, r1
    41e8:	b1 f0       	breq	.+44     	; 0x4216 <pid_control_right+0x74>
	{
		ref=0;
	}
	else if (ref < 150)
    41ea:	66 39       	cpi	r22, 0x96	; 150
    41ec:	71 05       	cpc	r23, r1
    41ee:	81 05       	cpc	r24, r1
    41f0:	91 05       	cpc	r25, r1
    41f2:	50 f0       	brcs	.+20     	; 0x4208 <pid_control_right+0x66>
    41f4:	10 c0       	rjmp	.+32     	; 0x4216 <pid_control_right+0x74>
	static double KpKiT = 0.0024;//0.0022;//
	
	cli(); //Deactivate interrupts to avoid problems with the i2c communications
	if (ref>1428)
	{
		ref = 1428;
    41f6:	0f 2e       	mov	r0, r31
    41f8:	f4 e9       	ldi	r31, 0x94	; 148
    41fa:	cf 2e       	mov	r12, r31
    41fc:	f5 e0       	ldi	r31, 0x05	; 5
    41fe:	df 2e       	mov	r13, r31
    4200:	e1 2c       	mov	r14, r1
    4202:	f1 2c       	mov	r15, r1
    4204:	f0 2d       	mov	r31, r0
    4206:	07 c0       	rjmp	.+14     	; 0x4216 <pid_control_right+0x74>
	{
		ref=0;
	}
	else if (ref < 150)
	{
		ref = 150;
    4208:	0f 2e       	mov	r0, r31
    420a:	f6 e9       	ldi	r31, 0x96	; 150
    420c:	cf 2e       	mov	r12, r31
    420e:	d1 2c       	mov	r13, r1
    4210:	e1 2c       	mov	r14, r1
    4212:	f1 2c       	mov	r15, r1
    4214:	f0 2d       	mov	r31, r0
	}
	e = ref - sens;
    4216:	d7 01       	movw	r26, r14
    4218:	c6 01       	movw	r24, r12
    421a:	29 81       	ldd	r18, Y+1	; 0x01
    421c:	3a 81       	ldd	r19, Y+2	; 0x02
    421e:	4b 81       	ldd	r20, Y+3	; 0x03
    4220:	5c 81       	ldd	r21, Y+4	; 0x04
    4222:	82 1b       	sub	r24, r18
    4224:	93 0b       	sbc	r25, r19
    4226:	a4 0b       	sbc	r26, r20
    4228:	b5 0b       	sbc	r27, r21
    422a:	80 93 11 24 	sts	0x2411, r24
    422e:	90 93 12 24 	sts	0x2412, r25
    4232:	a0 93 13 24 	sts	0x2413, r26
    4236:	b0 93 14 24 	sts	0x2414, r27
	sei(); //Reactivate interrupts
    423a:	78 94       	sei
	u = u_past - Kp*(e-e_past) + KpKiT*e;
    423c:	40 90 11 24 	lds	r4, 0x2411
    4240:	50 90 12 24 	lds	r5, 0x2412
    4244:	60 90 13 24 	lds	r6, 0x2413
    4248:	70 90 14 24 	lds	r7, 0x2414
    424c:	80 91 09 24 	lds	r24, 0x2409
    4250:	90 91 0a 24 	lds	r25, 0x240A
    4254:	a0 91 0b 24 	lds	r26, 0x240B
    4258:	b0 91 0c 24 	lds	r27, 0x240C
    425c:	a3 01       	movw	r20, r6
    425e:	92 01       	movw	r18, r4
    4260:	28 1b       	sub	r18, r24
    4262:	39 0b       	sbc	r19, r25
    4264:	4a 0b       	sbc	r20, r26
    4266:	5b 0b       	sbc	r21, r27
    4268:	ca 01       	movw	r24, r20
    426a:	b9 01       	movw	r22, r18
    426c:	56 d4       	rcall	.+2220   	; 0x4b1a <__floatsisf>
    426e:	2c ea       	ldi	r18, 0xAC	; 172
    4270:	35 ec       	ldi	r19, 0xC5	; 197
    4272:	47 e2       	ldi	r20, 0x27	; 39
    4274:	58 e3       	ldi	r21, 0x38	; 56
    4276:	53 d5       	rcall	.+2726   	; 0x4d1e <__mulsf3>
    4278:	9b 01       	movw	r18, r22
    427a:	ac 01       	movw	r20, r24
    427c:	60 91 0d 24 	lds	r22, 0x240D
    4280:	70 91 0e 24 	lds	r23, 0x240E
    4284:	80 91 0f 24 	lds	r24, 0x240F
    4288:	90 91 10 24 	lds	r25, 0x2410
    428c:	08 d3       	rcall	.+1552   	; 0x489e <__subsf3>
    428e:	4b 01       	movw	r8, r22
    4290:	5c 01       	movw	r10, r24
    4292:	c3 01       	movw	r24, r6
    4294:	b2 01       	movw	r22, r4
    4296:	41 d4       	rcall	.+2178   	; 0x4b1a <__floatsisf>
    4298:	22 e5       	ldi	r18, 0x52	; 82
    429a:	39 e4       	ldi	r19, 0x49	; 73
    429c:	4d e1       	ldi	r20, 0x1D	; 29
    429e:	5b e3       	ldi	r21, 0x3B	; 59
    42a0:	3e d5       	rcall	.+2684   	; 0x4d1e <__mulsf3>
    42a2:	9b 01       	movw	r18, r22
    42a4:	ac 01       	movw	r20, r24
    42a6:	c5 01       	movw	r24, r10
    42a8:	b4 01       	movw	r22, r8
    42aa:	fa d2       	rcall	.+1524   	; 0x48a0 <__addsf3>
    42ac:	4b 01       	movw	r8, r22
    42ae:	5c 01       	movw	r10, r24
    42b0:	60 93 05 24 	sts	0x2405, r22
    42b4:	70 93 06 24 	sts	0x2406, r23
    42b8:	80 93 07 24 	sts	0x2407, r24
    42bc:	90 93 08 24 	sts	0x2408, r25
	e_i += e;
    42c0:	80 91 01 24 	lds	r24, 0x2401
    42c4:	90 91 02 24 	lds	r25, 0x2402
    42c8:	a0 91 03 24 	lds	r26, 0x2403
    42cc:	b0 91 04 24 	lds	r27, 0x2404
    42d0:	84 0d       	add	r24, r4
    42d2:	95 1d       	adc	r25, r5
    42d4:	a6 1d       	adc	r26, r6
    42d6:	b7 1d       	adc	r27, r7
    42d8:	80 93 01 24 	sts	0x2401, r24
    42dc:	90 93 02 24 	sts	0x2402, r25
    42e0:	a0 93 03 24 	sts	0x2403, r26
    42e4:	b0 93 04 24 	sts	0x2404, r27
	
	u_motor = (int)u;
    42e8:	c5 01       	movw	r24, r10
    42ea:	b4 01       	movw	r22, r8
    42ec:	e3 d3       	rcall	.+1990   	; 0x4ab4 <__fixsfsi>
    42ee:	60 93 ff 23 	sts	0x23FF, r22
    42f2:	70 93 00 24 	sts	0x2400, r23
	
	if(u>99)
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	46 ec       	ldi	r20, 0xC6	; 198
    42fc:	52 e4       	ldi	r21, 0x42	; 66
    42fe:	c5 01       	movw	r24, r10
    4300:	b4 01       	movw	r22, r8
    4302:	09 d5       	rcall	.+2578   	; 0x4d16 <__gesf2>
    4304:	18 16       	cp	r1, r24
    4306:	6c f4       	brge	.+26     	; 0x4322 <pid_control_right+0x180>
	{
		u=99;
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	a6 ec       	ldi	r26, 0xC6	; 198
    430e:	b2 e4       	ldi	r27, 0x42	; 66
    4310:	80 93 05 24 	sts	0x2405, r24
    4314:	90 93 06 24 	sts	0x2406, r25
    4318:	a0 93 07 24 	sts	0x2407, r26
    431c:	b0 93 08 24 	sts	0x2408, r27
    4320:	10 c0       	rjmp	.+32     	; 0x4342 <pid_control_right+0x1a0>
	}
	else if(u < 0)
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	a9 01       	movw	r20, r18
    4328:	c5 01       	movw	r24, r10
    432a:	b4 01       	movw	r22, r8
    432c:	1d d3       	rcall	.+1594   	; 0x4968 <__cmpsf2>
    432e:	88 23       	and	r24, r24
    4330:	44 f4       	brge	.+16     	; 0x4342 <pid_control_right+0x1a0>
	{
		u=0;
    4332:	10 92 05 24 	sts	0x2405, r1
    4336:	10 92 06 24 	sts	0x2406, r1
    433a:	10 92 07 24 	sts	0x2407, r1
    433e:	10 92 08 24 	sts	0x2408, r1
	}
	
	//Update comunication variables
	cli(); //deactivate interruptions to avoid problem with the I2C function
    4342:	f8 94       	cli
	sens_l = sens;
    4344:	49 81       	ldd	r20, Y+1	; 0x01
    4346:	5a 81       	ldd	r21, Y+2	; 0x02
    4348:	40 93 19 24 	sts	0x2419, r20
    434c:	50 93 1a 24 	sts	0x241A, r21
	pwm_l = u_motor;
    4350:	80 91 ff 23 	lds	r24, 0x23FF
    4354:	80 93 1e 24 	sts	0x241E, r24
	sei(); //Reactivate interruptions
    4358:	78 94       	sei
	
	if (ref == 0)
    435a:	cd 28       	or	r12, r13
    435c:	ce 28       	or	r12, r14
    435e:	cf 28       	or	r12, r15
    4360:	21 f4       	brne	.+8      	; 0x436a <pid_control_right+0x1c8>
	{
		motor1(0);
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	37 db       	rcall	.-2450   	; 0x39d6 <motor1>
    4368:	05 c0       	rjmp	.+10     	; 0x4374 <pid_control_right+0x1d2>
	}
	else
	{
		motor1(u_motor);
    436a:	80 91 ff 23 	lds	r24, 0x23FF
    436e:	90 91 00 24 	lds	r25, 0x2400
    4372:	31 db       	rcall	.-2462   	; 0x39d6 <motor1>
	}
	u_past=u;
    4374:	80 91 05 24 	lds	r24, 0x2405
    4378:	90 91 06 24 	lds	r25, 0x2406
    437c:	a0 91 07 24 	lds	r26, 0x2407
    4380:	b0 91 08 24 	lds	r27, 0x2408
    4384:	80 93 0d 24 	sts	0x240D, r24
    4388:	90 93 0e 24 	sts	0x240E, r25
    438c:	a0 93 0f 24 	sts	0x240F, r26
    4390:	b0 93 10 24 	sts	0x2410, r27
	e_past = e;
    4394:	80 91 11 24 	lds	r24, 0x2411
    4398:	90 91 12 24 	lds	r25, 0x2412
    439c:	a0 91 13 24 	lds	r26, 0x2413
    43a0:	b0 91 14 24 	lds	r27, 0x2414
    43a4:	80 93 09 24 	sts	0x2409, r24
    43a8:	90 93 0a 24 	sts	0x240A, r25
    43ac:	a0 93 0b 24 	sts	0x240B, r26
    43b0:	b0 93 0c 24 	sts	0x240C, r27
}
    43b4:	24 96       	adiw	r28, 0x04	; 4
    43b6:	cd bf       	out	0x3d, r28	; 61
    43b8:	de bf       	out	0x3e, r29	; 62
    43ba:	df 91       	pop	r29
    43bc:	cf 91       	pop	r28
    43be:	ff 90       	pop	r15
    43c0:	ef 90       	pop	r14
    43c2:	df 90       	pop	r13
    43c4:	cf 90       	pop	r12
    43c6:	bf 90       	pop	r11
    43c8:	af 90       	pop	r10
    43ca:	9f 90       	pop	r9
    43cc:	8f 90       	pop	r8
    43ce:	7f 90       	pop	r7
    43d0:	6f 90       	pop	r6
    43d2:	5f 90       	pop	r5
    43d4:	4f 90       	pop	r4
    43d6:	08 95       	ret

000043d8 <pid_control_left>:

void pid_control_left(uint32_t ref, uint32_t sens)
{
    43d8:	4f 92       	push	r4
    43da:	5f 92       	push	r5
    43dc:	6f 92       	push	r6
    43de:	7f 92       	push	r7
    43e0:	8f 92       	push	r8
    43e2:	9f 92       	push	r9
    43e4:	af 92       	push	r10
    43e6:	bf 92       	push	r11
    43e8:	cf 92       	push	r12
    43ea:	df 92       	push	r13
    43ec:	ef 92       	push	r14
    43ee:	ff 92       	push	r15
    43f0:	cf 93       	push	r28
    43f2:	df 93       	push	r29
    43f4:	00 d0       	rcall	.+0      	; 0x43f6 <pid_control_left+0x1e>
    43f6:	00 d0       	rcall	.+0      	; 0x43f8 <pid_control_left+0x20>
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	6b 01       	movw	r12, r22
    43fe:	7c 01       	movw	r14, r24
    4400:	29 83       	std	Y+1, r18	; 0x01
    4402:	3a 83       	std	Y+2, r19	; 0x02
    4404:	4b 83       	std	Y+3, r20	; 0x03
    4406:	5c 83       	std	Y+4, r21	; 0x04
	
	static double Kp=0.00004;//0.01054;
	static double Ki=0.0072;//19.62;
	static double KpKiT = 0.0024;//0.0022;//
	
	cli(); //Deactivate interrupts to avoid problems with the i2c communications
    4408:	f8 94       	cli
	if (ref>1428)
    440a:	65 39       	cpi	r22, 0x95	; 149
    440c:	25 e0       	ldi	r18, 0x05	; 5
    440e:	72 07       	cpc	r23, r18
    4410:	81 05       	cpc	r24, r1
    4412:	91 05       	cpc	r25, r1
    4414:	58 f4       	brcc	.+22     	; 0x442c <pid_control_left+0x54>
	{
		ref = 1428;
	}
	else if (ref < 1)
    4416:	61 15       	cp	r22, r1
    4418:	71 05       	cpc	r23, r1
    441a:	81 05       	cpc	r24, r1
    441c:	91 05       	cpc	r25, r1
    441e:	b1 f0       	breq	.+44     	; 0x444c <pid_control_left+0x74>
	{
		ref=0;
	}
	else if (ref < 150)
    4420:	66 39       	cpi	r22, 0x96	; 150
    4422:	71 05       	cpc	r23, r1
    4424:	81 05       	cpc	r24, r1
    4426:	91 05       	cpc	r25, r1
    4428:	50 f0       	brcs	.+20     	; 0x443e <pid_control_left+0x66>
    442a:	10 c0       	rjmp	.+32     	; 0x444c <pid_control_left+0x74>
	static double KpKiT = 0.0024;//0.0022;//
	
	cli(); //Deactivate interrupts to avoid problems with the i2c communications
	if (ref>1428)
	{
		ref = 1428;
    442c:	0f 2e       	mov	r0, r31
    442e:	f4 e9       	ldi	r31, 0x94	; 148
    4430:	cf 2e       	mov	r12, r31
    4432:	f5 e0       	ldi	r31, 0x05	; 5
    4434:	df 2e       	mov	r13, r31
    4436:	e1 2c       	mov	r14, r1
    4438:	f1 2c       	mov	r15, r1
    443a:	f0 2d       	mov	r31, r0
    443c:	07 c0       	rjmp	.+14     	; 0x444c <pid_control_left+0x74>
	{
		ref=0;
	}
	else if (ref < 150)
	{
		ref = 150;
    443e:	0f 2e       	mov	r0, r31
    4440:	f6 e9       	ldi	r31, 0x96	; 150
    4442:	cf 2e       	mov	r12, r31
    4444:	d1 2c       	mov	r13, r1
    4446:	e1 2c       	mov	r14, r1
    4448:	f1 2c       	mov	r15, r1
    444a:	f0 2d       	mov	r31, r0
	}
	e = ref - sens;
    444c:	d7 01       	movw	r26, r14
    444e:	c6 01       	movw	r24, r12
    4450:	29 81       	ldd	r18, Y+1	; 0x01
    4452:	3a 81       	ldd	r19, Y+2	; 0x02
    4454:	4b 81       	ldd	r20, Y+3	; 0x03
    4456:	5c 81       	ldd	r21, Y+4	; 0x04
    4458:	82 1b       	sub	r24, r18
    445a:	93 0b       	sbc	r25, r19
    445c:	a4 0b       	sbc	r26, r20
    445e:	b5 0b       	sbc	r27, r21
    4460:	80 93 fb 23 	sts	0x23FB, r24
    4464:	90 93 fc 23 	sts	0x23FC, r25
    4468:	a0 93 fd 23 	sts	0x23FD, r26
    446c:	b0 93 fe 23 	sts	0x23FE, r27
	sei(); //Reactivate interrupts
    4470:	78 94       	sei
	u = u_past - Kp*(e-e_past) + KpKiT*e;
    4472:	40 90 fb 23 	lds	r4, 0x23FB
    4476:	50 90 fc 23 	lds	r5, 0x23FC
    447a:	60 90 fd 23 	lds	r6, 0x23FD
    447e:	70 90 fe 23 	lds	r7, 0x23FE
    4482:	80 91 f3 23 	lds	r24, 0x23F3
    4486:	90 91 f4 23 	lds	r25, 0x23F4
    448a:	a0 91 f5 23 	lds	r26, 0x23F5
    448e:	b0 91 f6 23 	lds	r27, 0x23F6
    4492:	a3 01       	movw	r20, r6
    4494:	92 01       	movw	r18, r4
    4496:	28 1b       	sub	r18, r24
    4498:	39 0b       	sbc	r19, r25
    449a:	4a 0b       	sbc	r20, r26
    449c:	5b 0b       	sbc	r21, r27
    449e:	ca 01       	movw	r24, r20
    44a0:	b9 01       	movw	r22, r18
    44a2:	3b d3       	rcall	.+1654   	; 0x4b1a <__floatsisf>
    44a4:	2c ea       	ldi	r18, 0xAC	; 172
    44a6:	35 ec       	ldi	r19, 0xC5	; 197
    44a8:	47 e2       	ldi	r20, 0x27	; 39
    44aa:	58 e3       	ldi	r21, 0x38	; 56
    44ac:	38 d4       	rcall	.+2160   	; 0x4d1e <__mulsf3>
    44ae:	9b 01       	movw	r18, r22
    44b0:	ac 01       	movw	r20, r24
    44b2:	60 91 f7 23 	lds	r22, 0x23F7
    44b6:	70 91 f8 23 	lds	r23, 0x23F8
    44ba:	80 91 f9 23 	lds	r24, 0x23F9
    44be:	90 91 fa 23 	lds	r25, 0x23FA
    44c2:	ed d1       	rcall	.+986    	; 0x489e <__subsf3>
    44c4:	4b 01       	movw	r8, r22
    44c6:	5c 01       	movw	r10, r24
    44c8:	c3 01       	movw	r24, r6
    44ca:	b2 01       	movw	r22, r4
    44cc:	26 d3       	rcall	.+1612   	; 0x4b1a <__floatsisf>
    44ce:	22 e5       	ldi	r18, 0x52	; 82
    44d0:	39 e4       	ldi	r19, 0x49	; 73
    44d2:	4d e1       	ldi	r20, 0x1D	; 29
    44d4:	5b e3       	ldi	r21, 0x3B	; 59
    44d6:	23 d4       	rcall	.+2118   	; 0x4d1e <__mulsf3>
    44d8:	9b 01       	movw	r18, r22
    44da:	ac 01       	movw	r20, r24
    44dc:	c5 01       	movw	r24, r10
    44de:	b4 01       	movw	r22, r8
    44e0:	df d1       	rcall	.+958    	; 0x48a0 <__addsf3>
    44e2:	4b 01       	movw	r8, r22
    44e4:	5c 01       	movw	r10, r24
    44e6:	60 93 ef 23 	sts	0x23EF, r22
    44ea:	70 93 f0 23 	sts	0x23F0, r23
    44ee:	80 93 f1 23 	sts	0x23F1, r24
    44f2:	90 93 f2 23 	sts	0x23F2, r25
	e_i += e;
    44f6:	80 91 eb 23 	lds	r24, 0x23EB
    44fa:	90 91 ec 23 	lds	r25, 0x23EC
    44fe:	a0 91 ed 23 	lds	r26, 0x23ED
    4502:	b0 91 ee 23 	lds	r27, 0x23EE
    4506:	84 0d       	add	r24, r4
    4508:	95 1d       	adc	r25, r5
    450a:	a6 1d       	adc	r26, r6
    450c:	b7 1d       	adc	r27, r7
    450e:	80 93 eb 23 	sts	0x23EB, r24
    4512:	90 93 ec 23 	sts	0x23EC, r25
    4516:	a0 93 ed 23 	sts	0x23ED, r26
    451a:	b0 93 ee 23 	sts	0x23EE, r27
		
	u_motor = (int)u;
    451e:	c5 01       	movw	r24, r10
    4520:	b4 01       	movw	r22, r8
    4522:	c8 d2       	rcall	.+1424   	; 0x4ab4 <__fixsfsi>
    4524:	60 93 e9 23 	sts	0x23E9, r22
    4528:	70 93 ea 23 	sts	0x23EA, r23
		
	if(u>99)
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	46 ec       	ldi	r20, 0xC6	; 198
    4532:	52 e4       	ldi	r21, 0x42	; 66
    4534:	c5 01       	movw	r24, r10
    4536:	b4 01       	movw	r22, r8
    4538:	ee d3       	rcall	.+2012   	; 0x4d16 <__gesf2>
    453a:	18 16       	cp	r1, r24
    453c:	6c f4       	brge	.+26     	; 0x4558 <pid_control_left+0x180>
	{
		u=99;
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	a6 ec       	ldi	r26, 0xC6	; 198
    4544:	b2 e4       	ldi	r27, 0x42	; 66
    4546:	80 93 ef 23 	sts	0x23EF, r24
    454a:	90 93 f0 23 	sts	0x23F0, r25
    454e:	a0 93 f1 23 	sts	0x23F1, r26
    4552:	b0 93 f2 23 	sts	0x23F2, r27
    4556:	10 c0       	rjmp	.+32     	; 0x4578 <pid_control_left+0x1a0>
	}
	else if(u < 0)
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	a9 01       	movw	r20, r18
    455e:	c5 01       	movw	r24, r10
    4560:	b4 01       	movw	r22, r8
    4562:	02 d2       	rcall	.+1028   	; 0x4968 <__cmpsf2>
    4564:	88 23       	and	r24, r24
    4566:	44 f4       	brge	.+16     	; 0x4578 <pid_control_left+0x1a0>
	{
		u=0;
    4568:	10 92 ef 23 	sts	0x23EF, r1
    456c:	10 92 f0 23 	sts	0x23F0, r1
    4570:	10 92 f1 23 	sts	0x23F1, r1
    4574:	10 92 f2 23 	sts	0x23F2, r1
	}
		
	//Update comunication variables
	cli(); //deactivate interruptions to avoid problem with the I2C function
    4578:	f8 94       	cli
	sens_l = sens;
    457a:	49 81       	ldd	r20, Y+1	; 0x01
    457c:	5a 81       	ldd	r21, Y+2	; 0x02
    457e:	40 93 19 24 	sts	0x2419, r20
    4582:	50 93 1a 24 	sts	0x241A, r21
	pwm_l = u_motor;
    4586:	80 91 e9 23 	lds	r24, 0x23E9
    458a:	80 93 1e 24 	sts	0x241E, r24
	i_comm++;
    458e:	80 91 1f 24 	lds	r24, 0x241F
    4592:	90 91 20 24 	lds	r25, 0x2420
    4596:	01 96       	adiw	r24, 0x01	; 1
	if (i_comm>65500)
    4598:	8d 3d       	cpi	r24, 0xDD	; 221
    459a:	5f ef       	ldi	r21, 0xFF	; 255
    459c:	95 07       	cpc	r25, r21
    459e:	28 f4       	brcc	.+10     	; 0x45aa <pid_control_left+0x1d2>
		
	//Update comunication variables
	cli(); //deactivate interruptions to avoid problem with the I2C function
	sens_l = sens;
	pwm_l = u_motor;
	i_comm++;
    45a0:	80 93 1f 24 	sts	0x241F, r24
    45a4:	90 93 20 24 	sts	0x2420, r25
    45a8:	04 c0       	rjmp	.+8      	; 0x45b2 <pid_control_left+0x1da>
	if (i_comm>65500)
	{
		i_comm=0;
    45aa:	10 92 1f 24 	sts	0x241F, r1
    45ae:	10 92 20 24 	sts	0x2420, r1
	}
	sei(); //Reactivate interruptions
    45b2:	78 94       	sei
		
	if (ref == 0)
    45b4:	cd 28       	or	r12, r13
    45b6:	ce 28       	or	r12, r14
    45b8:	cf 28       	or	r12, r15
    45ba:	21 f4       	brne	.+8      	; 0x45c4 <pid_control_left+0x1ec>
	{
		motor2(0);
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	30 da       	rcall	.-2976   	; 0x3a22 <motor2>
    45c2:	05 c0       	rjmp	.+10     	; 0x45ce <pid_control_left+0x1f6>
	}
	else
	{
		motor2(u_motor);
    45c4:	80 91 e9 23 	lds	r24, 0x23E9
    45c8:	90 91 ea 23 	lds	r25, 0x23EA
    45cc:	2a da       	rcall	.-2988   	; 0x3a22 <motor2>
	}
	u_past=u;
    45ce:	80 91 ef 23 	lds	r24, 0x23EF
    45d2:	90 91 f0 23 	lds	r25, 0x23F0
    45d6:	a0 91 f1 23 	lds	r26, 0x23F1
    45da:	b0 91 f2 23 	lds	r27, 0x23F2
    45de:	80 93 f7 23 	sts	0x23F7, r24
    45e2:	90 93 f8 23 	sts	0x23F8, r25
    45e6:	a0 93 f9 23 	sts	0x23F9, r26
    45ea:	b0 93 fa 23 	sts	0x23FA, r27
	e_past = e;
    45ee:	80 91 fb 23 	lds	r24, 0x23FB
    45f2:	90 91 fc 23 	lds	r25, 0x23FC
    45f6:	a0 91 fd 23 	lds	r26, 0x23FD
    45fa:	b0 91 fe 23 	lds	r27, 0x23FE
    45fe:	80 93 f3 23 	sts	0x23F3, r24
    4602:	90 93 f4 23 	sts	0x23F4, r25
    4606:	a0 93 f5 23 	sts	0x23F5, r26
    460a:	b0 93 f6 23 	sts	0x23F6, r27
}
    460e:	24 96       	adiw	r28, 0x04	; 4
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	de bf       	out	0x3e, r29	; 62
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	ff 90       	pop	r15
    461a:	ef 90       	pop	r14
    461c:	df 90       	pop	r13
    461e:	cf 90       	pop	r12
    4620:	bf 90       	pop	r11
    4622:	af 90       	pop	r10
    4624:	9f 90       	pop	r9
    4626:	8f 90       	pop	r8
    4628:	7f 90       	pop	r7
    462a:	6f 90       	pop	r6
    462c:	5f 90       	pop	r5
    462e:	4f 90       	pop	r4
    4630:	08 95       	ret

00004632 <__vector_45>:
		break;
	}
	led1(TOGGLE);
}

ISR(TWIE_TWIS_vect) {
    4632:	1f 92       	push	r1
    4634:	0f 92       	push	r0
    4636:	0f b6       	in	r0, 0x3f	; 63
    4638:	0f 92       	push	r0
    463a:	11 24       	eor	r1, r1
    463c:	2f 93       	push	r18
    463e:	3f 93       	push	r19
    4640:	4f 93       	push	r20
    4642:	5f 93       	push	r21
    4644:	6f 93       	push	r22
    4646:	7f 93       	push	r23
    4648:	8f 93       	push	r24
    464a:	9f 93       	push	r25
    464c:	af 93       	push	r26
    464e:	bf 93       	push	r27
    4650:	ef 93       	push	r30
    4652:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&slave);
    4654:	89 e4       	ldi	r24, 0x49	; 73
    4656:	97 e2       	ldi	r25, 0x27	; 39
    4658:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <TWI_SlaveInterruptHandler>
}
    465c:	ff 91       	pop	r31
    465e:	ef 91       	pop	r30
    4660:	bf 91       	pop	r27
    4662:	af 91       	pop	r26
    4664:	9f 91       	pop	r25
    4666:	8f 91       	pop	r24
    4668:	7f 91       	pop	r23
    466a:	6f 91       	pop	r22
    466c:	5f 91       	pop	r21
    466e:	4f 91       	pop	r20
    4670:	3f 91       	pop	r19
    4672:	2f 91       	pop	r18
    4674:	0f 90       	pop	r0
    4676:	0f be       	out	0x3f, r0	; 63
    4678:	0f 90       	pop	r0
    467a:	1f 90       	pop	r1
    467c:	18 95       	reti

0000467e <i2c_configuration>:

void i2c_configuration()
{
	uint8_t i;
	irq_initialize_vectors();
    467e:	87 e0       	ldi	r24, 0x07	; 7
    4680:	e0 ea       	ldi	r30, 0xA0	; 160
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	82 83       	std	Z+2, r24	; 0x02
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    4686:	60 e4       	ldi	r22, 0x40	; 64
    4688:	85 e0       	ldi	r24, 0x05	; 5
    468a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&TWI_SLAVE);
	TWI_SlaveInitializeDriver(&slave, &TWI_SLAVE, *slave_process);
    468e:	45 e1       	ldi	r20, 0x15	; 21
    4690:	50 e2       	ldi	r21, 0x20	; 32
    4692:	60 ea       	ldi	r22, 0xA0	; 160
    4694:	74 e0       	ldi	r23, 0x04	; 4
    4696:	89 e4       	ldi	r24, 0x49	; 73
    4698:	97 e2       	ldi	r25, 0x27	; 39
    469a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&slave, TWI_SLAVE_ADDR, TWI_SLAVE_INTLVL_MED_gc);
    469e:	40 e8       	ldi	r20, 0x80	; 128
    46a0:	60 e6       	ldi	r22, 0x60	; 96
    46a2:	89 e4       	ldi	r24, 0x49	; 73
    46a4:	97 e2       	ldi	r25, 0x27	; 39
    46a6:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <TWI_SlaveInitializeModule>
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i < TWIS_SEND_BUFFER_SIZE; i++) {
		slave.receivedData[i] = 0;
    46ae:	fc 01       	movw	r30, r24
    46b0:	e7 5b       	subi	r30, 0xB7	; 183
    46b2:	f8 4d       	sbci	r31, 0xD8	; 216
    46b4:	14 82       	std	Z+4, r1	; 0x04
    46b6:	01 96       	adiw	r24, 0x01	; 1
	uint8_t i;
	irq_initialize_vectors();
	sysclk_enable_peripheral_clock(&TWI_SLAVE);
	TWI_SlaveInitializeDriver(&slave, &TWI_SLAVE, *slave_process);
	TWI_SlaveInitializeModule(&slave, TWI_SLAVE_ADDR, TWI_SLAVE_INTLVL_MED_gc);
	for (i = 0; i < TWIS_SEND_BUFFER_SIZE; i++) {
    46b8:	88 30       	cpi	r24, 0x08	; 8
    46ba:	91 05       	cpc	r25, r1
    46bc:	c1 f7       	brne	.-16     	; 0x46ae <i2c_configuration+0x30>
		slave.receivedData[i] = 0;
	}
	cpu_irq_enable();
    46be:	78 94       	sei
    46c0:	08 95       	ret

000046c2 <main>:
}



int main (void)
{
    46c2:	cf 93       	push	r28
    46c4:	df 93       	push	r29
    46c6:	cd b7       	in	r28, 0x3d	; 61
    46c8:	de b7       	in	r29, 0x3e	; 62
    46ca:	28 97       	sbiw	r28, 0x08	; 8
    46cc:	cd bf       	out	0x3d, r28	; 61
    46ce:	de bf       	out	0x3e, r29	; 62
	init_OctoPlus();
    46d0:	ce d9       	rcall	.-3172   	; 0x3a6e <init_OctoPlus>
	animation();
    46d2:	3e da       	rcall	.-2948   	; 0x3b50 <animation>
	init_M1(PA4,PA5, PWM_PC0);
    46d4:	41 e0       	ldi	r20, 0x01	; 1
    46d6:	50 e0       	ldi	r21, 0x00	; 0
    46d8:	65 e0       	ldi	r22, 0x05	; 5
    46da:	84 e0       	ldi	r24, 0x04	; 4
    46dc:	3c d9       	rcall	.-3464   	; 0x3956 <init_M1>
	init_M2(PA6,PA7, PWM_PC1);
    46de:	42 e0       	ldi	r20, 0x02	; 2
    46e0:	50 e0       	ldi	r21, 0x00	; 0
    46e2:	67 e0       	ldi	r22, 0x07	; 7
    46e4:	86 e0       	ldi	r24, 0x06	; 6
    46e6:	57 d9       	rcall	.-3410   	; 0x3996 <init_M2>
    46e8:	00 e4       	ldi	r16, 0x40	; 64
    46ea:	16 e0       	ldi	r17, 0x06	; 6
    46ec:	80 e4       	ldi	r24, 0x40	; 64
    46ee:	f8 01       	movw	r30, r16
    46f0:	82 83       	std	Z+2, r24	; 0x02
    46f2:	80 e8       	ldi	r24, 0x80	; 128
    46f4:	82 83       	std	Z+2, r24	; 0x02
	
	//Encoder line of Motor 1
	ioport_set_pin_dir(PC6,IOPORT_DIR_INPUT);
	ioport_set_pin_dir(PC7,IOPORT_DIR_INPUT);
	ioport_set_pin_mode(PC6,IOPORT_MODE_PULLUP);
    46f6:	68 e1       	ldi	r22, 0x18	; 24
    46f8:	86 e1       	ldi	r24, 0x16	; 22
    46fa:	80 dc       	rcall	.-1792   	; 0x3ffc <ioport_set_pin_mode>
	ioport_set_pin_mode(PC7,IOPORT_MODE_PULLUP);
    46fc:	68 e1       	ldi	r22, 0x18	; 24
    46fe:	87 e1       	ldi	r24, 0x17	; 23
    4700:	7d dc       	rcall	.-1798   	; 0x3ffc <ioport_set_pin_mode>
    4702:	80 e1       	ldi	r24, 0x10	; 16
    4704:	f8 01       	movw	r30, r16
    4706:	82 83       	std	Z+2, r24	; 0x02
    4708:	80 e2       	ldi	r24, 0x20	; 32
    470a:	82 83       	std	Z+2, r24	; 0x02
	
	//Encoder line of Motor 2
	ioport_set_pin_dir(PC4,IOPORT_DIR_INPUT);
	ioport_set_pin_dir(PC5,IOPORT_DIR_INPUT);
	ioport_set_pin_mode(PC4,IOPORT_MODE_PULLUP);
    470c:	68 e1       	ldi	r22, 0x18	; 24
    470e:	84 e1       	ldi	r24, 0x14	; 20
    4710:	75 dc       	rcall	.-1814   	; 0x3ffc <ioport_set_pin_mode>
	ioport_set_pin_mode(PC5,IOPORT_MODE_PULLUP);
    4712:	68 e1       	ldi	r22, 0x18	; 24
    4714:	85 e1       	ldi	r24, 0x15	; 21
    4716:	72 dc       	rcall	.-1820   	; 0x3ffc <ioport_set_pin_mode>

	//I2C configuration with communication with the Raspberry pi
	i2c_configuration();
    4718:	b2 df       	rcall	.-156    	; 0x467e <i2c_configuration>
	
	//-------Timer Setup-------
	tc_enable(&TCC1); // enable the clock to the TCC0
    471a:	80 e4       	ldi	r24, 0x40	; 64
    471c:	98 e0       	ldi	r25, 0x08	; 8
    471e:	0e 94 24 0c 	call	0x1848	; 0x1848 <tc_enable>
	TCC1_PER=0xFFFF; //Set up the period to achieve the 100ms tick
    4722:	8f ef       	ldi	r24, 0xFF	; 255
    4724:	9f ef       	ldi	r25, 0xFF	; 255
    4726:	80 93 66 08 	sts	0x0866, r24
    472a:	90 93 67 08 	sts	0x0867, r25
	TCC1_CTRLA=TC_CLKSEL_DIV1024_gc; //Setup the preescaler.
    472e:	87 e0       	ldi	r24, 0x07	; 7
    4730:	80 93 40 08 	sts	0x0840, r24
	uint16_t sensCurrent_right=0;
	uint16_t sensCurrent_left=0;
	uint16_t tick_time=0;
	uint8_t encoder_state_right = 0;
	uint8_t encoder_state_left = 0;
	TCC1_CNT = 0;
    4734:	00 e6       	ldi	r16, 0x60	; 96
    4736:	18 e0       	ldi	r17, 0x08	; 8
    4738:	f8 01       	movw	r30, r16
    473a:	10 82       	st	Z, r1
    473c:	11 82       	std	Z+1, r1	; 0x01
	
	motor1(0);
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	49 d9       	rcall	.-3438   	; 0x39d6 <motor1>
	motor2(0);
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	6c d9       	rcall	.-3368   	; 0x3a22 <motor2>
	
	past_counter = TCC1_CNT;
    474a:	f8 01       	movw	r30, r16
    474c:	e0 80       	ld	r14, Z
    474e:	f1 80       	ldd	r15, Z+1	; 0x01
	uint16_t sens_left = 0;
	uint16_t sensCurrent_right=0;
	uint16_t sensCurrent_left=0;
	uint16_t tick_time=0;
	uint8_t encoder_state_right = 0;
	uint8_t encoder_state_left = 0;
    4750:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t sens_right = 0;
	uint16_t sens_left = 0;
	uint16_t sensCurrent_right=0;
	uint16_t sensCurrent_left=0;
	uint16_t tick_time=0;
	uint8_t encoder_state_right = 0;
    4752:	19 82       	std	Y+1, r1	; 0x01
	uint16_t past_counter = 0;
	uint16_t sens_right = 0;
	uint16_t sens_left = 0;
	uint16_t sensCurrent_right=0;
	uint16_t sensCurrent_left=0;
	uint16_t tick_time=0;
    4754:	00 e0       	ldi	r16, 0x00	; 0
    4756:	10 e0       	ldi	r17, 0x00	; 0
	
	uint16_t past_counter = 0;
	uint16_t sens_right = 0;
	uint16_t sens_left = 0;
	uint16_t sensCurrent_right=0;
	uint16_t sensCurrent_left=0;
    4758:	41 2c       	mov	r4, r1
    475a:	51 2c       	mov	r5, r1
	
	
	uint16_t past_counter = 0;
	uint16_t sens_right = 0;
	uint16_t sens_left = 0;
	uint16_t sensCurrent_right=0;
    475c:	61 2c       	mov	r6, r1
    475e:	71 2c       	mov	r7, r1
    
	
	
	uint16_t past_counter = 0;
	uint16_t sens_right = 0;
	uint16_t sens_left = 0;
    4760:	1d 82       	std	Y+5, r1	; 0x05
    4762:	1e 82       	std	Y+6, r1	; 0x06
	TCC1_CTRLA=TC_CLKSEL_DIV1024_gc; //Setup the preescaler.
    
	
	
	uint16_t past_counter = 0;
	uint16_t sens_right = 0;
    4764:	1b 82       	std	Y+3, r1	; 0x03
    4766:	1c 82       	std	Y+4, r1	; 0x04
			pid_control_right(ref_r,sens_right);
			pid_control_left(ref_l,sens_left);
			tick_time = 0;
		}
		
		if (past_counter != TCC1_CNT)
    4768:	0f 2e       	mov	r0, r31
    476a:	f0 e6       	ldi	r31, 0x60	; 96
    476c:	2f 2e       	mov	r2, r31
    476e:	f8 e0       	ldi	r31, 0x08	; 8
    4770:	3f 2e       	mov	r3, r31
    4772:	f0 2d       	mov	r31, r0
    4774:	ef 82       	std	Y+7, r14	; 0x07
    4776:	f8 86       	std	Y+8, r15	; 0x08
    4778:	02 c0       	rjmp	.+4      	; 0x477e <main+0xbc>
				sensCurrent_left = 0;
				encoder_state_left = 0;
			}
			else if (encoder_state_left != read_pin(PC4))
			{
				encoder_state_left = 1;
    477a:	f1 e0       	ldi	r31, 0x01	; 1
    477c:	fa 83       	std	Y+2, r31	; 0x02

	while(1)
	{
		if (tick_time > 54)
		{
			pid_control_right(ref_r,sens_right);
    477e:	2b 81       	ldd	r18, Y+3	; 0x03
    4780:	3c 81       	ldd	r19, Y+4	; 0x04
    4782:	49 01       	movw	r8, r18
    4784:	a1 2c       	mov	r10, r1
    4786:	b1 2c       	mov	r11, r1
			pid_control_left(ref_l,sens_left);
    4788:	8d 81       	ldd	r24, Y+5	; 0x05
    478a:	9e 81       	ldd	r25, Y+6	; 0x06
    478c:	6c 01       	movw	r12, r24
    478e:	e1 2c       	mov	r14, r1
    4790:	f1 2c       	mov	r15, r1
	
	past_counter = TCC1_CNT;

	while(1)
	{
		if (tick_time > 54)
    4792:	07 33       	cpi	r16, 0x37	; 55
    4794:	11 05       	cpc	r17, r1
    4796:	a0 f0       	brcs	.+40     	; 0x47c0 <main+0xfe>
		{
			pid_control_right(ref_r,sens_right);
    4798:	60 91 15 24 	lds	r22, 0x2415
    479c:	70 91 16 24 	lds	r23, 0x2416
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	a5 01       	movw	r20, r10
    47a6:	94 01       	movw	r18, r8
    47a8:	fc dc       	rcall	.-1544   	; 0x41a2 <pid_control_right>
			pid_control_left(ref_l,sens_left);
    47aa:	60 91 17 24 	lds	r22, 0x2417
    47ae:	70 91 18 24 	lds	r23, 0x2418
    47b2:	80 e0       	ldi	r24, 0x00	; 0
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	a7 01       	movw	r20, r14
    47b8:	96 01       	movw	r18, r12
    47ba:	0e de       	rcall	.-996    	; 0x43d8 <pid_control_left>
			tick_time = 0;
    47bc:	00 e0       	ldi	r16, 0x00	; 0
    47be:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if (past_counter != TCC1_CNT)
    47c0:	f1 01       	movw	r30, r2
    47c2:	80 81       	ld	r24, Z
    47c4:	91 81       	ldd	r25, Z+1	; 0x01
    47c6:	2f 81       	ldd	r18, Y+7	; 0x07
    47c8:	38 85       	ldd	r19, Y+8	; 0x08
    47ca:	82 17       	cp	r24, r18
    47cc:	93 07       	cpc	r25, r19
    47ce:	09 f3       	breq	.-62     	; 0x4792 <main+0xd0>
		{
			
			tick_time++;
    47d0:	0f 5f       	subi	r16, 0xFF	; 255
    47d2:	1f 4f       	sbci	r17, 0xFF	; 255
			past_counter=TCC1_CNT;
    47d4:	80 81       	ld	r24, Z
    47d6:	91 81       	ldd	r25, Z+1	; 0x01
    47d8:	8f 83       	std	Y+7, r24	; 0x07
    47da:	98 87       	std	Y+8, r25	; 0x08
			sensCurrent_right++;
    47dc:	9f ef       	ldi	r25, 0xFF	; 255
    47de:	69 1a       	sub	r6, r25
    47e0:	79 0a       	sbc	r7, r25
			sensCurrent_left++;
    47e2:	ef ef       	ldi	r30, 0xFF	; 255
    47e4:	4e 1a       	sub	r4, r30
    47e6:	5e 0a       	sbc	r5, r30
			//Check rigth encoder
			if (encoder_state_right == 1 && read_pin(PC6)==0)
    47e8:	f9 81       	ldd	r31, Y+1	; 0x01
    47ea:	f1 30       	cpi	r31, 0x01	; 1
    47ec:	f9 f4       	brne	.+62     	; 0x482c <main+0x16a>
    47ee:	86 e1       	ldi	r24, 0x16	; 22
    47f0:	1b d8       	rcall	.-4042   	; 0x3828 <read_pin>
    47f2:	89 2b       	or	r24, r25
    47f4:	d9 f4       	brne	.+54     	; 0x482c <main+0x16a>
			{
				if (sensCurrent_right>2999)
    47f6:	28 eb       	ldi	r18, 0xB8	; 184
    47f8:	62 16       	cp	r6, r18
    47fa:	2b e0       	ldi	r18, 0x0B	; 11
    47fc:	72 06       	cpc	r7, r18
    47fe:	40 f0       	brcs	.+16     	; 0x4810 <main+0x14e>
				{
					sensCurrent_right = 3000;
    4800:	0f 2e       	mov	r0, r31
    4802:	f8 eb       	ldi	r31, 0xB8	; 184
    4804:	6f 2e       	mov	r6, r31
    4806:	f0 2d       	mov	r31, r0
    4808:	0f 2e       	mov	r0, r31
    480a:	fb e0       	ldi	r31, 0x0B	; 11
    480c:	7f 2e       	mov	r7, r31
    480e:	f0 2d       	mov	r31, r0
				}
				sens_right = 184200/sensCurrent_right;
    4810:	93 01       	movw	r18, r6
    4812:	40 e0       	ldi	r20, 0x00	; 0
    4814:	50 e0       	ldi	r21, 0x00	; 0
    4816:	68 e8       	ldi	r22, 0x88	; 136
    4818:	7f ec       	ldi	r23, 0xCF	; 207
    481a:	82 e0       	ldi	r24, 0x02	; 2
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	2b d3       	rcall	.+1622   	; 0x4e76 <__divmodsi4>
    4820:	2b 83       	std	Y+3, r18	; 0x03
    4822:	3c 83       	std	Y+4, r19	; 0x04
				sensCurrent_right = 0;
				encoder_state_right = 0;
    4824:	19 82       	std	Y+1, r1	; 0x01
				if (sensCurrent_right>2999)
				{
					sensCurrent_right = 3000;
				}
				sens_right = 184200/sensCurrent_right;
				sensCurrent_right = 0;
    4826:	61 2c       	mov	r6, r1
    4828:	71 2c       	mov	r7, r1
				encoder_state_right = 0;
    482a:	0b c0       	rjmp	.+22     	; 0x4842 <main+0x180>
			}
			else if (encoder_state_right != read_pin(PC6))
    482c:	86 e1       	ldi	r24, 0x16	; 22
    482e:	0e 94 14 1c 	call	0x3828	; 0x3828 <read_pin>
    4832:	49 81       	ldd	r20, Y+1	; 0x01
    4834:	24 2f       	mov	r18, r20
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	28 17       	cp	r18, r24
    483a:	39 07       	cpc	r19, r25
    483c:	11 f0       	breq	.+4      	; 0x4842 <main+0x180>
			{
				encoder_state_right = 1;
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	89 83       	std	Y+1, r24	; 0x01
			}

			//Now check left encoder
			if (encoder_state_left == 1 && read_pin(PC4)==0)
    4842:	9a 81       	ldd	r25, Y+2	; 0x02
    4844:	91 30       	cpi	r25, 0x01	; 1
    4846:	01 f5       	brne	.+64     	; 0x4888 <main+0x1c6>
    4848:	84 e1       	ldi	r24, 0x14	; 20
    484a:	0e 94 14 1c 	call	0x3828	; 0x3828 <read_pin>
    484e:	89 2b       	or	r24, r25
    4850:	d9 f4       	brne	.+54     	; 0x4888 <main+0x1c6>
			{
				if (sensCurrent_left>2999)
    4852:	e8 eb       	ldi	r30, 0xB8	; 184
    4854:	4e 16       	cp	r4, r30
    4856:	eb e0       	ldi	r30, 0x0B	; 11
    4858:	5e 06       	cpc	r5, r30
    485a:	40 f0       	brcs	.+16     	; 0x486c <main+0x1aa>
				{
					sensCurrent_left = 3000;
    485c:	0f 2e       	mov	r0, r31
    485e:	f8 eb       	ldi	r31, 0xB8	; 184
    4860:	4f 2e       	mov	r4, r31
    4862:	f0 2d       	mov	r31, r0
    4864:	0f 2e       	mov	r0, r31
    4866:	fb e0       	ldi	r31, 0x0B	; 11
    4868:	5f 2e       	mov	r5, r31
    486a:	f0 2d       	mov	r31, r0
				}
				sens_left = 2*184200/sensCurrent_left;
    486c:	92 01       	movw	r18, r4
    486e:	40 e0       	ldi	r20, 0x00	; 0
    4870:	50 e0       	ldi	r21, 0x00	; 0
    4872:	60 e1       	ldi	r22, 0x10	; 16
    4874:	7f e9       	ldi	r23, 0x9F	; 159
    4876:	85 e0       	ldi	r24, 0x05	; 5
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	fd d2       	rcall	.+1530   	; 0x4e76 <__divmodsi4>
    487c:	2d 83       	std	Y+5, r18	; 0x05
    487e:	3e 83       	std	Y+6, r19	; 0x06
				sensCurrent_left = 0;
				encoder_state_left = 0;
    4880:	1a 82       	std	Y+2, r1	; 0x02
				if (sensCurrent_left>2999)
				{
					sensCurrent_left = 3000;
				}
				sens_left = 2*184200/sensCurrent_left;
				sensCurrent_left = 0;
    4882:	41 2c       	mov	r4, r1
    4884:	51 2c       	mov	r5, r1
				encoder_state_left = 0;
    4886:	7b cf       	rjmp	.-266    	; 0x477e <main+0xbc>
			}
			else if (encoder_state_left != read_pin(PC4))
    4888:	84 e1       	ldi	r24, 0x14	; 20
    488a:	0e 94 14 1c 	call	0x3828	; 0x3828 <read_pin>
    488e:	fa 81       	ldd	r31, Y+2	; 0x02
    4890:	2f 2f       	mov	r18, r31
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	28 17       	cp	r18, r24
    4896:	39 07       	cpc	r19, r25
    4898:	09 f0       	breq	.+2      	; 0x489c <main+0x1da>
    489a:	6f cf       	rjmp	.-290    	; 0x477a <main+0xb8>
    489c:	70 cf       	rjmp	.-288    	; 0x477e <main+0xbc>

0000489e <__subsf3>:
    489e:	50 58       	subi	r21, 0x80	; 128

000048a0 <__addsf3>:
    48a0:	bb 27       	eor	r27, r27
    48a2:	aa 27       	eor	r26, r26
    48a4:	0e d0       	rcall	.+28     	; 0x48c2 <__addsf3x>
    48a6:	fd c1       	rjmp	.+1018   	; 0x4ca2 <__fp_round>
    48a8:	ee d1       	rcall	.+988    	; 0x4c86 <__fp_pscA>
    48aa:	30 f0       	brcs	.+12     	; 0x48b8 <__addsf3+0x18>
    48ac:	f3 d1       	rcall	.+998    	; 0x4c94 <__fp_pscB>
    48ae:	20 f0       	brcs	.+8      	; 0x48b8 <__addsf3+0x18>
    48b0:	31 f4       	brne	.+12     	; 0x48be <__addsf3+0x1e>
    48b2:	9f 3f       	cpi	r25, 0xFF	; 255
    48b4:	11 f4       	brne	.+4      	; 0x48ba <__addsf3+0x1a>
    48b6:	1e f4       	brtc	.+6      	; 0x48be <__addsf3+0x1e>
    48b8:	d3 c1       	rjmp	.+934    	; 0x4c60 <__fp_nan>
    48ba:	0e f4       	brtc	.+2      	; 0x48be <__addsf3+0x1e>
    48bc:	e0 95       	com	r30
    48be:	e7 fb       	bst	r30, 7
    48c0:	c9 c1       	rjmp	.+914    	; 0x4c54 <__fp_inf>

000048c2 <__addsf3x>:
    48c2:	e9 2f       	mov	r30, r25
    48c4:	ff d1       	rcall	.+1022   	; 0x4cc4 <__fp_split3>
    48c6:	80 f3       	brcs	.-32     	; 0x48a8 <__addsf3+0x8>
    48c8:	ba 17       	cp	r27, r26
    48ca:	62 07       	cpc	r22, r18
    48cc:	73 07       	cpc	r23, r19
    48ce:	84 07       	cpc	r24, r20
    48d0:	95 07       	cpc	r25, r21
    48d2:	18 f0       	brcs	.+6      	; 0x48da <__addsf3x+0x18>
    48d4:	71 f4       	brne	.+28     	; 0x48f2 <__addsf3x+0x30>
    48d6:	9e f5       	brtc	.+102    	; 0x493e <__addsf3x+0x7c>
    48d8:	17 c2       	rjmp	.+1070   	; 0x4d08 <__fp_zero>
    48da:	0e f4       	brtc	.+2      	; 0x48de <__addsf3x+0x1c>
    48dc:	e0 95       	com	r30
    48de:	0b 2e       	mov	r0, r27
    48e0:	ba 2f       	mov	r27, r26
    48e2:	a0 2d       	mov	r26, r0
    48e4:	0b 01       	movw	r0, r22
    48e6:	b9 01       	movw	r22, r18
    48e8:	90 01       	movw	r18, r0
    48ea:	0c 01       	movw	r0, r24
    48ec:	ca 01       	movw	r24, r20
    48ee:	a0 01       	movw	r20, r0
    48f0:	11 24       	eor	r1, r1
    48f2:	ff 27       	eor	r31, r31
    48f4:	59 1b       	sub	r21, r25
    48f6:	99 f0       	breq	.+38     	; 0x491e <__addsf3x+0x5c>
    48f8:	59 3f       	cpi	r21, 0xF9	; 249
    48fa:	50 f4       	brcc	.+20     	; 0x4910 <__addsf3x+0x4e>
    48fc:	50 3e       	cpi	r21, 0xE0	; 224
    48fe:	68 f1       	brcs	.+90     	; 0x495a <__addsf3x+0x98>
    4900:	1a 16       	cp	r1, r26
    4902:	f0 40       	sbci	r31, 0x00	; 0
    4904:	a2 2f       	mov	r26, r18
    4906:	23 2f       	mov	r18, r19
    4908:	34 2f       	mov	r19, r20
    490a:	44 27       	eor	r20, r20
    490c:	58 5f       	subi	r21, 0xF8	; 248
    490e:	f3 cf       	rjmp	.-26     	; 0x48f6 <__addsf3x+0x34>
    4910:	46 95       	lsr	r20
    4912:	37 95       	ror	r19
    4914:	27 95       	ror	r18
    4916:	a7 95       	ror	r26
    4918:	f0 40       	sbci	r31, 0x00	; 0
    491a:	53 95       	inc	r21
    491c:	c9 f7       	brne	.-14     	; 0x4910 <__addsf3x+0x4e>
    491e:	7e f4       	brtc	.+30     	; 0x493e <__addsf3x+0x7c>
    4920:	1f 16       	cp	r1, r31
    4922:	ba 0b       	sbc	r27, r26
    4924:	62 0b       	sbc	r22, r18
    4926:	73 0b       	sbc	r23, r19
    4928:	84 0b       	sbc	r24, r20
    492a:	ba f0       	brmi	.+46     	; 0x495a <__addsf3x+0x98>
    492c:	91 50       	subi	r25, 0x01	; 1
    492e:	a1 f0       	breq	.+40     	; 0x4958 <__addsf3x+0x96>
    4930:	ff 0f       	add	r31, r31
    4932:	bb 1f       	adc	r27, r27
    4934:	66 1f       	adc	r22, r22
    4936:	77 1f       	adc	r23, r23
    4938:	88 1f       	adc	r24, r24
    493a:	c2 f7       	brpl	.-16     	; 0x492c <__addsf3x+0x6a>
    493c:	0e c0       	rjmp	.+28     	; 0x495a <__addsf3x+0x98>
    493e:	ba 0f       	add	r27, r26
    4940:	62 1f       	adc	r22, r18
    4942:	73 1f       	adc	r23, r19
    4944:	84 1f       	adc	r24, r20
    4946:	48 f4       	brcc	.+18     	; 0x495a <__addsf3x+0x98>
    4948:	87 95       	ror	r24
    494a:	77 95       	ror	r23
    494c:	67 95       	ror	r22
    494e:	b7 95       	ror	r27
    4950:	f7 95       	ror	r31
    4952:	9e 3f       	cpi	r25, 0xFE	; 254
    4954:	08 f0       	brcs	.+2      	; 0x4958 <__addsf3x+0x96>
    4956:	b3 cf       	rjmp	.-154    	; 0x48be <__addsf3+0x1e>
    4958:	93 95       	inc	r25
    495a:	88 0f       	add	r24, r24
    495c:	08 f0       	brcs	.+2      	; 0x4960 <__addsf3x+0x9e>
    495e:	99 27       	eor	r25, r25
    4960:	ee 0f       	add	r30, r30
    4962:	97 95       	ror	r25
    4964:	87 95       	ror	r24
    4966:	08 95       	ret

00004968 <__cmpsf2>:
    4968:	51 d1       	rcall	.+674    	; 0x4c0c <__fp_cmp>
    496a:	08 f4       	brcc	.+2      	; 0x496e <__cmpsf2+0x6>
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	08 95       	ret

00004970 <__divsf3>:
    4970:	0c d0       	rcall	.+24     	; 0x498a <__divsf3x>
    4972:	97 c1       	rjmp	.+814    	; 0x4ca2 <__fp_round>
    4974:	8f d1       	rcall	.+798    	; 0x4c94 <__fp_pscB>
    4976:	40 f0       	brcs	.+16     	; 0x4988 <__divsf3+0x18>
    4978:	86 d1       	rcall	.+780    	; 0x4c86 <__fp_pscA>
    497a:	30 f0       	brcs	.+12     	; 0x4988 <__divsf3+0x18>
    497c:	21 f4       	brne	.+8      	; 0x4986 <__divsf3+0x16>
    497e:	5f 3f       	cpi	r21, 0xFF	; 255
    4980:	19 f0       	breq	.+6      	; 0x4988 <__divsf3+0x18>
    4982:	68 c1       	rjmp	.+720    	; 0x4c54 <__fp_inf>
    4984:	51 11       	cpse	r21, r1
    4986:	c1 c1       	rjmp	.+898    	; 0x4d0a <__fp_szero>
    4988:	6b c1       	rjmp	.+726    	; 0x4c60 <__fp_nan>

0000498a <__divsf3x>:
    498a:	9c d1       	rcall	.+824    	; 0x4cc4 <__fp_split3>
    498c:	98 f3       	brcs	.-26     	; 0x4974 <__divsf3+0x4>

0000498e <__divsf3_pse>:
    498e:	99 23       	and	r25, r25
    4990:	c9 f3       	breq	.-14     	; 0x4984 <__divsf3+0x14>
    4992:	55 23       	and	r21, r21
    4994:	b1 f3       	breq	.-20     	; 0x4982 <__divsf3+0x12>
    4996:	95 1b       	sub	r25, r21
    4998:	55 0b       	sbc	r21, r21
    499a:	bb 27       	eor	r27, r27
    499c:	aa 27       	eor	r26, r26
    499e:	62 17       	cp	r22, r18
    49a0:	73 07       	cpc	r23, r19
    49a2:	84 07       	cpc	r24, r20
    49a4:	38 f0       	brcs	.+14     	; 0x49b4 <__divsf3_pse+0x26>
    49a6:	9f 5f       	subi	r25, 0xFF	; 255
    49a8:	5f 4f       	sbci	r21, 0xFF	; 255
    49aa:	22 0f       	add	r18, r18
    49ac:	33 1f       	adc	r19, r19
    49ae:	44 1f       	adc	r20, r20
    49b0:	aa 1f       	adc	r26, r26
    49b2:	a9 f3       	breq	.-22     	; 0x499e <__divsf3_pse+0x10>
    49b4:	33 d0       	rcall	.+102    	; 0x4a1c <__divsf3_pse+0x8e>
    49b6:	0e 2e       	mov	r0, r30
    49b8:	3a f0       	brmi	.+14     	; 0x49c8 <__divsf3_pse+0x3a>
    49ba:	e0 e8       	ldi	r30, 0x80	; 128
    49bc:	30 d0       	rcall	.+96     	; 0x4a1e <__divsf3_pse+0x90>
    49be:	91 50       	subi	r25, 0x01	; 1
    49c0:	50 40       	sbci	r21, 0x00	; 0
    49c2:	e6 95       	lsr	r30
    49c4:	00 1c       	adc	r0, r0
    49c6:	ca f7       	brpl	.-14     	; 0x49ba <__divsf3_pse+0x2c>
    49c8:	29 d0       	rcall	.+82     	; 0x4a1c <__divsf3_pse+0x8e>
    49ca:	fe 2f       	mov	r31, r30
    49cc:	27 d0       	rcall	.+78     	; 0x4a1c <__divsf3_pse+0x8e>
    49ce:	66 0f       	add	r22, r22
    49d0:	77 1f       	adc	r23, r23
    49d2:	88 1f       	adc	r24, r24
    49d4:	bb 1f       	adc	r27, r27
    49d6:	26 17       	cp	r18, r22
    49d8:	37 07       	cpc	r19, r23
    49da:	48 07       	cpc	r20, r24
    49dc:	ab 07       	cpc	r26, r27
    49de:	b0 e8       	ldi	r27, 0x80	; 128
    49e0:	09 f0       	breq	.+2      	; 0x49e4 <__divsf3_pse+0x56>
    49e2:	bb 0b       	sbc	r27, r27
    49e4:	80 2d       	mov	r24, r0
    49e6:	bf 01       	movw	r22, r30
    49e8:	ff 27       	eor	r31, r31
    49ea:	93 58       	subi	r25, 0x83	; 131
    49ec:	5f 4f       	sbci	r21, 0xFF	; 255
    49ee:	2a f0       	brmi	.+10     	; 0x49fa <__divsf3_pse+0x6c>
    49f0:	9e 3f       	cpi	r25, 0xFE	; 254
    49f2:	51 05       	cpc	r21, r1
    49f4:	68 f0       	brcs	.+26     	; 0x4a10 <__divsf3_pse+0x82>
    49f6:	2e c1       	rjmp	.+604    	; 0x4c54 <__fp_inf>
    49f8:	88 c1       	rjmp	.+784    	; 0x4d0a <__fp_szero>
    49fa:	5f 3f       	cpi	r21, 0xFF	; 255
    49fc:	ec f3       	brlt	.-6      	; 0x49f8 <__divsf3_pse+0x6a>
    49fe:	98 3e       	cpi	r25, 0xE8	; 232
    4a00:	dc f3       	brlt	.-10     	; 0x49f8 <__divsf3_pse+0x6a>
    4a02:	86 95       	lsr	r24
    4a04:	77 95       	ror	r23
    4a06:	67 95       	ror	r22
    4a08:	b7 95       	ror	r27
    4a0a:	f7 95       	ror	r31
    4a0c:	9f 5f       	subi	r25, 0xFF	; 255
    4a0e:	c9 f7       	brne	.-14     	; 0x4a02 <__divsf3_pse+0x74>
    4a10:	88 0f       	add	r24, r24
    4a12:	91 1d       	adc	r25, r1
    4a14:	96 95       	lsr	r25
    4a16:	87 95       	ror	r24
    4a18:	97 f9       	bld	r25, 7
    4a1a:	08 95       	ret
    4a1c:	e1 e0       	ldi	r30, 0x01	; 1
    4a1e:	66 0f       	add	r22, r22
    4a20:	77 1f       	adc	r23, r23
    4a22:	88 1f       	adc	r24, r24
    4a24:	bb 1f       	adc	r27, r27
    4a26:	62 17       	cp	r22, r18
    4a28:	73 07       	cpc	r23, r19
    4a2a:	84 07       	cpc	r24, r20
    4a2c:	ba 07       	cpc	r27, r26
    4a2e:	20 f0       	brcs	.+8      	; 0x4a38 <__divsf3_pse+0xaa>
    4a30:	62 1b       	sub	r22, r18
    4a32:	73 0b       	sbc	r23, r19
    4a34:	84 0b       	sbc	r24, r20
    4a36:	ba 0b       	sbc	r27, r26
    4a38:	ee 1f       	adc	r30, r30
    4a3a:	88 f7       	brcc	.-30     	; 0x4a1e <__divsf3_pse+0x90>
    4a3c:	e0 95       	com	r30
    4a3e:	08 95       	ret

00004a40 <__fixsfdi>:
    4a40:	be e3       	ldi	r27, 0x3E	; 62
    4a42:	04 d0       	rcall	.+8      	; 0x4a4c <__fixunssfdi+0x2>
    4a44:	08 f4       	brcc	.+2      	; 0x4a48 <__fixsfdi+0x8>
    4a46:	90 e8       	ldi	r25, 0x80	; 128
    4a48:	08 95       	ret

00004a4a <__fixunssfdi>:
    4a4a:	bf e3       	ldi	r27, 0x3F	; 63
    4a4c:	22 27       	eor	r18, r18
    4a4e:	33 27       	eor	r19, r19
    4a50:	a9 01       	movw	r20, r18
    4a52:	40 d1       	rcall	.+640    	; 0x4cd4 <__fp_splitA>
    4a54:	58 f1       	brcs	.+86     	; 0x4aac <__fixunssfdi+0x62>
    4a56:	9f 57       	subi	r25, 0x7F	; 127
    4a58:	40 f1       	brcs	.+80     	; 0x4aaa <__fixunssfdi+0x60>
    4a5a:	b9 17       	cp	r27, r25
    4a5c:	38 f1       	brcs	.+78     	; 0x4aac <__fixunssfdi+0x62>
    4a5e:	bf e3       	ldi	r27, 0x3F	; 63
    4a60:	b9 1b       	sub	r27, r25
    4a62:	99 27       	eor	r25, r25
    4a64:	b8 50       	subi	r27, 0x08	; 8
    4a66:	3a f4       	brpl	.+14     	; 0x4a76 <__fixunssfdi+0x2c>
    4a68:	66 0f       	add	r22, r22
    4a6a:	77 1f       	adc	r23, r23
    4a6c:	88 1f       	adc	r24, r24
    4a6e:	99 1f       	adc	r25, r25
    4a70:	b3 95       	inc	r27
    4a72:	d2 f3       	brmi	.-12     	; 0x4a68 <__fixunssfdi+0x1e>
    4a74:	16 c0       	rjmp	.+44     	; 0x4aa2 <__fixunssfdi+0x58>
    4a76:	b8 50       	subi	r27, 0x08	; 8
    4a78:	4a f0       	brmi	.+18     	; 0x4a8c <__fixunssfdi+0x42>
    4a7a:	23 2f       	mov	r18, r19
    4a7c:	34 2f       	mov	r19, r20
    4a7e:	45 2f       	mov	r20, r21
    4a80:	56 2f       	mov	r21, r22
    4a82:	67 2f       	mov	r22, r23
    4a84:	78 2f       	mov	r23, r24
    4a86:	88 27       	eor	r24, r24
    4a88:	b8 50       	subi	r27, 0x08	; 8
    4a8a:	ba f7       	brpl	.-18     	; 0x4a7a <__fixunssfdi+0x30>
    4a8c:	b8 5f       	subi	r27, 0xF8	; 248
    4a8e:	49 f0       	breq	.+18     	; 0x4aa2 <__fixunssfdi+0x58>
    4a90:	86 95       	lsr	r24
    4a92:	77 95       	ror	r23
    4a94:	67 95       	ror	r22
    4a96:	57 95       	ror	r21
    4a98:	47 95       	ror	r20
    4a9a:	37 95       	ror	r19
    4a9c:	27 95       	ror	r18
    4a9e:	ba 95       	dec	r27
    4aa0:	b9 f7       	brne	.-18     	; 0x4a90 <__fixunssfdi+0x46>
    4aa2:	0e f4       	brtc	.+2      	; 0x4aa6 <__fixunssfdi+0x5c>
    4aa4:	e0 d0       	rcall	.+448    	; 0x4c66 <__fp_negdi>
    4aa6:	88 94       	clc
    4aa8:	08 95       	ret
    4aaa:	88 94       	clc
    4aac:	60 e0       	ldi	r22, 0x00	; 0
    4aae:	70 e0       	ldi	r23, 0x00	; 0
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	08 95       	ret

00004ab4 <__fixsfsi>:
    4ab4:	04 d0       	rcall	.+8      	; 0x4abe <__fixunssfsi>
    4ab6:	68 94       	set
    4ab8:	b1 11       	cpse	r27, r1
    4aba:	27 c1       	rjmp	.+590    	; 0x4d0a <__fp_szero>
    4abc:	08 95       	ret

00004abe <__fixunssfsi>:
    4abe:	0a d1       	rcall	.+532    	; 0x4cd4 <__fp_splitA>
    4ac0:	88 f0       	brcs	.+34     	; 0x4ae4 <__fixunssfsi+0x26>
    4ac2:	9f 57       	subi	r25, 0x7F	; 127
    4ac4:	90 f0       	brcs	.+36     	; 0x4aea <__fixunssfsi+0x2c>
    4ac6:	b9 2f       	mov	r27, r25
    4ac8:	99 27       	eor	r25, r25
    4aca:	b7 51       	subi	r27, 0x17	; 23
    4acc:	a0 f0       	brcs	.+40     	; 0x4af6 <__fixunssfsi+0x38>
    4ace:	d1 f0       	breq	.+52     	; 0x4b04 <__fixunssfsi+0x46>
    4ad0:	66 0f       	add	r22, r22
    4ad2:	77 1f       	adc	r23, r23
    4ad4:	88 1f       	adc	r24, r24
    4ad6:	99 1f       	adc	r25, r25
    4ad8:	1a f0       	brmi	.+6      	; 0x4ae0 <__fixunssfsi+0x22>
    4ada:	ba 95       	dec	r27
    4adc:	c9 f7       	brne	.-14     	; 0x4ad0 <__fixunssfsi+0x12>
    4ade:	12 c0       	rjmp	.+36     	; 0x4b04 <__fixunssfsi+0x46>
    4ae0:	b1 30       	cpi	r27, 0x01	; 1
    4ae2:	81 f0       	breq	.+32     	; 0x4b04 <__fixunssfsi+0x46>
    4ae4:	11 d1       	rcall	.+546    	; 0x4d08 <__fp_zero>
    4ae6:	b1 e0       	ldi	r27, 0x01	; 1
    4ae8:	08 95       	ret
    4aea:	0e c1       	rjmp	.+540    	; 0x4d08 <__fp_zero>
    4aec:	67 2f       	mov	r22, r23
    4aee:	78 2f       	mov	r23, r24
    4af0:	88 27       	eor	r24, r24
    4af2:	b8 5f       	subi	r27, 0xF8	; 248
    4af4:	39 f0       	breq	.+14     	; 0x4b04 <__fixunssfsi+0x46>
    4af6:	b9 3f       	cpi	r27, 0xF9	; 249
    4af8:	cc f3       	brlt	.-14     	; 0x4aec <__fixunssfsi+0x2e>
    4afa:	86 95       	lsr	r24
    4afc:	77 95       	ror	r23
    4afe:	67 95       	ror	r22
    4b00:	b3 95       	inc	r27
    4b02:	d9 f7       	brne	.-10     	; 0x4afa <__fixunssfsi+0x3c>
    4b04:	3e f4       	brtc	.+14     	; 0x4b14 <__fixunssfsi+0x56>
    4b06:	90 95       	com	r25
    4b08:	80 95       	com	r24
    4b0a:	70 95       	com	r23
    4b0c:	61 95       	neg	r22
    4b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b10:	8f 4f       	sbci	r24, 0xFF	; 255
    4b12:	9f 4f       	sbci	r25, 0xFF	; 255
    4b14:	08 95       	ret

00004b16 <__floatunsisf>:
    4b16:	e8 94       	clt
    4b18:	09 c0       	rjmp	.+18     	; 0x4b2c <__floatsisf+0x12>

00004b1a <__floatsisf>:
    4b1a:	97 fb       	bst	r25, 7
    4b1c:	3e f4       	brtc	.+14     	; 0x4b2c <__floatsisf+0x12>
    4b1e:	90 95       	com	r25
    4b20:	80 95       	com	r24
    4b22:	70 95       	com	r23
    4b24:	61 95       	neg	r22
    4b26:	7f 4f       	sbci	r23, 0xFF	; 255
    4b28:	8f 4f       	sbci	r24, 0xFF	; 255
    4b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b2c:	99 23       	and	r25, r25
    4b2e:	a9 f0       	breq	.+42     	; 0x4b5a <__floatsisf+0x40>
    4b30:	f9 2f       	mov	r31, r25
    4b32:	96 e9       	ldi	r25, 0x96	; 150
    4b34:	bb 27       	eor	r27, r27
    4b36:	93 95       	inc	r25
    4b38:	f6 95       	lsr	r31
    4b3a:	87 95       	ror	r24
    4b3c:	77 95       	ror	r23
    4b3e:	67 95       	ror	r22
    4b40:	b7 95       	ror	r27
    4b42:	f1 11       	cpse	r31, r1
    4b44:	f8 cf       	rjmp	.-16     	; 0x4b36 <__floatsisf+0x1c>
    4b46:	fa f4       	brpl	.+62     	; 0x4b86 <__floatsisf+0x6c>
    4b48:	bb 0f       	add	r27, r27
    4b4a:	11 f4       	brne	.+4      	; 0x4b50 <__floatsisf+0x36>
    4b4c:	60 ff       	sbrs	r22, 0
    4b4e:	1b c0       	rjmp	.+54     	; 0x4b86 <__floatsisf+0x6c>
    4b50:	6f 5f       	subi	r22, 0xFF	; 255
    4b52:	7f 4f       	sbci	r23, 0xFF	; 255
    4b54:	8f 4f       	sbci	r24, 0xFF	; 255
    4b56:	9f 4f       	sbci	r25, 0xFF	; 255
    4b58:	16 c0       	rjmp	.+44     	; 0x4b86 <__floatsisf+0x6c>
    4b5a:	88 23       	and	r24, r24
    4b5c:	11 f0       	breq	.+4      	; 0x4b62 <__floatsisf+0x48>
    4b5e:	96 e9       	ldi	r25, 0x96	; 150
    4b60:	11 c0       	rjmp	.+34     	; 0x4b84 <__floatsisf+0x6a>
    4b62:	77 23       	and	r23, r23
    4b64:	21 f0       	breq	.+8      	; 0x4b6e <__floatsisf+0x54>
    4b66:	9e e8       	ldi	r25, 0x8E	; 142
    4b68:	87 2f       	mov	r24, r23
    4b6a:	76 2f       	mov	r23, r22
    4b6c:	05 c0       	rjmp	.+10     	; 0x4b78 <__floatsisf+0x5e>
    4b6e:	66 23       	and	r22, r22
    4b70:	71 f0       	breq	.+28     	; 0x4b8e <__floatsisf+0x74>
    4b72:	96 e8       	ldi	r25, 0x86	; 134
    4b74:	86 2f       	mov	r24, r22
    4b76:	70 e0       	ldi	r23, 0x00	; 0
    4b78:	60 e0       	ldi	r22, 0x00	; 0
    4b7a:	2a f0       	brmi	.+10     	; 0x4b86 <__floatsisf+0x6c>
    4b7c:	9a 95       	dec	r25
    4b7e:	66 0f       	add	r22, r22
    4b80:	77 1f       	adc	r23, r23
    4b82:	88 1f       	adc	r24, r24
    4b84:	da f7       	brpl	.-10     	; 0x4b7c <__floatsisf+0x62>
    4b86:	88 0f       	add	r24, r24
    4b88:	96 95       	lsr	r25
    4b8a:	87 95       	ror	r24
    4b8c:	97 f9       	bld	r25, 7
    4b8e:	08 95       	ret

00004b90 <__floatundisf>:
    4b90:	e8 94       	clt

00004b92 <__fp_di2sf>:
    4b92:	f9 2f       	mov	r31, r25
    4b94:	96 eb       	ldi	r25, 0xB6	; 182
    4b96:	ff 23       	and	r31, r31
    4b98:	81 f0       	breq	.+32     	; 0x4bba <__fp_di2sf+0x28>
    4b9a:	12 16       	cp	r1, r18
    4b9c:	13 06       	cpc	r1, r19
    4b9e:	14 06       	cpc	r1, r20
    4ba0:	44 0b       	sbc	r20, r20
    4ba2:	93 95       	inc	r25
    4ba4:	f6 95       	lsr	r31
    4ba6:	87 95       	ror	r24
    4ba8:	77 95       	ror	r23
    4baa:	67 95       	ror	r22
    4bac:	57 95       	ror	r21
    4bae:	40 40       	sbci	r20, 0x00	; 0
    4bb0:	ff 23       	and	r31, r31
    4bb2:	b9 f7       	brne	.-18     	; 0x4ba2 <__fp_di2sf+0x10>
    4bb4:	1b c0       	rjmp	.+54     	; 0x4bec <__fp_di2sf+0x5a>
    4bb6:	99 27       	eor	r25, r25
    4bb8:	08 95       	ret
    4bba:	88 23       	and	r24, r24
    4bbc:	51 f4       	brne	.+20     	; 0x4bd2 <__fp_di2sf+0x40>
    4bbe:	98 50       	subi	r25, 0x08	; 8
    4bc0:	d2 f7       	brpl	.-12     	; 0x4bb6 <__fp_di2sf+0x24>
    4bc2:	87 2b       	or	r24, r23
    4bc4:	76 2f       	mov	r23, r22
    4bc6:	65 2f       	mov	r22, r21
    4bc8:	54 2f       	mov	r21, r20
    4bca:	43 2f       	mov	r20, r19
    4bcc:	32 2f       	mov	r19, r18
    4bce:	20 e0       	ldi	r18, 0x00	; 0
    4bd0:	b1 f3       	breq	.-20     	; 0x4bbe <__fp_di2sf+0x2c>
    4bd2:	12 16       	cp	r1, r18
    4bd4:	13 06       	cpc	r1, r19
    4bd6:	14 06       	cpc	r1, r20
    4bd8:	44 0b       	sbc	r20, r20
    4bda:	88 23       	and	r24, r24
    4bdc:	3a f0       	brmi	.+14     	; 0x4bec <__fp_di2sf+0x5a>
    4bde:	9a 95       	dec	r25
    4be0:	44 0f       	add	r20, r20
    4be2:	55 1f       	adc	r21, r21
    4be4:	66 1f       	adc	r22, r22
    4be6:	77 1f       	adc	r23, r23
    4be8:	88 1f       	adc	r24, r24
    4bea:	ca f7       	brpl	.-14     	; 0x4bde <__fp_di2sf+0x4c>
    4bec:	55 23       	and	r21, r21
    4bee:	4a f4       	brpl	.+18     	; 0x4c02 <__fp_di2sf+0x70>
    4bf0:	44 0f       	add	r20, r20
    4bf2:	55 1f       	adc	r21, r21
    4bf4:	11 f4       	brne	.+4      	; 0x4bfa <__fp_di2sf+0x68>
    4bf6:	60 ff       	sbrs	r22, 0
    4bf8:	04 c0       	rjmp	.+8      	; 0x4c02 <__fp_di2sf+0x70>
    4bfa:	6f 5f       	subi	r22, 0xFF	; 255
    4bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    4c00:	9f 4f       	sbci	r25, 0xFF	; 255
    4c02:	88 0f       	add	r24, r24
    4c04:	96 95       	lsr	r25
    4c06:	87 95       	ror	r24
    4c08:	97 f9       	bld	r25, 7
    4c0a:	08 95       	ret

00004c0c <__fp_cmp>:
    4c0c:	99 0f       	add	r25, r25
    4c0e:	00 08       	sbc	r0, r0
    4c10:	55 0f       	add	r21, r21
    4c12:	aa 0b       	sbc	r26, r26
    4c14:	e0 e8       	ldi	r30, 0x80	; 128
    4c16:	fe ef       	ldi	r31, 0xFE	; 254
    4c18:	16 16       	cp	r1, r22
    4c1a:	17 06       	cpc	r1, r23
    4c1c:	e8 07       	cpc	r30, r24
    4c1e:	f9 07       	cpc	r31, r25
    4c20:	c0 f0       	brcs	.+48     	; 0x4c52 <__fp_cmp+0x46>
    4c22:	12 16       	cp	r1, r18
    4c24:	13 06       	cpc	r1, r19
    4c26:	e4 07       	cpc	r30, r20
    4c28:	f5 07       	cpc	r31, r21
    4c2a:	98 f0       	brcs	.+38     	; 0x4c52 <__fp_cmp+0x46>
    4c2c:	62 1b       	sub	r22, r18
    4c2e:	73 0b       	sbc	r23, r19
    4c30:	84 0b       	sbc	r24, r20
    4c32:	95 0b       	sbc	r25, r21
    4c34:	39 f4       	brne	.+14     	; 0x4c44 <__fp_cmp+0x38>
    4c36:	0a 26       	eor	r0, r26
    4c38:	61 f0       	breq	.+24     	; 0x4c52 <__fp_cmp+0x46>
    4c3a:	23 2b       	or	r18, r19
    4c3c:	24 2b       	or	r18, r20
    4c3e:	25 2b       	or	r18, r21
    4c40:	21 f4       	brne	.+8      	; 0x4c4a <__fp_cmp+0x3e>
    4c42:	08 95       	ret
    4c44:	0a 26       	eor	r0, r26
    4c46:	09 f4       	brne	.+2      	; 0x4c4a <__fp_cmp+0x3e>
    4c48:	a1 40       	sbci	r26, 0x01	; 1
    4c4a:	a6 95       	lsr	r26
    4c4c:	8f ef       	ldi	r24, 0xFF	; 255
    4c4e:	81 1d       	adc	r24, r1
    4c50:	81 1d       	adc	r24, r1
    4c52:	08 95       	ret

00004c54 <__fp_inf>:
    4c54:	97 f9       	bld	r25, 7
    4c56:	9f 67       	ori	r25, 0x7F	; 127
    4c58:	80 e8       	ldi	r24, 0x80	; 128
    4c5a:	70 e0       	ldi	r23, 0x00	; 0
    4c5c:	60 e0       	ldi	r22, 0x00	; 0
    4c5e:	08 95       	ret

00004c60 <__fp_nan>:
    4c60:	9f ef       	ldi	r25, 0xFF	; 255
    4c62:	80 ec       	ldi	r24, 0xC0	; 192
    4c64:	08 95       	ret

00004c66 <__fp_negdi>:
    4c66:	90 95       	com	r25
    4c68:	80 95       	com	r24
    4c6a:	70 95       	com	r23
    4c6c:	60 95       	com	r22
    4c6e:	50 95       	com	r21
    4c70:	40 95       	com	r20
    4c72:	30 95       	com	r19
    4c74:	21 95       	neg	r18
    4c76:	3f 4f       	sbci	r19, 0xFF	; 255
    4c78:	4f 4f       	sbci	r20, 0xFF	; 255
    4c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c7c:	6f 4f       	sbci	r22, 0xFF	; 255
    4c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c80:	8f 4f       	sbci	r24, 0xFF	; 255
    4c82:	9f 4f       	sbci	r25, 0xFF	; 255
    4c84:	08 95       	ret

00004c86 <__fp_pscA>:
    4c86:	00 24       	eor	r0, r0
    4c88:	0a 94       	dec	r0
    4c8a:	16 16       	cp	r1, r22
    4c8c:	17 06       	cpc	r1, r23
    4c8e:	18 06       	cpc	r1, r24
    4c90:	09 06       	cpc	r0, r25
    4c92:	08 95       	ret

00004c94 <__fp_pscB>:
    4c94:	00 24       	eor	r0, r0
    4c96:	0a 94       	dec	r0
    4c98:	12 16       	cp	r1, r18
    4c9a:	13 06       	cpc	r1, r19
    4c9c:	14 06       	cpc	r1, r20
    4c9e:	05 06       	cpc	r0, r21
    4ca0:	08 95       	ret

00004ca2 <__fp_round>:
    4ca2:	09 2e       	mov	r0, r25
    4ca4:	03 94       	inc	r0
    4ca6:	00 0c       	add	r0, r0
    4ca8:	11 f4       	brne	.+4      	; 0x4cae <__fp_round+0xc>
    4caa:	88 23       	and	r24, r24
    4cac:	52 f0       	brmi	.+20     	; 0x4cc2 <__fp_round+0x20>
    4cae:	bb 0f       	add	r27, r27
    4cb0:	40 f4       	brcc	.+16     	; 0x4cc2 <__fp_round+0x20>
    4cb2:	bf 2b       	or	r27, r31
    4cb4:	11 f4       	brne	.+4      	; 0x4cba <__fp_round+0x18>
    4cb6:	60 ff       	sbrs	r22, 0
    4cb8:	04 c0       	rjmp	.+8      	; 0x4cc2 <__fp_round+0x20>
    4cba:	6f 5f       	subi	r22, 0xFF	; 255
    4cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    4cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    4cc2:	08 95       	ret

00004cc4 <__fp_split3>:
    4cc4:	57 fd       	sbrc	r21, 7
    4cc6:	90 58       	subi	r25, 0x80	; 128
    4cc8:	44 0f       	add	r20, r20
    4cca:	55 1f       	adc	r21, r21
    4ccc:	59 f0       	breq	.+22     	; 0x4ce4 <__fp_splitA+0x10>
    4cce:	5f 3f       	cpi	r21, 0xFF	; 255
    4cd0:	71 f0       	breq	.+28     	; 0x4cee <__fp_splitA+0x1a>
    4cd2:	47 95       	ror	r20

00004cd4 <__fp_splitA>:
    4cd4:	88 0f       	add	r24, r24
    4cd6:	97 fb       	bst	r25, 7
    4cd8:	99 1f       	adc	r25, r25
    4cda:	61 f0       	breq	.+24     	; 0x4cf4 <__fp_splitA+0x20>
    4cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    4cde:	79 f0       	breq	.+30     	; 0x4cfe <__fp_splitA+0x2a>
    4ce0:	87 95       	ror	r24
    4ce2:	08 95       	ret
    4ce4:	12 16       	cp	r1, r18
    4ce6:	13 06       	cpc	r1, r19
    4ce8:	14 06       	cpc	r1, r20
    4cea:	55 1f       	adc	r21, r21
    4cec:	f2 cf       	rjmp	.-28     	; 0x4cd2 <__fp_split3+0xe>
    4cee:	46 95       	lsr	r20
    4cf0:	f1 df       	rcall	.-30     	; 0x4cd4 <__fp_splitA>
    4cf2:	08 c0       	rjmp	.+16     	; 0x4d04 <__fp_splitA+0x30>
    4cf4:	16 16       	cp	r1, r22
    4cf6:	17 06       	cpc	r1, r23
    4cf8:	18 06       	cpc	r1, r24
    4cfa:	99 1f       	adc	r25, r25
    4cfc:	f1 cf       	rjmp	.-30     	; 0x4ce0 <__fp_splitA+0xc>
    4cfe:	86 95       	lsr	r24
    4d00:	71 05       	cpc	r23, r1
    4d02:	61 05       	cpc	r22, r1
    4d04:	08 94       	sec
    4d06:	08 95       	ret

00004d08 <__fp_zero>:
    4d08:	e8 94       	clt

00004d0a <__fp_szero>:
    4d0a:	bb 27       	eor	r27, r27
    4d0c:	66 27       	eor	r22, r22
    4d0e:	77 27       	eor	r23, r23
    4d10:	cb 01       	movw	r24, r22
    4d12:	97 f9       	bld	r25, 7
    4d14:	08 95       	ret

00004d16 <__gesf2>:
    4d16:	7a df       	rcall	.-268    	; 0x4c0c <__fp_cmp>
    4d18:	08 f4       	brcc	.+2      	; 0x4d1c <__gesf2+0x6>
    4d1a:	8f ef       	ldi	r24, 0xFF	; 255
    4d1c:	08 95       	ret

00004d1e <__mulsf3>:
    4d1e:	0b d0       	rcall	.+22     	; 0x4d36 <__mulsf3x>
    4d20:	c0 cf       	rjmp	.-128    	; 0x4ca2 <__fp_round>
    4d22:	b1 df       	rcall	.-158    	; 0x4c86 <__fp_pscA>
    4d24:	28 f0       	brcs	.+10     	; 0x4d30 <__mulsf3+0x12>
    4d26:	b6 df       	rcall	.-148    	; 0x4c94 <__fp_pscB>
    4d28:	18 f0       	brcs	.+6      	; 0x4d30 <__mulsf3+0x12>
    4d2a:	95 23       	and	r25, r21
    4d2c:	09 f0       	breq	.+2      	; 0x4d30 <__mulsf3+0x12>
    4d2e:	92 cf       	rjmp	.-220    	; 0x4c54 <__fp_inf>
    4d30:	97 cf       	rjmp	.-210    	; 0x4c60 <__fp_nan>
    4d32:	11 24       	eor	r1, r1
    4d34:	ea cf       	rjmp	.-44     	; 0x4d0a <__fp_szero>

00004d36 <__mulsf3x>:
    4d36:	c6 df       	rcall	.-116    	; 0x4cc4 <__fp_split3>
    4d38:	a0 f3       	brcs	.-24     	; 0x4d22 <__mulsf3+0x4>

00004d3a <__mulsf3_pse>:
    4d3a:	95 9f       	mul	r25, r21
    4d3c:	d1 f3       	breq	.-12     	; 0x4d32 <__mulsf3+0x14>
    4d3e:	95 0f       	add	r25, r21
    4d40:	50 e0       	ldi	r21, 0x00	; 0
    4d42:	55 1f       	adc	r21, r21
    4d44:	62 9f       	mul	r22, r18
    4d46:	f0 01       	movw	r30, r0
    4d48:	72 9f       	mul	r23, r18
    4d4a:	bb 27       	eor	r27, r27
    4d4c:	f0 0d       	add	r31, r0
    4d4e:	b1 1d       	adc	r27, r1
    4d50:	63 9f       	mul	r22, r19
    4d52:	aa 27       	eor	r26, r26
    4d54:	f0 0d       	add	r31, r0
    4d56:	b1 1d       	adc	r27, r1
    4d58:	aa 1f       	adc	r26, r26
    4d5a:	64 9f       	mul	r22, r20
    4d5c:	66 27       	eor	r22, r22
    4d5e:	b0 0d       	add	r27, r0
    4d60:	a1 1d       	adc	r26, r1
    4d62:	66 1f       	adc	r22, r22
    4d64:	82 9f       	mul	r24, r18
    4d66:	22 27       	eor	r18, r18
    4d68:	b0 0d       	add	r27, r0
    4d6a:	a1 1d       	adc	r26, r1
    4d6c:	62 1f       	adc	r22, r18
    4d6e:	73 9f       	mul	r23, r19
    4d70:	b0 0d       	add	r27, r0
    4d72:	a1 1d       	adc	r26, r1
    4d74:	62 1f       	adc	r22, r18
    4d76:	83 9f       	mul	r24, r19
    4d78:	a0 0d       	add	r26, r0
    4d7a:	61 1d       	adc	r22, r1
    4d7c:	22 1f       	adc	r18, r18
    4d7e:	74 9f       	mul	r23, r20
    4d80:	33 27       	eor	r19, r19
    4d82:	a0 0d       	add	r26, r0
    4d84:	61 1d       	adc	r22, r1
    4d86:	23 1f       	adc	r18, r19
    4d88:	84 9f       	mul	r24, r20
    4d8a:	60 0d       	add	r22, r0
    4d8c:	21 1d       	adc	r18, r1
    4d8e:	82 2f       	mov	r24, r18
    4d90:	76 2f       	mov	r23, r22
    4d92:	6a 2f       	mov	r22, r26
    4d94:	11 24       	eor	r1, r1
    4d96:	9f 57       	subi	r25, 0x7F	; 127
    4d98:	50 40       	sbci	r21, 0x00	; 0
    4d9a:	8a f0       	brmi	.+34     	; 0x4dbe <__mulsf3_pse+0x84>
    4d9c:	e1 f0       	breq	.+56     	; 0x4dd6 <__mulsf3_pse+0x9c>
    4d9e:	88 23       	and	r24, r24
    4da0:	4a f0       	brmi	.+18     	; 0x4db4 <__mulsf3_pse+0x7a>
    4da2:	ee 0f       	add	r30, r30
    4da4:	ff 1f       	adc	r31, r31
    4da6:	bb 1f       	adc	r27, r27
    4da8:	66 1f       	adc	r22, r22
    4daa:	77 1f       	adc	r23, r23
    4dac:	88 1f       	adc	r24, r24
    4dae:	91 50       	subi	r25, 0x01	; 1
    4db0:	50 40       	sbci	r21, 0x00	; 0
    4db2:	a9 f7       	brne	.-22     	; 0x4d9e <__mulsf3_pse+0x64>
    4db4:	9e 3f       	cpi	r25, 0xFE	; 254
    4db6:	51 05       	cpc	r21, r1
    4db8:	70 f0       	brcs	.+28     	; 0x4dd6 <__mulsf3_pse+0x9c>
    4dba:	4c cf       	rjmp	.-360    	; 0x4c54 <__fp_inf>
    4dbc:	a6 cf       	rjmp	.-180    	; 0x4d0a <__fp_szero>
    4dbe:	5f 3f       	cpi	r21, 0xFF	; 255
    4dc0:	ec f3       	brlt	.-6      	; 0x4dbc <__mulsf3_pse+0x82>
    4dc2:	98 3e       	cpi	r25, 0xE8	; 232
    4dc4:	dc f3       	brlt	.-10     	; 0x4dbc <__mulsf3_pse+0x82>
    4dc6:	86 95       	lsr	r24
    4dc8:	77 95       	ror	r23
    4dca:	67 95       	ror	r22
    4dcc:	b7 95       	ror	r27
    4dce:	f7 95       	ror	r31
    4dd0:	e7 95       	ror	r30
    4dd2:	9f 5f       	subi	r25, 0xFF	; 255
    4dd4:	c1 f7       	brne	.-16     	; 0x4dc6 <__mulsf3_pse+0x8c>
    4dd6:	fe 2b       	or	r31, r30
    4dd8:	88 0f       	add	r24, r24
    4dda:	91 1d       	adc	r25, r1
    4ddc:	96 95       	lsr	r25
    4dde:	87 95       	ror	r24
    4de0:	97 f9       	bld	r25, 7
    4de2:	08 95       	ret

00004de4 <__udivmodhi4>:
    4de4:	aa 1b       	sub	r26, r26
    4de6:	bb 1b       	sub	r27, r27
    4de8:	51 e1       	ldi	r21, 0x11	; 17
    4dea:	07 c0       	rjmp	.+14     	; 0x4dfa <__udivmodhi4_ep>

00004dec <__udivmodhi4_loop>:
    4dec:	aa 1f       	adc	r26, r26
    4dee:	bb 1f       	adc	r27, r27
    4df0:	a6 17       	cp	r26, r22
    4df2:	b7 07       	cpc	r27, r23
    4df4:	10 f0       	brcs	.+4      	; 0x4dfa <__udivmodhi4_ep>
    4df6:	a6 1b       	sub	r26, r22
    4df8:	b7 0b       	sbc	r27, r23

00004dfa <__udivmodhi4_ep>:
    4dfa:	88 1f       	adc	r24, r24
    4dfc:	99 1f       	adc	r25, r25
    4dfe:	5a 95       	dec	r21
    4e00:	a9 f7       	brne	.-22     	; 0x4dec <__udivmodhi4_loop>
    4e02:	80 95       	com	r24
    4e04:	90 95       	com	r25
    4e06:	bc 01       	movw	r22, r24
    4e08:	cd 01       	movw	r24, r26
    4e0a:	08 95       	ret

00004e0c <__divmodhi4>:
    4e0c:	97 fb       	bst	r25, 7
    4e0e:	07 2e       	mov	r0, r23
    4e10:	16 f4       	brtc	.+4      	; 0x4e16 <__divmodhi4+0xa>
    4e12:	00 94       	com	r0
    4e14:	06 d0       	rcall	.+12     	; 0x4e22 <__divmodhi4_neg1>
    4e16:	77 fd       	sbrc	r23, 7
    4e18:	08 d0       	rcall	.+16     	; 0x4e2a <__divmodhi4_neg2>
    4e1a:	e4 df       	rcall	.-56     	; 0x4de4 <__udivmodhi4>
    4e1c:	07 fc       	sbrc	r0, 7
    4e1e:	05 d0       	rcall	.+10     	; 0x4e2a <__divmodhi4_neg2>
    4e20:	3e f4       	brtc	.+14     	; 0x4e30 <__divmodhi4_exit>

00004e22 <__divmodhi4_neg1>:
    4e22:	90 95       	com	r25
    4e24:	81 95       	neg	r24
    4e26:	9f 4f       	sbci	r25, 0xFF	; 255
    4e28:	08 95       	ret

00004e2a <__divmodhi4_neg2>:
    4e2a:	70 95       	com	r23
    4e2c:	61 95       	neg	r22
    4e2e:	7f 4f       	sbci	r23, 0xFF	; 255

00004e30 <__divmodhi4_exit>:
    4e30:	08 95       	ret

00004e32 <__udivmodsi4>:
    4e32:	a1 e2       	ldi	r26, 0x21	; 33
    4e34:	1a 2e       	mov	r1, r26
    4e36:	aa 1b       	sub	r26, r26
    4e38:	bb 1b       	sub	r27, r27
    4e3a:	fd 01       	movw	r30, r26
    4e3c:	0d c0       	rjmp	.+26     	; 0x4e58 <__udivmodsi4_ep>

00004e3e <__udivmodsi4_loop>:
    4e3e:	aa 1f       	adc	r26, r26
    4e40:	bb 1f       	adc	r27, r27
    4e42:	ee 1f       	adc	r30, r30
    4e44:	ff 1f       	adc	r31, r31
    4e46:	a2 17       	cp	r26, r18
    4e48:	b3 07       	cpc	r27, r19
    4e4a:	e4 07       	cpc	r30, r20
    4e4c:	f5 07       	cpc	r31, r21
    4e4e:	20 f0       	brcs	.+8      	; 0x4e58 <__udivmodsi4_ep>
    4e50:	a2 1b       	sub	r26, r18
    4e52:	b3 0b       	sbc	r27, r19
    4e54:	e4 0b       	sbc	r30, r20
    4e56:	f5 0b       	sbc	r31, r21

00004e58 <__udivmodsi4_ep>:
    4e58:	66 1f       	adc	r22, r22
    4e5a:	77 1f       	adc	r23, r23
    4e5c:	88 1f       	adc	r24, r24
    4e5e:	99 1f       	adc	r25, r25
    4e60:	1a 94       	dec	r1
    4e62:	69 f7       	brne	.-38     	; 0x4e3e <__udivmodsi4_loop>
    4e64:	60 95       	com	r22
    4e66:	70 95       	com	r23
    4e68:	80 95       	com	r24
    4e6a:	90 95       	com	r25
    4e6c:	9b 01       	movw	r18, r22
    4e6e:	ac 01       	movw	r20, r24
    4e70:	bd 01       	movw	r22, r26
    4e72:	cf 01       	movw	r24, r30
    4e74:	08 95       	ret

00004e76 <__divmodsi4>:
    4e76:	05 2e       	mov	r0, r21
    4e78:	97 fb       	bst	r25, 7
    4e7a:	16 f4       	brtc	.+4      	; 0x4e80 <__divmodsi4+0xa>
    4e7c:	00 94       	com	r0
    4e7e:	0f d0       	rcall	.+30     	; 0x4e9e <__negsi2>
    4e80:	57 fd       	sbrc	r21, 7
    4e82:	05 d0       	rcall	.+10     	; 0x4e8e <__divmodsi4_neg2>
    4e84:	d6 df       	rcall	.-84     	; 0x4e32 <__udivmodsi4>
    4e86:	07 fc       	sbrc	r0, 7
    4e88:	02 d0       	rcall	.+4      	; 0x4e8e <__divmodsi4_neg2>
    4e8a:	46 f4       	brtc	.+16     	; 0x4e9c <__divmodsi4_exit>
    4e8c:	08 c0       	rjmp	.+16     	; 0x4e9e <__negsi2>

00004e8e <__divmodsi4_neg2>:
    4e8e:	50 95       	com	r21
    4e90:	40 95       	com	r20
    4e92:	30 95       	com	r19
    4e94:	21 95       	neg	r18
    4e96:	3f 4f       	sbci	r19, 0xFF	; 255
    4e98:	4f 4f       	sbci	r20, 0xFF	; 255
    4e9a:	5f 4f       	sbci	r21, 0xFF	; 255

00004e9c <__divmodsi4_exit>:
    4e9c:	08 95       	ret

00004e9e <__negsi2>:
    4e9e:	90 95       	com	r25
    4ea0:	80 95       	com	r24
    4ea2:	70 95       	com	r23
    4ea4:	61 95       	neg	r22
    4ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ea8:	8f 4f       	sbci	r24, 0xFF	; 255
    4eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    4eac:	08 95       	ret

00004eae <__tablejump2__>:
    4eae:	ee 0f       	add	r30, r30
    4eb0:	ff 1f       	adc	r31, r31

00004eb2 <__tablejump__>:
    4eb2:	05 90       	lpm	r0, Z+
    4eb4:	f4 91       	lpm	r31, Z
    4eb6:	e0 2d       	mov	r30, r0
    4eb8:	09 94       	ijmp

00004eba <__umulhisi3>:
    4eba:	a2 9f       	mul	r26, r18
    4ebc:	b0 01       	movw	r22, r0
    4ebe:	b3 9f       	mul	r27, r19
    4ec0:	c0 01       	movw	r24, r0
    4ec2:	a3 9f       	mul	r26, r19
    4ec4:	70 0d       	add	r23, r0
    4ec6:	81 1d       	adc	r24, r1
    4ec8:	11 24       	eor	r1, r1
    4eca:	91 1d       	adc	r25, r1
    4ecc:	b2 9f       	mul	r27, r18
    4ece:	70 0d       	add	r23, r0
    4ed0:	81 1d       	adc	r24, r1
    4ed2:	11 24       	eor	r1, r1
    4ed4:	91 1d       	adc	r25, r1
    4ed6:	08 95       	ret

00004ed8 <__muldi3>:
    4ed8:	df 93       	push	r29
    4eda:	cf 93       	push	r28
    4edc:	1f 93       	push	r17
    4ede:	0f 93       	push	r16
    4ee0:	9a 9d       	mul	r25, r10
    4ee2:	f0 2d       	mov	r31, r0
    4ee4:	21 9f       	mul	r18, r17
    4ee6:	f0 0d       	add	r31, r0
    4ee8:	8b 9d       	mul	r24, r11
    4eea:	f0 0d       	add	r31, r0
    4eec:	8a 9d       	mul	r24, r10
    4eee:	e0 2d       	mov	r30, r0
    4ef0:	f1 0d       	add	r31, r1
    4ef2:	03 9f       	mul	r16, r19
    4ef4:	f0 0d       	add	r31, r0
    4ef6:	02 9f       	mul	r16, r18
    4ef8:	e0 0d       	add	r30, r0
    4efa:	f1 1d       	adc	r31, r1
    4efc:	4e 9d       	mul	r20, r14
    4efe:	e0 0d       	add	r30, r0
    4f00:	f1 1d       	adc	r31, r1
    4f02:	5e 9d       	mul	r21, r14
    4f04:	f0 0d       	add	r31, r0
    4f06:	4f 9d       	mul	r20, r15
    4f08:	f0 0d       	add	r31, r0
    4f0a:	7f 93       	push	r23
    4f0c:	6f 93       	push	r22
    4f0e:	bf 92       	push	r11
    4f10:	af 92       	push	r10
    4f12:	5f 93       	push	r21
    4f14:	4f 93       	push	r20
    4f16:	d5 01       	movw	r26, r10
    4f18:	d0 df       	rcall	.-96     	; 0x4eba <__umulhisi3>
    4f1a:	8b 01       	movw	r16, r22
    4f1c:	ac 01       	movw	r20, r24
    4f1e:	d7 01       	movw	r26, r14
    4f20:	cc df       	rcall	.-104    	; 0x4eba <__umulhisi3>
    4f22:	eb 01       	movw	r28, r22
    4f24:	e8 0f       	add	r30, r24
    4f26:	f9 1f       	adc	r31, r25
    4f28:	d6 01       	movw	r26, r12
    4f2a:	1f d0       	rcall	.+62     	; 0x4f6a <__muldi3_6>
    4f2c:	2f 91       	pop	r18
    4f2e:	3f 91       	pop	r19
    4f30:	d6 01       	movw	r26, r12
    4f32:	c3 df       	rcall	.-122    	; 0x4eba <__umulhisi3>
    4f34:	c6 0f       	add	r28, r22
    4f36:	d7 1f       	adc	r29, r23
    4f38:	e8 1f       	adc	r30, r24
    4f3a:	f9 1f       	adc	r31, r25
    4f3c:	af 91       	pop	r26
    4f3e:	bf 91       	pop	r27
    4f40:	14 d0       	rcall	.+40     	; 0x4f6a <__muldi3_6>
    4f42:	2f 91       	pop	r18
    4f44:	3f 91       	pop	r19
    4f46:	b9 df       	rcall	.-142    	; 0x4eba <__umulhisi3>
    4f48:	c6 0f       	add	r28, r22
    4f4a:	d7 1f       	adc	r29, r23
    4f4c:	e8 1f       	adc	r30, r24
    4f4e:	f9 1f       	adc	r31, r25
    4f50:	d6 01       	movw	r26, r12
    4f52:	b3 df       	rcall	.-154    	; 0x4eba <__umulhisi3>
    4f54:	e6 0f       	add	r30, r22
    4f56:	f7 1f       	adc	r31, r23
    4f58:	98 01       	movw	r18, r16
    4f5a:	be 01       	movw	r22, r28
    4f5c:	cf 01       	movw	r24, r30
    4f5e:	11 24       	eor	r1, r1
    4f60:	0f 91       	pop	r16
    4f62:	1f 91       	pop	r17
    4f64:	cf 91       	pop	r28
    4f66:	df 91       	pop	r29
    4f68:	08 95       	ret

00004f6a <__muldi3_6>:
    4f6a:	a7 df       	rcall	.-178    	; 0x4eba <__umulhisi3>
    4f6c:	46 0f       	add	r20, r22
    4f6e:	57 1f       	adc	r21, r23
    4f70:	c8 1f       	adc	r28, r24
    4f72:	d9 1f       	adc	r29, r25
    4f74:	08 f4       	brcc	.+2      	; 0x4f78 <__muldi3_6+0xe>
    4f76:	31 96       	adiw	r30, 0x01	; 1
    4f78:	08 95       	ret

00004f7a <memcpy>:
    4f7a:	fb 01       	movw	r30, r22
    4f7c:	dc 01       	movw	r26, r24
    4f7e:	02 c0       	rjmp	.+4      	; 0x4f84 <memcpy+0xa>
    4f80:	01 90       	ld	r0, Z+
    4f82:	0d 92       	st	X+, r0
    4f84:	41 50       	subi	r20, 0x01	; 1
    4f86:	50 40       	sbci	r21, 0x00	; 0
    4f88:	d8 f7       	brcc	.-10     	; 0x4f80 <memcpy+0x6>
    4f8a:	08 95       	ret

00004f8c <puts>:
    4f8c:	0f 93       	push	r16
    4f8e:	1f 93       	push	r17
    4f90:	cf 93       	push	r28
    4f92:	df 93       	push	r29
    4f94:	e0 91 64 27 	lds	r30, 0x2764
    4f98:	f0 91 65 27 	lds	r31, 0x2765
    4f9c:	23 81       	ldd	r18, Z+3	; 0x03
    4f9e:	21 ff       	sbrs	r18, 1
    4fa0:	1b c0       	rjmp	.+54     	; 0x4fd8 <puts+0x4c>
    4fa2:	ec 01       	movw	r28, r24
    4fa4:	00 e0       	ldi	r16, 0x00	; 0
    4fa6:	10 e0       	ldi	r17, 0x00	; 0
    4fa8:	89 91       	ld	r24, Y+
    4faa:	60 91 64 27 	lds	r22, 0x2764
    4fae:	70 91 65 27 	lds	r23, 0x2765
    4fb2:	db 01       	movw	r26, r22
    4fb4:	18 96       	adiw	r26, 0x08	; 8
    4fb6:	ed 91       	ld	r30, X+
    4fb8:	fc 91       	ld	r31, X
    4fba:	19 97       	sbiw	r26, 0x09	; 9
    4fbc:	88 23       	and	r24, r24
    4fbe:	31 f0       	breq	.+12     	; 0x4fcc <puts+0x40>
    4fc0:	09 95       	icall
    4fc2:	89 2b       	or	r24, r25
    4fc4:	89 f3       	breq	.-30     	; 0x4fa8 <puts+0x1c>
    4fc6:	0f ef       	ldi	r16, 0xFF	; 255
    4fc8:	1f ef       	ldi	r17, 0xFF	; 255
    4fca:	ee cf       	rjmp	.-36     	; 0x4fa8 <puts+0x1c>
    4fcc:	8a e0       	ldi	r24, 0x0A	; 10
    4fce:	09 95       	icall
    4fd0:	89 2b       	or	r24, r25
    4fd2:	11 f4       	brne	.+4      	; 0x4fd8 <puts+0x4c>
    4fd4:	c8 01       	movw	r24, r16
    4fd6:	02 c0       	rjmp	.+4      	; 0x4fdc <puts+0x50>
    4fd8:	8f ef       	ldi	r24, 0xFF	; 255
    4fda:	9f ef       	ldi	r25, 0xFF	; 255
    4fdc:	df 91       	pop	r29
    4fde:	cf 91       	pop	r28
    4fe0:	1f 91       	pop	r17
    4fe2:	0f 91       	pop	r16
    4fe4:	08 95       	ret

00004fe6 <_exit>:
    4fe6:	f8 94       	cli

00004fe8 <__stop_program>:
    4fe8:	ff cf       	rjmp	.-2      	; 0x4fe8 <__stop_program>
